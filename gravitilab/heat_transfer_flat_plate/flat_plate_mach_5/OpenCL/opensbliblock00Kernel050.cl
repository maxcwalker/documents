//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

void opensbliblock00Kernel050(ptr_double rhoE_B0,
  ptr_double rho_B0,
  ptr_double rhou0_B0,
  ptr_double rhou1_B0, const double Minf, const double Twall, const double gama, const double inv2Minf, const double inv_gamma_m1)
{
   double Pwall = 0.0;
   double T1 = 0.0;
   double T2 = 0.0;
   double T3 = 0.0;
   double T4 = 0.0;
   double T_above = 0.0;
   double rho_halo_1 = 0.0;
   double rho_halo_2 = 0.0;
   double rho_halo_3 = 0.0;
   double rho_halo_4 = 0.0;
   double u01 = 0.0;
   double u02 = 0.0;
   double u03 = 0.0;
   double u04 = 0.0;
   double u11 = 0.0;
   double u12 = 0.0;
   double u13 = 0.0;
   double u14 = 0.0;
   OPS_ACCS(rhou0_B0, 0,0) = 0.0;

   OPS_ACCS(rhou1_B0, 0,0) = 0.0;

   OPS_ACCS(rhoE_B0, 0,0) = Twall*inv2Minf*OPS_ACCS(rho_B0, 0,0)/(gama*(-1.0 + gama));

    Pwall = (-1 + gama)*(-(((1.0/2.0))*(OPS_ACCS(rhou0_B0, 0,0)*OPS_ACCS(rhou0_B0, 0,0)) +
      ((1.0/2.0))*(OPS_ACCS(rhou1_B0, 0,0)*OPS_ACCS(rhou1_B0, 0,0)))/OPS_ACCS(rho_B0, 0,0) + OPS_ACCS(rhoE_B0, 0,0));

   u01 = OPS_ACCS(rhou0_B0, 0,1)/OPS_ACCS(rho_B0, 0,1);

   u02 = OPS_ACCS(rhou0_B0, 0,2)/OPS_ACCS(rho_B0, 0,2);

   u03 = OPS_ACCS(rhou0_B0, 0,3)/OPS_ACCS(rho_B0, 0,3);

   u04 = OPS_ACCS(rhou0_B0, 0,4)/OPS_ACCS(rho_B0, 0,4);

   u11 = OPS_ACCS(rhou1_B0, 0,1)/OPS_ACCS(rho_B0, 0,1);

   u12 = OPS_ACCS(rhou1_B0, 0,2)/OPS_ACCS(rho_B0, 0,2);

   u13 = OPS_ACCS(rhou1_B0, 0,3)/OPS_ACCS(rho_B0, 0,3);

   u14 = OPS_ACCS(rhou1_B0, 0,4)/OPS_ACCS(rho_B0, 0,4);

    T_above = (Minf*Minf)*(-1 + gama)*(-(((1.0/2.0))*(OPS_ACCS(rhou0_B0, 0,1)*OPS_ACCS(rhou0_B0, 0,1)) +
      ((1.0/2.0))*(OPS_ACCS(rhou1_B0, 0,1)*OPS_ACCS(rhou1_B0, 0,1)))/OPS_ACCS(rho_B0, 0,1) + OPS_ACCS(rhoE_B0, 0,1))*gama/OPS_ACCS(rho_B0, 0,1);

   T1 = -T_above + 2*Twall;

   rho_halo_1 = (Minf*Minf)*gama*Pwall/T1;

   OPS_ACCS(rho_B0, 0,-1) = rho_halo_1;

   OPS_ACCS(rhou0_B0, 0,-1) = -rho_halo_1*u01;

   OPS_ACCS(rhou1_B0, 0,-1) = -rho_halo_1*u11;

   OPS_ACCS(rhoE_B0, 0,-1) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u01*u01) + (u11*u11))*rho_halo_1;

   T2 = -2*T_above + 3*Twall;

   rho_halo_1 = (Minf*Minf)*gama*Pwall/T1;

   OPS_ACCS(rho_B0, 0,-1) = rho_halo_1;

   rho_halo_2 = (Minf*Minf)*gama*Pwall/T2;

   OPS_ACCS(rho_B0, 0,-2) = rho_halo_2;

   OPS_ACCS(rhou0_B0, 0,-1) = -rho_halo_1*u01;

   OPS_ACCS(rhou1_B0, 0,-1) = -rho_halo_1*u11;

   OPS_ACCS(rhou0_B0, 0,-2) = -rho_halo_2*u02;

   OPS_ACCS(rhou1_B0, 0,-2) = -rho_halo_2*u12;

   OPS_ACCS(rhoE_B0, 0,-1) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u01*u01) + (u11*u11))*rho_halo_1;

   OPS_ACCS(rhoE_B0, 0,-2) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u02*u02) + (u12*u12))*rho_halo_2;

   T3 = -3*T_above + 4*Twall;

   rho_halo_1 = (Minf*Minf)*gama*Pwall/T1;

   OPS_ACCS(rho_B0, 0,-1) = rho_halo_1;

   rho_halo_2 = (Minf*Minf)*gama*Pwall/T2;

   OPS_ACCS(rho_B0, 0,-2) = rho_halo_2;

   rho_halo_3 = (Minf*Minf)*gama*Pwall/T3;

   OPS_ACCS(rho_B0, 0,-3) = rho_halo_3;

   OPS_ACCS(rhou0_B0, 0,-1) = -rho_halo_1*u01;

   OPS_ACCS(rhou1_B0, 0,-1) = -rho_halo_1*u11;

   OPS_ACCS(rhou0_B0, 0,-2) = -rho_halo_2*u02;

   OPS_ACCS(rhou1_B0, 0,-2) = -rho_halo_2*u12;

   OPS_ACCS(rhou0_B0, 0,-3) = -rho_halo_3*u03;

   OPS_ACCS(rhou1_B0, 0,-3) = -rho_halo_3*u13;

   OPS_ACCS(rhoE_B0, 0,-1) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u01*u01) + (u11*u11))*rho_halo_1;

   OPS_ACCS(rhoE_B0, 0,-2) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u02*u02) + (u12*u12))*rho_halo_2;

   OPS_ACCS(rhoE_B0, 0,-3) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u03*u03) + (u13*u13))*rho_halo_3;

   T4 = -4*T_above + 5*Twall;

   rho_halo_1 = (Minf*Minf)*gama*Pwall/T1;

   OPS_ACCS(rho_B0, 0,-1) = rho_halo_1;

   rho_halo_2 = (Minf*Minf)*gama*Pwall/T2;

   OPS_ACCS(rho_B0, 0,-2) = rho_halo_2;

   rho_halo_3 = (Minf*Minf)*gama*Pwall/T3;

   OPS_ACCS(rho_B0, 0,-3) = rho_halo_3;

   rho_halo_4 = (Minf*Minf)*gama*Pwall/T4;

   OPS_ACCS(rho_B0, 0,-4) = rho_halo_4;

   OPS_ACCS(rhou0_B0, 0,-1) = -rho_halo_1*u01;

   OPS_ACCS(rhou1_B0, 0,-1) = -rho_halo_1*u11;

   OPS_ACCS(rhou0_B0, 0,-2) = -rho_halo_2*u02;

   OPS_ACCS(rhou1_B0, 0,-2) = -rho_halo_2*u12;

   OPS_ACCS(rhou0_B0, 0,-3) = -rho_halo_3*u03;

   OPS_ACCS(rhou1_B0, 0,-3) = -rho_halo_3*u13;

   OPS_ACCS(rhou0_B0, 0,-4) = -rho_halo_4*u04;

   OPS_ACCS(rhou1_B0, 0,-4) = -rho_halo_4*u14;

   OPS_ACCS(rhoE_B0, 0,-1) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u01*u01) + (u11*u11))*rho_halo_1;

   OPS_ACCS(rhoE_B0, 0,-2) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u02*u02) + (u12*u12))*rho_halo_2;

   OPS_ACCS(rhoE_B0, 0,-3) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u03*u03) + (u13*u13))*rho_halo_3;

   OPS_ACCS(rhoE_B0, 0,-4) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u04*u04) + (u14*u14))*rho_halo_4;

}


__kernel void ops_opensbliblock00Kernel050(
__global double* restrict arg0,
__global double* restrict arg1,
__global double* restrict arg2,
__global double* restrict arg3,
const double Minf,
const double Twall,
const double gama,
const double inv2Minf,
const double inv_gamma_m1,
const int base0,
const int base1,
const int base2,
const int base3,
const int size0,
const int size1 ){


  int idx_y = get_global_id(1);
  int idx_x = get_global_id(0);

  if (idx_x < size0 && idx_y < size1) {
    ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_opensbliblock00Kernel050], xdim0_opensbliblock00Kernel050};
    ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_opensbliblock00Kernel050], xdim1_opensbliblock00Kernel050};
    ptr_double ptr2 = { &arg2[base2 + idx_x * 1*1 + idx_y * 1*1 * xdim2_opensbliblock00Kernel050], xdim2_opensbliblock00Kernel050};
    ptr_double ptr3 = { &arg3[base3 + idx_x * 1*1 + idx_y * 1*1 * xdim3_opensbliblock00Kernel050], xdim3_opensbliblock00Kernel050};
    opensbliblock00Kernel050(ptr0,
                                  ptr1,
                                  ptr2,
                                  ptr3,
                                  Minf,
                                  Twall,
                                  gama,
                                  inv2Minf,
                                  inv_gamma_m1);
  }

}
