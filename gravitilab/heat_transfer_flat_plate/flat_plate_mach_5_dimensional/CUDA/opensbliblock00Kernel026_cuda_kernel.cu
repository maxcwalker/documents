//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel026 [4][1];
static int dims_opensbliblock00Kernel026_h [4][1] = {0};

//user function
__device__

 void opensbliblock00Kernel026_gpu(const ACC<double> &x1_B0,
  ACC<double> &rhoE_B0,
  ACC<double> &rhou0_B0,
  ACC<double>
&rhou1_B0)
{
   double T = 0.0;
   double Twalld = 0.0;
   double rho = 0.0;
   double rhou0 = 0.0;
   double rhou1 = 0.0;
   Twalld = Twall;

<<<<<<< HEAD
=======
   T = pref*invRhat/rho;
>>>>>>> 04735e8652de3d2dec770d04ef7c03ca6303cc9e

    rhou0 = ((x1_B0(0,0) < 0.000546454645464546) ? (
   0.858698693583218 + 1.39657329019463e+122*pow(x1_B0(0,0), 34) +
      3726485.05172807*x1_B0(0,0) + 1.33094339783081e+168*pow(x1_B0(0,0), 48) + 1.00045987175411e+96*pow(x1_B0(0,0), 26)
      + 5.91096077573414e+36*pow(x1_B0(0,0), 8) + 1.53528049555959e+154*pow(x1_B0(0,0), 44) +
      3.57559334080588e+92*pow(x1_B0(0,0), 25) + 5.58489958728709e+56*pow(x1_B0(0,0), 14) +
      1.99573334132696e+148*pow(x1_B0(0,0), 42) + 1.4727840573024e+76*pow(x1_B0(0,0), 20) +
      1.0503126569574e+53*pow(x1_B0(0,0), 13) + 4.57807324979604e+118*pow(x1_B0(0,0), 33) +
      5.20539623672006e+43*pow(x1_B0(0,0), 10) +
      9.47393985493029e+28*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      1.31196707425615e+99*pow(x1_B0(0,0), 27) + 4.16539652620451e+144*pow(x1_B0(0,0), 41) +
      2.26846547650172e+125*pow(x1_B0(0,0), 35) + 3.62973597370326e+151*pow(x1_B0(0,0), 43) +
      4.48987447463518e+57*pow(x1_B0(0,0), 15) + 101026314677.042*(x1_B0(0,0)*x1_B0(0,0)) +
      2.7352608539862e+69*pow(x1_B0(0,0), 18) + 1.42025285057736e+128*pow(x1_B0(0,0), 36) +
      1.28203608136771e+73*pow(x1_B0(0,0), 19) + 2.77869102983301e+20*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      3.98954764747764e+131*pow(x1_B0(0,0), 37) - 2.19806323613439e+100*pow(x1_B0(0,0), 28) -
      1.19191949313435e+109*pow(x1_B0(0,0), 30) - 4.52103367863723e+105*pow(x1_B0(0,0), 29) -
      2.39028758605609e+40*pow(x1_B0(0,0), 9) - 7.91326281645742e+82*pow(x1_B0(0,0), 22) -
      4.04137812327632e+114*pow(x1_B0(0,0), 32) - 2.98513506190655e+138*pow(x1_B0(0,0), 39) -
      1.59961177373359e+135*pow(x1_B0(0,0), 38) - 1.8835242031209e+63*pow(x1_B0(0,0), 16) -
      7.19960905137795e+15*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) - 1.65505310471418e+112*pow(x1_B0(0,0), 31) -
      8.41905128003066e-150*pow(x1_B0(0,0), 50) - 9.85968895040876e+170*pow(x1_B0(0,0), 49) -
      1.30331973301378e+86*pow(x1_B0(0,0), 23) - 3.49489433804139e+88*pow(x1_B0(0,0), 24) -
      7.07995952709708e+163*pow(x1_B0(0,0), 47) - 2.89312345112914e+161*pow(x1_B0(0,0), 46) -
      6.41403307986648e+24*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) - 9.220284483546e+32*pow(x1_B0(0,0),
      7) - 2.4115325410043e+66*pow(x1_B0(0,0), 17) - 1.64562776952111e+46*pow(x1_B0(0,0), 11) -
      2.44081367278191e+141*pow(x1_B0(0,0), 40) - 1.58723193651149e+50*pow(x1_B0(0,0), 12) -
      1.37463449781703e+79*pow(x1_B0(0,0), 21) - 1.04863709278208e+158*pow(x1_B0(0,0), 45)
)
: (

      6886.80089778235
));

    rhou1 = ((x1_B0(0,0) < 0.000546454645464546) ? (
   0.0862659950729564 + 9.20504506454416e+166*pow(x1_B0(0,0), 48) +
      3.95364242681887e+42*pow(x1_B0(0,0), 10) + 1.19671347876251e+153*pow(x1_B0(0,0), 44) +
      7.97833436068639e+27*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      2.67469323691896e+143*pow(x1_B0(0,0), 41) + 4.75838149222483e+35*pow(x1_B0(0,0), 8) +
      2.56125455344141e+150*pow(x1_B0(0,0), 43) + 1.37463322564474e+147*pow(x1_B0(0,0), 42) +
      1.13350549298172e+127*pow(x1_B0(0,0), 36) + 9.32842000582636e+71*pow(x1_B0(0,0), 19) +
      1.15581374543589e+75*pow(x1_B0(0,0), 20) + 2.4563480029792e+19*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      2.40719370842285e+91*pow(x1_B0(0,0), 25) + 4.23090851304197e+55*pow(x1_B0(0,0), 14) +
      7.16064160385195e+94*pow(x1_B0(0,0), 26) + 6.77721814455417e+51*pow(x1_B0(0,0), 13) +
      9847519552.95012*(x1_B0(0,0)*x1_B0(0,0)) + 3.03458168281558e+117*pow(x1_B0(0,0), 33) +
      1.13730942691884e+100*pow(x1_B0(0,0), 28) + 9.88273182924966e+97*pow(x1_B0(0,0), 27) +
      4.7769382610212e+57*pow(x1_B0(0,0), 15) + 1.6371842747665e+124*pow(x1_B0(0,0), 35) +
      1.73616192787955e+68*pow(x1_B0(0,0), 18) + 9.75864538026825e+120*pow(x1_B0(0,0), 34) -
      657060279221524.0*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) - 9.55638892367494e+44*pow(x1_B0(0,0), 11) -
      7.12066381860709e+156*pow(x1_B0(0,0), 45) - 4.22531579023259e+113*pow(x1_B0(0,0), 32) -
      1.22096236012231e+49*pow(x1_B0(0,0), 12) - 1.10405875401201e+134*pow(x1_B0(0,0), 38) -
      1.36952533666199e+62*pow(x1_B0(0,0), 16) - 1.87759613947655e+39*pow(x1_B0(0,0), 9) - 58265.3516008026*x1_B0(0,0) -
      5.52948346826185e+23*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      3.68971364439748e+87*pow(x1_B0(0,0), 24) - 7.59181768696008e+31*pow(x1_B0(0,0), 7) -
      1.22356257834338e+111*pow(x1_B0(0,0), 31) - 3.05059257241305e+104*pow(x1_B0(0,0), 29) -
      6.75653065874639e+169*pow(x1_B0(0,0), 49) - 2.11797883532286e+137*pow(x1_B0(0,0), 39) -
      2.57102889301786e+130*pow(x1_B0(0,0), 37) - 9.76610367693938e+84*pow(x1_B0(0,0), 23) -
      2.01689106738873e+160*pow(x1_B0(0,0), 46) - 8.45216686499623e+107*pow(x1_B0(0,0), 30) -
      5.62120848797368e+81*pow(x1_B0(0,0), 22) - 5.51705872264717e+162*pow(x1_B0(0,0), 47) -
      8.1754198020578e+77*pow(x1_B0(0,0), 21) - 1.90031094743102e+65*pow(x1_B0(0,0), 17) -
      1.83428338862933e+140*pow(x1_B0(0,0), 40) - 5.88387830608144e-151*pow(x1_B0(0,0), 50)
)
: (

      348.579084391623
));

    T = ((x1_B0(0,0) < 0.000546454645464546) ? (
   1541.55953018323 + 3.93700337083935e+54*pow(x1_B0(0,0), 14) +
      1.83234496018396e+126*pow(x1_B0(0,0), 36) + 1.80441035923754e+100*pow(x1_B0(0,0), 28) +
      1.97626736723119e+103*pow(x1_B0(0,0), 29) + 3.65669621467388e+132*pow(x1_B0(0,0), 38) +
      8.66765114554566e+96*pow(x1_B0(0,0), 27) + 1.38463975102275e+93*pow(x1_B0(0,0), 26) +
      3.93334527754926e+70*pow(x1_B0(0,0), 19) +
      1.68687867977813e+27*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      1.60032593477545e+74*pow(x1_B0(0,0), 20) + 3.85636593065571e+158*pow(x1_B0(0,0), 46) +
      7.73978211259729e+34*pow(x1_B0(0,0), 8) + 5.95622846269919e+57*pow(x1_B0(0,0), 15) +
      3.76302153044984e+41*pow(x1_B0(0,0), 10) + 3.47887643295795e+129*pow(x1_B0(0,0), 37) +
      6.37399692978607e+18*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) + 4.90323375783774e+122*pow(x1_B0(0,0), 35) +
      2.66950178027241e+44*pow(x1_B0(0,0), 11) + 1.57419658864866e+152*pow(x1_B0(0,0), 44) +
      2.96024742431461e+168*pow(x1_B0(0,0), 49) + 2.08200226092924e+77*pow(x1_B0(0,0), 21) +
      4.06439073681065e+155*pow(x1_B0(0,0), 45) + 9.19239054844244e-153*pow(x1_B0(0,0), 50) -
      188770091543097.0*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) - 5.39981205630432e+79*pow(x1_B0(0,0), 22) -
      1.92427433802071e+113*pow(x1_B0(0,0), 32) - 1.61030593954856e+90*pow(x1_B0(0,0), 25) -
      1.42287528857958e+31*pow(x1_B0(0,0), 7) - 8.22860698218673e+50*pow(x1_B0(0,0), 13) -
      1.54594172184999e+139*pow(x1_B0(0,0), 40) - 7.88015191184755e+83*pow(x1_B0(0,0), 23) -
      2.53225908692748e+38*pow(x1_B0(0,0), 9) - 2.8083385801981e+165*pow(x1_B0(0,0), 48) -
      7.22658693350727e+161*pow(x1_B0(0,0), 47) - 1.27354910559729e+135*pow(x1_B0(0,0), 39) -
      1.48033487097098e+119*pow(x1_B0(0,0), 34) - 7.69015404030736e+109*pow(x1_B0(0,0), 31) -
      2.70281018743248e+64*pow(x1_B0(0,0), 17) - 5.07228683685271e+105*pow(x1_B0(0,0), 30) - 20172.9878919216*x1_B0(0,0)
      - 4.78269252620416e+147*pow(x1_B0(0,0), 43) - 3.77561261452667e+142*pow(x1_B0(0,0), 41) -
      1.69313809404105e+87*pow(x1_B0(0,0), 24) -
      1.30232664632772e+23*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      5.65501800427317e+60*pow(x1_B0(0,0), 16) - 2.79041943511342e+116*pow(x1_B0(0,0), 33) -
      1.35700866575301e+48*pow(x1_B0(0,0), 12) - 2.59907326906903e+67*pow(x1_B0(0,0), 18) -
      8400953442.73587*(x1_B0(0,0)*x1_B0(0,0)) - 4.98848537195279e+145*pow(x1_B0(0,0), 42)
)
: (

      297.000003052167
));
<<<<<<< HEAD
   T = 297.0;

   rho = 1202.74707431774;
=======

   rho = 1202.74707431774/T;
>>>>>>> 04735e8652de3d2dec770d04ef7c03ca6303cc9e

   rhou0_B0(0,0) = rhou0;

   rhou1_B0(0,0) = rhou1;

   rhoE_B0(0,0) = (0.5*(rhou0*rhou0) + 0.5*(rhou1*rhou1))/rho + invgama*inv2Minf*inv_gamma_m1*T*rho;

}



__global__ void ops_opensbliblock00Kernel026(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
int size0,
int size1 ){


  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel026[0][0];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel026[1][0];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel026[2][0];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel026[3][0];

  if (idx_x < size0 && idx_y < size1) {
    const ACC<double> argp0(dims_opensbliblock00Kernel026[0][0], arg0);
    ACC<double> argp1(dims_opensbliblock00Kernel026[1][0], arg1);
    ACC<double> argp2(dims_opensbliblock00Kernel026[2][0], arg2);
    ACC<double> argp3(dims_opensbliblock00Kernel026[3][0], arg3);
    opensbliblock00Kernel026_gpu(argp0, argp1, argp2, argp3);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel026(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3) {
#else
void ops_par_loop_opensbliblock00Kernel026_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[4] = { arg0, arg1, arg2, arg3};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,4,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel026");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  #if OPS_MPI && !OPS_LAZY
  sub_block_list sb = OPS_sub_block_list[block->index];
  #endif //OPS_MPI

  #ifdef OPS_MPI
  int arg_idx[2];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 4,block, range, start, end, arg_idx) < 0) return;
  #endif

  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel026_h[0][0] || xdim1 != dims_opensbliblock00Kernel026_h[1][0] || xdim2 != dims_opensbliblock00Kernel026_h[2][0] || xdim3 != dims_opensbliblock00Kernel026_h[3][0]) {
    dims_opensbliblock00Kernel026_h[0][0] = xdim0;
    dims_opensbliblock00Kernel026_h[1][0] = xdim1;
    dims_opensbliblock00Kernel026_h[2][0] = xdim2;
    dims_opensbliblock00Kernel026_h[3][0] = xdim3;
    cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_opensbliblock00Kernel026, dims_opensbliblock00Kernel026_h, sizeof(dims_opensbliblock00Kernel026)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);

  char *p_a[4];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  p_a[3] = (char *)args[3].data_d + base3;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 4);
  ops_halo_exchanges(args,4,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0)
    ops_opensbliblock00Kernel026<<<grid, tblock >>> (  (double *)p_a[0], (double *)p_a[1],
         (double *)p_a[2], (double *)p_a[3],x_size, y_size);

  cutilSafeCall(block->instance->ostream(), cudaGetLastError());

  if (block->instance->OPS_diags>1) {
    cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[0].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 4);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel026(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 0;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 0;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 4;
  desc->args = (ops_arg*)ops_malloc(4*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->function = ops_par_loop_opensbliblock00Kernel026_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel026");
  }
  ops_enqueue_kernel(desc);
}
#endif
