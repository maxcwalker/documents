//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

 void opensbliblock00Kernel038(const ptr_double D00_B0,
  const ptr_double D01_B0,
  const ptr_double D10_B0,
  const
ptr_double D11_B0,
  ptr_double SD000_B0,
  ptr_double SD001_B0,
  ptr_double SD010_B0,
  ptr_double SD011_B0,
  ptr_double SD100_B0,
  ptr_double SD101_B0,
  ptr_double SD110_B0,
  ptr_double SD111_B0,
  const int *idx, const int block0np0, const int block0np1, const double invDelta0block0, const double invDelta1block0)
{
   double d1_D00_dx = 0.0;
   double d1_D00_dy = 0.0;
   double d1_D01_dx = 0.0;
   double d1_D01_dy = 0.0;
   double d1_D10_dx = 0.0;
   double d1_D10_dy = 0.0;
   double d1_D11_dx = 0.0;
   double d1_D11_dy = 0.0;
<<<<<<< HEAD
    d1_D01_dx = invDelta0block0*((idx[0] == 0) ? (
   -3*OPS_ACCS(D01_B0, 2,0) + 4*OPS_ACCS(D01_B0, 1,0) - (25.0/12.0)*OPS_ACCS(D01_B0, 0,0) -
      (1.0/4.0)*OPS_ACCS(D01_B0, 4,0) + ((4.0/3.0))*OPS_ACCS(D01_B0, 3,0)
)
: ((idx[0] == 1) ? (
   -(5.0/6.0)*OPS_ACCS(D01_B0, 0,0) -
      (1.0/2.0)*OPS_ACCS(D01_B0, 2,0) - (1.0/4.0)*OPS_ACCS(D01_B0, -1,0) + ((1.0/12.0))*OPS_ACCS(D01_B0, 3,0) + ((3.0/2.0))*OPS_ACCS(D01_B0, 1,0)
)
: ((idx[0]
      == -1 + block0np0) ? (
   -4*OPS_ACCS(D01_B0, -1,0) + 3*OPS_ACCS(D01_B0, -2,0) - (4.0/3.0)*OPS_ACCS(D01_B0, -3,0) + ((1.0/4.0))*OPS_ACCS(D01_B0, -4,0) +
      ((25.0/12.0))*OPS_ACCS(D01_B0, 0,0)
)
: ((idx[0] == -2 + block0np0) ? (
   ((1.0/2.0))*OPS_ACCS(D01_B0, -2,0) - (3.0/2.0)*OPS_ACCS(D01_B0, -1,0)
      - (1.0/12.0)*OPS_ACCS(D01_B0, -3,0) + ((1.0/4.0))*OPS_ACCS(D01_B0, 1,0) + ((5.0/6.0))*OPS_ACCS(D01_B0, 0,0)
)
: (
   -(2.0/3.0)*OPS_ACCS(D01_B0, -1,0) -
      (1.0/12.0)*OPS_ACCS(D01_B0, 2,0) + ((1.0/12.0))*OPS_ACCS(D01_B0, -2,0) + ((2.0/3.0))*OPS_ACCS(D01_B0, 1,0)
)))));

    d1_D00_dx = invDelta0block0*((idx[0] == 0) ? (
   -3*OPS_ACCS(D00_B0, 2,0) + 4*OPS_ACCS(D00_B0, 1,0) - (25.0/12.0)*OPS_ACCS(D00_B0, 0,0) -
      (1.0/4.0)*OPS_ACCS(D00_B0, 4,0) + ((4.0/3.0))*OPS_ACCS(D00_B0, 3,0)
)
: ((idx[0] == 1) ? (
   -(5.0/6.0)*OPS_ACCS(D00_B0, 0,0) -
      (1.0/2.0)*OPS_ACCS(D00_B0, 2,0) - (1.0/4.0)*OPS_ACCS(D00_B0, -1,0) + ((1.0/12.0))*OPS_ACCS(D00_B0, 3,0) + ((3.0/2.0))*OPS_ACCS(D00_B0, 1,0)
)
: ((idx[0]
      == -1 + block0np0) ? (
   -4*OPS_ACCS(D00_B0, -1,0) + 3*OPS_ACCS(D00_B0, -2,0) - (4.0/3.0)*OPS_ACCS(D00_B0, -3,0) + ((1.0/4.0))*OPS_ACCS(D00_B0, -4,0) +
      ((25.0/12.0))*OPS_ACCS(D00_B0, 0,0)
)
: ((idx[0] == -2 + block0np0) ? (
   ((1.0/2.0))*OPS_ACCS(D00_B0, -2,0) - (3.0/2.0)*OPS_ACCS(D00_B0, -1,0)
      - (1.0/12.0)*OPS_ACCS(D00_B0, -3,0) + ((1.0/4.0))*OPS_ACCS(D00_B0, 1,0) + ((5.0/6.0))*OPS_ACCS(D00_B0, 0,0)
)
: (
   -(2.0/3.0)*OPS_ACCS(D00_B0, -1,0) -
      (1.0/12.0)*OPS_ACCS(D00_B0, 2,0) + ((1.0/12.0))*OPS_ACCS(D00_B0, -2,0) + ((2.0/3.0))*OPS_ACCS(D00_B0, 1,0)
)))));

    d1_D01_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*OPS_ACCS(D01_B0, 0,2) + 4*OPS_ACCS(D01_B0, 0,1) - (25.0/12.0)*OPS_ACCS(D01_B0, 0,0) -
      (1.0/4.0)*OPS_ACCS(D01_B0, 0,4) + ((4.0/3.0))*OPS_ACCS(D01_B0, 0,3)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*OPS_ACCS(D01_B0, 0,0) -
      (1.0/2.0)*OPS_ACCS(D01_B0, 0,2) - (1.0/4.0)*OPS_ACCS(D01_B0, 0,-1) + ((1.0/12.0))*OPS_ACCS(D01_B0, 0,3) + ((3.0/2.0))*OPS_ACCS(D01_B0, 0,1)
)
: ((idx[1]
      == -1 + block0np1) ? (
   -4*OPS_ACCS(D01_B0, 0,-1) + 3*OPS_ACCS(D01_B0, 0,-2) - (4.0/3.0)*OPS_ACCS(D01_B0, 0,-3) + ((1.0/4.0))*OPS_ACCS(D01_B0, 0,-4) +
      ((25.0/12.0))*OPS_ACCS(D01_B0, 0,0)
)
: ((idx[1] == -2 + block0np1) ? (
   ((1.0/2.0))*OPS_ACCS(D01_B0, 0,-2) - (3.0/2.0)*OPS_ACCS(D01_B0, 0,-1)
      - (1.0/12.0)*OPS_ACCS(D01_B0, 0,-3) + ((1.0/4.0))*OPS_ACCS(D01_B0, 0,1) + ((5.0/6.0))*OPS_ACCS(D01_B0, 0,0)
)
: (
   -(2.0/3.0)*OPS_ACCS(D01_B0, 0,-1) -
      (1.0/12.0)*OPS_ACCS(D01_B0, 0,2) + ((1.0/12.0))*OPS_ACCS(D01_B0, 0,-2) + ((2.0/3.0))*OPS_ACCS(D01_B0, 0,1)
)))));

    d1_D00_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*OPS_ACCS(D00_B0, 0,2) + 4*OPS_ACCS(D00_B0, 0,1) - (25.0/12.0)*OPS_ACCS(D00_B0, 0,0) -
      (1.0/4.0)*OPS_ACCS(D00_B0, 0,4) + ((4.0/3.0))*OPS_ACCS(D00_B0, 0,3)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*OPS_ACCS(D00_B0, 0,0) -
      (1.0/2.0)*OPS_ACCS(D00_B0, 0,2) - (1.0/4.0)*OPS_ACCS(D00_B0, 0,-1) + ((1.0/12.0))*OPS_ACCS(D00_B0, 0,3) + ((3.0/2.0))*OPS_ACCS(D00_B0, 0,1)
)
: ((idx[1]
      == -1 + block0np1) ? (
   -4*OPS_ACCS(D00_B0, 0,-1) + 3*OPS_ACCS(D00_B0, 0,-2) - (4.0/3.0)*OPS_ACCS(D00_B0, 0,-3) + ((1.0/4.0))*OPS_ACCS(D00_B0, 0,-4) +
      ((25.0/12.0))*OPS_ACCS(D00_B0, 0,0)
)
: ((idx[1] == -2 + block0np1) ? (
   ((1.0/2.0))*OPS_ACCS(D00_B0, 0,-2) - (3.0/2.0)*OPS_ACCS(D00_B0, 0,-1)
      - (1.0/12.0)*OPS_ACCS(D00_B0, 0,-3) + ((1.0/4.0))*OPS_ACCS(D00_B0, 0,1) + ((5.0/6.0))*OPS_ACCS(D00_B0, 0,0)
)
: (
   -(2.0/3.0)*OPS_ACCS(D00_B0, 0,-1) -
      (1.0/12.0)*OPS_ACCS(D00_B0, 0,2) + ((1.0/12.0))*OPS_ACCS(D00_B0, 0,-2) + ((2.0/3.0))*OPS_ACCS(D00_B0, 0,1)
)))));

=======
>>>>>>> 04735e8652de3d2dec770d04ef7c03ca6303cc9e
    d1_D11_dx = invDelta0block0*((idx[0] == 0) ? (
   -3*OPS_ACCS(D11_B0, 2,0) + 4*OPS_ACCS(D11_B0, 1,0) - (25.0/12.0)*OPS_ACCS(D11_B0, 0,0) -
      (1.0/4.0)*OPS_ACCS(D11_B0, 4,0) + ((4.0/3.0))*OPS_ACCS(D11_B0, 3,0)
)
: ((idx[0] == 1) ? (
   -(5.0/6.0)*OPS_ACCS(D11_B0, 0,0) -
      (1.0/2.0)*OPS_ACCS(D11_B0, 2,0) - (1.0/4.0)*OPS_ACCS(D11_B0, -1,0) + ((1.0/12.0))*OPS_ACCS(D11_B0, 3,0) + ((3.0/2.0))*OPS_ACCS(D11_B0, 1,0)
)
: ((idx[0]
      == -1 + block0np0) ? (
   -4*OPS_ACCS(D11_B0, -1,0) + 3*OPS_ACCS(D11_B0, -2,0) - (4.0/3.0)*OPS_ACCS(D11_B0, -3,0) + ((1.0/4.0))*OPS_ACCS(D11_B0, -4,0) +
      ((25.0/12.0))*OPS_ACCS(D11_B0, 0,0)
)
: ((idx[0] == -2 + block0np0) ? (
   ((1.0/2.0))*OPS_ACCS(D11_B0, -2,0) - (3.0/2.0)*OPS_ACCS(D11_B0, -1,0)
      - (1.0/12.0)*OPS_ACCS(D11_B0, -3,0) + ((1.0/4.0))*OPS_ACCS(D11_B0, 1,0) + ((5.0/6.0))*OPS_ACCS(D11_B0, 0,0)
)
: (
   -(2.0/3.0)*OPS_ACCS(D11_B0, -1,0) -
      (1.0/12.0)*OPS_ACCS(D11_B0, 2,0) + ((1.0/12.0))*OPS_ACCS(D11_B0, -2,0) + ((2.0/3.0))*OPS_ACCS(D11_B0, 1,0)
)))));

<<<<<<< HEAD
    d1_D11_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*OPS_ACCS(D11_B0, 0,2) + 4*OPS_ACCS(D11_B0, 0,1) - (25.0/12.0)*OPS_ACCS(D11_B0, 0,0) -
      (1.0/4.0)*OPS_ACCS(D11_B0, 0,4) + ((4.0/3.0))*OPS_ACCS(D11_B0, 0,3)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*OPS_ACCS(D11_B0, 0,0) -
      (1.0/2.0)*OPS_ACCS(D11_B0, 0,2) - (1.0/4.0)*OPS_ACCS(D11_B0, 0,-1) + ((1.0/12.0))*OPS_ACCS(D11_B0, 0,3) + ((3.0/2.0))*OPS_ACCS(D11_B0, 0,1)
)
: ((idx[1]
      == -1 + block0np1) ? (
   -4*OPS_ACCS(D11_B0, 0,-1) + 3*OPS_ACCS(D11_B0, 0,-2) - (4.0/3.0)*OPS_ACCS(D11_B0, 0,-3) + ((1.0/4.0))*OPS_ACCS(D11_B0, 0,-4) +
      ((25.0/12.0))*OPS_ACCS(D11_B0, 0,0)
)
: ((idx[1] == -2 + block0np1) ? (
   ((1.0/2.0))*OPS_ACCS(D11_B0, 0,-2) - (3.0/2.0)*OPS_ACCS(D11_B0, 0,-1)
      - (1.0/12.0)*OPS_ACCS(D11_B0, 0,-3) + ((1.0/4.0))*OPS_ACCS(D11_B0, 0,1) + ((5.0/6.0))*OPS_ACCS(D11_B0, 0,0)
)
: (
   -(2.0/3.0)*OPS_ACCS(D11_B0, 0,-1) -
      (1.0/12.0)*OPS_ACCS(D11_B0, 0,2) + ((1.0/12.0))*OPS_ACCS(D11_B0, 0,-2) + ((2.0/3.0))*OPS_ACCS(D11_B0, 0,1)
=======
    d1_D01_dx = invDelta0block0*((idx[0] == 0) ? (
   -3*OPS_ACCS(D01_B0, 2,0) + 4*OPS_ACCS(D01_B0, 1,0) - (25.0/12.0)*OPS_ACCS(D01_B0, 0,0) -
      (1.0/4.0)*OPS_ACCS(D01_B0, 4,0) + ((4.0/3.0))*OPS_ACCS(D01_B0, 3,0)
)
: ((idx[0] == 1) ? (
   -(5.0/6.0)*OPS_ACCS(D01_B0, 0,0) -
      (1.0/2.0)*OPS_ACCS(D01_B0, 2,0) - (1.0/4.0)*OPS_ACCS(D01_B0, -1,0) + ((1.0/12.0))*OPS_ACCS(D01_B0, 3,0) + ((3.0/2.0))*OPS_ACCS(D01_B0, 1,0)
)
: ((idx[0]
      == -1 + block0np0) ? (
   -4*OPS_ACCS(D01_B0, -1,0) + 3*OPS_ACCS(D01_B0, -2,0) - (4.0/3.0)*OPS_ACCS(D01_B0, -3,0) + ((1.0/4.0))*OPS_ACCS(D01_B0, -4,0) +
      ((25.0/12.0))*OPS_ACCS(D01_B0, 0,0)
)
: ((idx[0] == -2 + block0np0) ? (
   ((1.0/2.0))*OPS_ACCS(D01_B0, -2,0) - (3.0/2.0)*OPS_ACCS(D01_B0, -1,0)
      - (1.0/12.0)*OPS_ACCS(D01_B0, -3,0) + ((1.0/4.0))*OPS_ACCS(D01_B0, 1,0) + ((5.0/6.0))*OPS_ACCS(D01_B0, 0,0)
)
: (
   -(2.0/3.0)*OPS_ACCS(D01_B0, -1,0) -
      (1.0/12.0)*OPS_ACCS(D01_B0, 2,0) + ((1.0/12.0))*OPS_ACCS(D01_B0, -2,0) + ((2.0/3.0))*OPS_ACCS(D01_B0, 1,0)
>>>>>>> 04735e8652de3d2dec770d04ef7c03ca6303cc9e
)))));

    d1_D10_dx = invDelta0block0*((idx[0] == 0) ? (
   -3*OPS_ACCS(D10_B0, 2,0) + 4*OPS_ACCS(D10_B0, 1,0) - (25.0/12.0)*OPS_ACCS(D10_B0, 0,0) -
      (1.0/4.0)*OPS_ACCS(D10_B0, 4,0) + ((4.0/3.0))*OPS_ACCS(D10_B0, 3,0)
)
: ((idx[0] == 1) ? (
   -(5.0/6.0)*OPS_ACCS(D10_B0, 0,0) -
      (1.0/2.0)*OPS_ACCS(D10_B0, 2,0) - (1.0/4.0)*OPS_ACCS(D10_B0, -1,0) + ((1.0/12.0))*OPS_ACCS(D10_B0, 3,0) + ((3.0/2.0))*OPS_ACCS(D10_B0, 1,0)
)
: ((idx[0]
      == -1 + block0np0) ? (
   -4*OPS_ACCS(D10_B0, -1,0) + 3*OPS_ACCS(D10_B0, -2,0) - (4.0/3.0)*OPS_ACCS(D10_B0, -3,0) + ((1.0/4.0))*OPS_ACCS(D10_B0, -4,0) +
      ((25.0/12.0))*OPS_ACCS(D10_B0, 0,0)
)
: ((idx[0] == -2 + block0np0) ? (
   ((1.0/2.0))*OPS_ACCS(D10_B0, -2,0) - (3.0/2.0)*OPS_ACCS(D10_B0, -1,0)
      - (1.0/12.0)*OPS_ACCS(D10_B0, -3,0) + ((1.0/4.0))*OPS_ACCS(D10_B0, 1,0) + ((5.0/6.0))*OPS_ACCS(D10_B0, 0,0)
)
: (
   -(2.0/3.0)*OPS_ACCS(D10_B0, -1,0) -
      (1.0/12.0)*OPS_ACCS(D10_B0, 2,0) + ((1.0/12.0))*OPS_ACCS(D10_B0, -2,0) + ((2.0/3.0))*OPS_ACCS(D10_B0, 1,0)
)))));

<<<<<<< HEAD
=======
    d1_D11_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*OPS_ACCS(D11_B0, 0,2) + 4*OPS_ACCS(D11_B0, 0,1) - (25.0/12.0)*OPS_ACCS(D11_B0, 0,0) -
      (1.0/4.0)*OPS_ACCS(D11_B0, 0,4) + ((4.0/3.0))*OPS_ACCS(D11_B0, 0,3)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*OPS_ACCS(D11_B0, 0,0) -
      (1.0/2.0)*OPS_ACCS(D11_B0, 0,2) - (1.0/4.0)*OPS_ACCS(D11_B0, 0,-1) + ((1.0/12.0))*OPS_ACCS(D11_B0, 0,3) + ((3.0/2.0))*OPS_ACCS(D11_B0, 0,1)
)
: ((idx[1]
      == -1 + block0np1) ? (
   -4*OPS_ACCS(D11_B0, 0,-1) + 3*OPS_ACCS(D11_B0, 0,-2) - (4.0/3.0)*OPS_ACCS(D11_B0, 0,-3) + ((1.0/4.0))*OPS_ACCS(D11_B0, 0,-4) +
      ((25.0/12.0))*OPS_ACCS(D11_B0, 0,0)
)
: ((idx[1] == -2 + block0np1) ? (
   ((1.0/2.0))*OPS_ACCS(D11_B0, 0,-2) - (3.0/2.0)*OPS_ACCS(D11_B0, 0,-1)
      - (1.0/12.0)*OPS_ACCS(D11_B0, 0,-3) + ((1.0/4.0))*OPS_ACCS(D11_B0, 0,1) + ((5.0/6.0))*OPS_ACCS(D11_B0, 0,0)
)
: (
   -(2.0/3.0)*OPS_ACCS(D11_B0, 0,-1) -
      (1.0/12.0)*OPS_ACCS(D11_B0, 0,2) + ((1.0/12.0))*OPS_ACCS(D11_B0, 0,-2) + ((2.0/3.0))*OPS_ACCS(D11_B0, 0,1)
)))));

    d1_D00_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*OPS_ACCS(D00_B0, 0,2) + 4*OPS_ACCS(D00_B0, 0,1) - (25.0/12.0)*OPS_ACCS(D00_B0, 0,0) -
      (1.0/4.0)*OPS_ACCS(D00_B0, 0,4) + ((4.0/3.0))*OPS_ACCS(D00_B0, 0,3)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*OPS_ACCS(D00_B0, 0,0) -
      (1.0/2.0)*OPS_ACCS(D00_B0, 0,2) - (1.0/4.0)*OPS_ACCS(D00_B0, 0,-1) + ((1.0/12.0))*OPS_ACCS(D00_B0, 0,3) + ((3.0/2.0))*OPS_ACCS(D00_B0, 0,1)
)
: ((idx[1]
      == -1 + block0np1) ? (
   -4*OPS_ACCS(D00_B0, 0,-1) + 3*OPS_ACCS(D00_B0, 0,-2) - (4.0/3.0)*OPS_ACCS(D00_B0, 0,-3) + ((1.0/4.0))*OPS_ACCS(D00_B0, 0,-4) +
      ((25.0/12.0))*OPS_ACCS(D00_B0, 0,0)
)
: ((idx[1] == -2 + block0np1) ? (
   ((1.0/2.0))*OPS_ACCS(D00_B0, 0,-2) - (3.0/2.0)*OPS_ACCS(D00_B0, 0,-1)
      - (1.0/12.0)*OPS_ACCS(D00_B0, 0,-3) + ((1.0/4.0))*OPS_ACCS(D00_B0, 0,1) + ((5.0/6.0))*OPS_ACCS(D00_B0, 0,0)
)
: (
   -(2.0/3.0)*OPS_ACCS(D00_B0, 0,-1) -
      (1.0/12.0)*OPS_ACCS(D00_B0, 0,2) + ((1.0/12.0))*OPS_ACCS(D00_B0, 0,-2) + ((2.0/3.0))*OPS_ACCS(D00_B0, 0,1)
)))));

>>>>>>> 04735e8652de3d2dec770d04ef7c03ca6303cc9e
    d1_D10_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*OPS_ACCS(D10_B0, 0,2) + 4*OPS_ACCS(D10_B0, 0,1) - (25.0/12.0)*OPS_ACCS(D10_B0, 0,0) -
      (1.0/4.0)*OPS_ACCS(D10_B0, 0,4) + ((4.0/3.0))*OPS_ACCS(D10_B0, 0,3)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*OPS_ACCS(D10_B0, 0,0) -
      (1.0/2.0)*OPS_ACCS(D10_B0, 0,2) - (1.0/4.0)*OPS_ACCS(D10_B0, 0,-1) + ((1.0/12.0))*OPS_ACCS(D10_B0, 0,3) + ((3.0/2.0))*OPS_ACCS(D10_B0, 0,1)
)
: ((idx[1]
      == -1 + block0np1) ? (
   -4*OPS_ACCS(D10_B0, 0,-1) + 3*OPS_ACCS(D10_B0, 0,-2) - (4.0/3.0)*OPS_ACCS(D10_B0, 0,-3) + ((1.0/4.0))*OPS_ACCS(D10_B0, 0,-4) +
      ((25.0/12.0))*OPS_ACCS(D10_B0, 0,0)
)
: ((idx[1] == -2 + block0np1) ? (
   ((1.0/2.0))*OPS_ACCS(D10_B0, 0,-2) - (3.0/2.0)*OPS_ACCS(D10_B0, 0,-1)
      - (1.0/12.0)*OPS_ACCS(D10_B0, 0,-3) + ((1.0/4.0))*OPS_ACCS(D10_B0, 0,1) + ((5.0/6.0))*OPS_ACCS(D10_B0, 0,0)
)
: (
   -(2.0/3.0)*OPS_ACCS(D10_B0, 0,-1) -
      (1.0/12.0)*OPS_ACCS(D10_B0, 0,2) + ((1.0/12.0))*OPS_ACCS(D10_B0, 0,-2) + ((2.0/3.0))*OPS_ACCS(D10_B0, 0,1)
)))));

<<<<<<< HEAD
=======
    d1_D01_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*OPS_ACCS(D01_B0, 0,2) + 4*OPS_ACCS(D01_B0, 0,1) - (25.0/12.0)*OPS_ACCS(D01_B0, 0,0) -
      (1.0/4.0)*OPS_ACCS(D01_B0, 0,4) + ((4.0/3.0))*OPS_ACCS(D01_B0, 0,3)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*OPS_ACCS(D01_B0, 0,0) -
      (1.0/2.0)*OPS_ACCS(D01_B0, 0,2) - (1.0/4.0)*OPS_ACCS(D01_B0, 0,-1) + ((1.0/12.0))*OPS_ACCS(D01_B0, 0,3) + ((3.0/2.0))*OPS_ACCS(D01_B0, 0,1)
)
: ((idx[1]
      == -1 + block0np1) ? (
   -4*OPS_ACCS(D01_B0, 0,-1) + 3*OPS_ACCS(D01_B0, 0,-2) - (4.0/3.0)*OPS_ACCS(D01_B0, 0,-3) + ((1.0/4.0))*OPS_ACCS(D01_B0, 0,-4) +
      ((25.0/12.0))*OPS_ACCS(D01_B0, 0,0)
)
: ((idx[1] == -2 + block0np1) ? (
   ((1.0/2.0))*OPS_ACCS(D01_B0, 0,-2) - (3.0/2.0)*OPS_ACCS(D01_B0, 0,-1)
      - (1.0/12.0)*OPS_ACCS(D01_B0, 0,-3) + ((1.0/4.0))*OPS_ACCS(D01_B0, 0,1) + ((5.0/6.0))*OPS_ACCS(D01_B0, 0,0)
)
: (
   -(2.0/3.0)*OPS_ACCS(D01_B0, 0,-1) -
      (1.0/12.0)*OPS_ACCS(D01_B0, 0,2) + ((1.0/12.0))*OPS_ACCS(D01_B0, 0,-2) + ((2.0/3.0))*OPS_ACCS(D01_B0, 0,1)
)))));

    d1_D00_dx = invDelta0block0*((idx[0] == 0) ? (
   -3*OPS_ACCS(D00_B0, 2,0) + 4*OPS_ACCS(D00_B0, 1,0) - (25.0/12.0)*OPS_ACCS(D00_B0, 0,0) -
      (1.0/4.0)*OPS_ACCS(D00_B0, 4,0) + ((4.0/3.0))*OPS_ACCS(D00_B0, 3,0)
)
: ((idx[0] == 1) ? (
   -(5.0/6.0)*OPS_ACCS(D00_B0, 0,0) -
      (1.0/2.0)*OPS_ACCS(D00_B0, 2,0) - (1.0/4.0)*OPS_ACCS(D00_B0, -1,0) + ((1.0/12.0))*OPS_ACCS(D00_B0, 3,0) + ((3.0/2.0))*OPS_ACCS(D00_B0, 1,0)
)
: ((idx[0]
      == -1 + block0np0) ? (
   -4*OPS_ACCS(D00_B0, -1,0) + 3*OPS_ACCS(D00_B0, -2,0) - (4.0/3.0)*OPS_ACCS(D00_B0, -3,0) + ((1.0/4.0))*OPS_ACCS(D00_B0, -4,0) +
      ((25.0/12.0))*OPS_ACCS(D00_B0, 0,0)
)
: ((idx[0] == -2 + block0np0) ? (
   ((1.0/2.0))*OPS_ACCS(D00_B0, -2,0) - (3.0/2.0)*OPS_ACCS(D00_B0, -1,0)
      - (1.0/12.0)*OPS_ACCS(D00_B0, -3,0) + ((1.0/4.0))*OPS_ACCS(D00_B0, 1,0) + ((5.0/6.0))*OPS_ACCS(D00_B0, 0,0)
)
: (
   -(2.0/3.0)*OPS_ACCS(D00_B0, -1,0) -
      (1.0/12.0)*OPS_ACCS(D00_B0, 2,0) + ((1.0/12.0))*OPS_ACCS(D00_B0, -2,0) + ((2.0/3.0))*OPS_ACCS(D00_B0, 1,0)
)))));

>>>>>>> 04735e8652de3d2dec770d04ef7c03ca6303cc9e
   OPS_ACCS(SD000_B0, 0,0) = d1_D00_dx;

   OPS_ACCS(SD001_B0, 0,0) = d1_D00_dy;

   OPS_ACCS(SD010_B0, 0,0) = d1_D01_dx;

   OPS_ACCS(SD011_B0, 0,0) = d1_D01_dy;

   OPS_ACCS(SD100_B0, 0,0) = d1_D10_dx;

   OPS_ACCS(SD101_B0, 0,0) = d1_D10_dy;

   OPS_ACCS(SD110_B0, 0,0) = d1_D11_dx;

   OPS_ACCS(SD111_B0, 0,0) = d1_D11_dy;

}


__kernel void ops_opensbliblock00Kernel038(
__global const double* restrict arg0,
__global const double* restrict arg1,
__global const double* restrict arg2,
__global const double* restrict arg3,
__global double* restrict arg4,
__global double* restrict arg5,
__global double* restrict arg6,
__global double* restrict arg7,
__global double* restrict arg8,
__global double* restrict arg9,
__global double* restrict arg10,
__global double* restrict arg11,
const int block0np0,
const int block0np1,
const double invDelta0block0,
const double invDelta1block0,
const int base0,
const int base1,
const int base2,
const int base3,
const int base4,
const int base5,
const int base6,
const int base7,
const int base8,
const int base9,
const int base10,
const int base11,
int arg_idx0, int arg_idx1,
const int size0,
const int size1 ){


  int idx_y = get_global_id(1);
  int idx_x = get_global_id(0);

  int arg_idx[2];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  if (idx_x < size0 && idx_y < size1) {
    const ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_opensbliblock00Kernel038], xdim0_opensbliblock00Kernel038};
    const ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_opensbliblock00Kernel038], xdim1_opensbliblock00Kernel038};
    const ptr_double ptr2 = { &arg2[base2 + idx_x * 1*1 + idx_y * 1*1 * xdim2_opensbliblock00Kernel038], xdim2_opensbliblock00Kernel038};
    const ptr_double ptr3 = { &arg3[base3 + idx_x * 1*1 + idx_y * 1*1 * xdim3_opensbliblock00Kernel038], xdim3_opensbliblock00Kernel038};
    ptr_double ptr4 = { &arg4[base4 + idx_x * 1*1 + idx_y * 1*1 * xdim4_opensbliblock00Kernel038], xdim4_opensbliblock00Kernel038};
    ptr_double ptr5 = { &arg5[base5 + idx_x * 1*1 + idx_y * 1*1 * xdim5_opensbliblock00Kernel038], xdim5_opensbliblock00Kernel038};
    ptr_double ptr6 = { &arg6[base6 + idx_x * 1*1 + idx_y * 1*1 * xdim6_opensbliblock00Kernel038], xdim6_opensbliblock00Kernel038};
    ptr_double ptr7 = { &arg7[base7 + idx_x * 1*1 + idx_y * 1*1 * xdim7_opensbliblock00Kernel038], xdim7_opensbliblock00Kernel038};
    ptr_double ptr8 = { &arg8[base8 + idx_x * 1*1 + idx_y * 1*1 * xdim8_opensbliblock00Kernel038], xdim8_opensbliblock00Kernel038};
    ptr_double ptr9 = { &arg9[base9 + idx_x * 1*1 + idx_y * 1*1 * xdim9_opensbliblock00Kernel038], xdim9_opensbliblock00Kernel038};
    ptr_double ptr10 = { &arg10[base10 + idx_x * 1*1 + idx_y * 1*1 * xdim10_opensbliblock00Kernel038], xdim10_opensbliblock00Kernel038};
    ptr_double ptr11 = { &arg11[base11 + idx_x * 1*1 + idx_y * 1*1 * xdim11_opensbliblock00Kernel038], xdim11_opensbliblock00Kernel038};
    opensbliblock00Kernel038(ptr0,
                                  ptr1,
                                  ptr2,
                                  ptr3,
                                  ptr4,
                                  ptr5,
                                  ptr6,
                                  ptr7,
                                  ptr8,
                                  ptr9,
                                  ptr10,
                                  ptr11,
                                  arg_idx,
                                  block0np0,
                                  block0np1,
                                  invDelta0block0,
                                  invDelta1block0);
  }

}
