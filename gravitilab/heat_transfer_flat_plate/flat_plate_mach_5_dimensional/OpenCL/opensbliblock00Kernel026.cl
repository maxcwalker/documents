//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

 void opensbliblock00Kernel026(const ptr_double x1_B0,
  ptr_double rhoE_B0,
  ptr_double rhou0_B0,
  ptr_double rhou1_B0, const double Twall, const double inv2Minf, const double inv_gamma_m1, const double invgama)
{
   double T = 0.0;
   double Twalld = 0.0;
   double rho = 0.0;
   double rhou0 = 0.0;
   double rhou1 = 0.0;
   Twalld = Twall;


    rhou0 = ((OPS_ACCS(x1_B0, 0,0) < 0.000546454645464546) ? (
   0.858698693583218 + 1.39657329019463e+122*pow(OPS_ACCS(x1_B0, 0,0), 34) +
      3726485.05172807*OPS_ACCS(x1_B0, 0,0) + 1.33094339783081e+168*pow(OPS_ACCS(x1_B0, 0,0), 48) + 1.00045987175411e+96*pow(OPS_ACCS(x1_B0, 0,0), 26)
      + 5.91096077573414e+36*pow(OPS_ACCS(x1_B0, 0,0), 8) + 1.53528049555959e+154*pow(OPS_ACCS(x1_B0, 0,0), 44) +
      3.57559334080588e+92*pow(OPS_ACCS(x1_B0, 0,0), 25) + 5.58489958728709e+56*pow(OPS_ACCS(x1_B0, 0,0), 14) +
      1.99573334132696e+148*pow(OPS_ACCS(x1_B0, 0,0), 42) + 1.4727840573024e+76*pow(OPS_ACCS(x1_B0, 0,0), 20) +
      1.0503126569574e+53*pow(OPS_ACCS(x1_B0, 0,0), 13) + 4.57807324979604e+118*pow(OPS_ACCS(x1_B0, 0,0), 33) +
      5.20539623672006e+43*pow(OPS_ACCS(x1_B0, 0,0), 10) +
      9.47393985493029e+28*(OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)) +
      1.31196707425615e+99*pow(OPS_ACCS(x1_B0, 0,0), 27) + 4.16539652620451e+144*pow(OPS_ACCS(x1_B0, 0,0), 41) +
      2.26846547650172e+125*pow(OPS_ACCS(x1_B0, 0,0), 35) + 3.62973597370326e+151*pow(OPS_ACCS(x1_B0, 0,0), 43) +
      4.48987447463518e+57*pow(OPS_ACCS(x1_B0, 0,0), 15) + 101026314677.042*(OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)) +
      2.7352608539862e+69*pow(OPS_ACCS(x1_B0, 0,0), 18) + 1.42025285057736e+128*pow(OPS_ACCS(x1_B0, 0,0), 36) +
      1.28203608136771e+73*pow(OPS_ACCS(x1_B0, 0,0), 19) + 2.77869102983301e+20*(OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)) -
      3.98954764747764e+131*pow(OPS_ACCS(x1_B0, 0,0), 37) - 2.19806323613439e+100*pow(OPS_ACCS(x1_B0, 0,0), 28) -
      1.19191949313435e+109*pow(OPS_ACCS(x1_B0, 0,0), 30) - 4.52103367863723e+105*pow(OPS_ACCS(x1_B0, 0,0), 29) -
      2.39028758605609e+40*pow(OPS_ACCS(x1_B0, 0,0), 9) - 7.91326281645742e+82*pow(OPS_ACCS(x1_B0, 0,0), 22) -
      4.04137812327632e+114*pow(OPS_ACCS(x1_B0, 0,0), 32) - 2.98513506190655e+138*pow(OPS_ACCS(x1_B0, 0,0), 39) -
      1.59961177373359e+135*pow(OPS_ACCS(x1_B0, 0,0), 38) - 1.8835242031209e+63*pow(OPS_ACCS(x1_B0, 0,0), 16) -
      7.19960905137795e+15*(OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)) - 1.65505310471418e+112*pow(OPS_ACCS(x1_B0, 0,0), 31) -
      8.41905128003066e-150*pow(OPS_ACCS(x1_B0, 0,0), 50) - 9.85968895040876e+170*pow(OPS_ACCS(x1_B0, 0,0), 49) -
      1.30331973301378e+86*pow(OPS_ACCS(x1_B0, 0,0), 23) - 3.49489433804139e+88*pow(OPS_ACCS(x1_B0, 0,0), 24) -
      7.07995952709708e+163*pow(OPS_ACCS(x1_B0, 0,0), 47) - 2.89312345112914e+161*pow(OPS_ACCS(x1_B0, 0,0), 46) -
      6.41403307986648e+24*(OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)) - 9.220284483546e+32*pow(OPS_ACCS(x1_B0, 0,0),
      7) - 2.4115325410043e+66*pow(OPS_ACCS(x1_B0, 0,0), 17) - 1.64562776952111e+46*pow(OPS_ACCS(x1_B0, 0,0), 11) -
      2.44081367278191e+141*pow(OPS_ACCS(x1_B0, 0,0), 40) - 1.58723193651149e+50*pow(OPS_ACCS(x1_B0, 0,0), 12) -
      1.37463449781703e+79*pow(OPS_ACCS(x1_B0, 0,0), 21) - 1.04863709278208e+158*pow(OPS_ACCS(x1_B0, 0,0), 45)
)
: (

      6886.80089778235
));

    rhou1 = ((OPS_ACCS(x1_B0, 0,0) < 0.000546454645464546) ? (
   0.0862659950729564 + 9.20504506454416e+166*pow(OPS_ACCS(x1_B0, 0,0), 48) +
      3.95364242681887e+42*pow(OPS_ACCS(x1_B0, 0,0), 10) + 1.19671347876251e+153*pow(OPS_ACCS(x1_B0, 0,0), 44) +
      7.97833436068639e+27*(OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)) +
      2.67469323691896e+143*pow(OPS_ACCS(x1_B0, 0,0), 41) + 4.75838149222483e+35*pow(OPS_ACCS(x1_B0, 0,0), 8) +
      2.56125455344141e+150*pow(OPS_ACCS(x1_B0, 0,0), 43) + 1.37463322564474e+147*pow(OPS_ACCS(x1_B0, 0,0), 42) +
      1.13350549298172e+127*pow(OPS_ACCS(x1_B0, 0,0), 36) + 9.32842000582636e+71*pow(OPS_ACCS(x1_B0, 0,0), 19) +
      1.15581374543589e+75*pow(OPS_ACCS(x1_B0, 0,0), 20) + 2.4563480029792e+19*(OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)) +
      2.40719370842285e+91*pow(OPS_ACCS(x1_B0, 0,0), 25) + 4.23090851304197e+55*pow(OPS_ACCS(x1_B0, 0,0), 14) +
      7.16064160385195e+94*pow(OPS_ACCS(x1_B0, 0,0), 26) + 6.77721814455417e+51*pow(OPS_ACCS(x1_B0, 0,0), 13) +
      9847519552.95012*(OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)) + 3.03458168281558e+117*pow(OPS_ACCS(x1_B0, 0,0), 33) +
      1.13730942691884e+100*pow(OPS_ACCS(x1_B0, 0,0), 28) + 9.88273182924966e+97*pow(OPS_ACCS(x1_B0, 0,0), 27) +
      4.7769382610212e+57*pow(OPS_ACCS(x1_B0, 0,0), 15) + 1.6371842747665e+124*pow(OPS_ACCS(x1_B0, 0,0), 35) +
      1.73616192787955e+68*pow(OPS_ACCS(x1_B0, 0,0), 18) + 9.75864538026825e+120*pow(OPS_ACCS(x1_B0, 0,0), 34) -
      657060279221524.0*(OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)) - 9.55638892367494e+44*pow(OPS_ACCS(x1_B0, 0,0), 11) -
      7.12066381860709e+156*pow(OPS_ACCS(x1_B0, 0,0), 45) - 4.22531579023259e+113*pow(OPS_ACCS(x1_B0, 0,0), 32) -
      1.22096236012231e+49*pow(OPS_ACCS(x1_B0, 0,0), 12) - 1.10405875401201e+134*pow(OPS_ACCS(x1_B0, 0,0), 38) -
      1.36952533666199e+62*pow(OPS_ACCS(x1_B0, 0,0), 16) - 1.87759613947655e+39*pow(OPS_ACCS(x1_B0, 0,0), 9) - 58265.3516008026*OPS_ACCS(x1_B0, 0,0) -
      5.52948346826185e+23*(OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)) -
      3.68971364439748e+87*pow(OPS_ACCS(x1_B0, 0,0), 24) - 7.59181768696008e+31*pow(OPS_ACCS(x1_B0, 0,0), 7) -
      1.22356257834338e+111*pow(OPS_ACCS(x1_B0, 0,0), 31) - 3.05059257241305e+104*pow(OPS_ACCS(x1_B0, 0,0), 29) -
      6.75653065874639e+169*pow(OPS_ACCS(x1_B0, 0,0), 49) - 2.11797883532286e+137*pow(OPS_ACCS(x1_B0, 0,0), 39) -
      2.57102889301786e+130*pow(OPS_ACCS(x1_B0, 0,0), 37) - 9.76610367693938e+84*pow(OPS_ACCS(x1_B0, 0,0), 23) -
      2.01689106738873e+160*pow(OPS_ACCS(x1_B0, 0,0), 46) - 8.45216686499623e+107*pow(OPS_ACCS(x1_B0, 0,0), 30) -
      5.62120848797368e+81*pow(OPS_ACCS(x1_B0, 0,0), 22) - 5.51705872264717e+162*pow(OPS_ACCS(x1_B0, 0,0), 47) -
      8.1754198020578e+77*pow(OPS_ACCS(x1_B0, 0,0), 21) - 1.90031094743102e+65*pow(OPS_ACCS(x1_B0, 0,0), 17) -
      1.83428338862933e+140*pow(OPS_ACCS(x1_B0, 0,0), 40) - 5.88387830608144e-151*pow(OPS_ACCS(x1_B0, 0,0), 50)
)
: (

      348.579084391623
));

    T = ((OPS_ACCS(x1_B0, 0,0) < 0.000546454645464546) ? (
   1541.55953018323 + 3.93700337083935e+54*pow(OPS_ACCS(x1_B0, 0,0), 14) +
      1.83234496018396e+126*pow(OPS_ACCS(x1_B0, 0,0), 36) + 1.80441035923754e+100*pow(OPS_ACCS(x1_B0, 0,0), 28) +
      1.97626736723119e+103*pow(OPS_ACCS(x1_B0, 0,0), 29) + 3.65669621467388e+132*pow(OPS_ACCS(x1_B0, 0,0), 38) +
      8.66765114554566e+96*pow(OPS_ACCS(x1_B0, 0,0), 27) + 1.38463975102275e+93*pow(OPS_ACCS(x1_B0, 0,0), 26) +
      3.93334527754926e+70*pow(OPS_ACCS(x1_B0, 0,0), 19) +
      1.68687867977813e+27*(OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)) +
      1.60032593477545e+74*pow(OPS_ACCS(x1_B0, 0,0), 20) + 3.85636593065571e+158*pow(OPS_ACCS(x1_B0, 0,0), 46) +
      7.73978211259729e+34*pow(OPS_ACCS(x1_B0, 0,0), 8) + 5.95622846269919e+57*pow(OPS_ACCS(x1_B0, 0,0), 15) +
      3.76302153044984e+41*pow(OPS_ACCS(x1_B0, 0,0), 10) + 3.47887643295795e+129*pow(OPS_ACCS(x1_B0, 0,0), 37) +
      6.37399692978607e+18*(OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)) + 4.90323375783774e+122*pow(OPS_ACCS(x1_B0, 0,0), 35) +
      2.66950178027241e+44*pow(OPS_ACCS(x1_B0, 0,0), 11) + 1.57419658864866e+152*pow(OPS_ACCS(x1_B0, 0,0), 44) +
      2.96024742431461e+168*pow(OPS_ACCS(x1_B0, 0,0), 49) + 2.08200226092924e+77*pow(OPS_ACCS(x1_B0, 0,0), 21) +
      4.06439073681065e+155*pow(OPS_ACCS(x1_B0, 0,0), 45) + 9.19239054844244e-153*pow(OPS_ACCS(x1_B0, 0,0), 50) -
      188770091543097.0*(OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)) - 5.39981205630432e+79*pow(OPS_ACCS(x1_B0, 0,0), 22) -
      1.92427433802071e+113*pow(OPS_ACCS(x1_B0, 0,0), 32) - 1.61030593954856e+90*pow(OPS_ACCS(x1_B0, 0,0), 25) -
      1.42287528857958e+31*pow(OPS_ACCS(x1_B0, 0,0), 7) - 8.22860698218673e+50*pow(OPS_ACCS(x1_B0, 0,0), 13) -
      1.54594172184999e+139*pow(OPS_ACCS(x1_B0, 0,0), 40) - 7.88015191184755e+83*pow(OPS_ACCS(x1_B0, 0,0), 23) -
      2.53225908692748e+38*pow(OPS_ACCS(x1_B0, 0,0), 9) - 2.8083385801981e+165*pow(OPS_ACCS(x1_B0, 0,0), 48) -
      7.22658693350727e+161*pow(OPS_ACCS(x1_B0, 0,0), 47) - 1.27354910559729e+135*pow(OPS_ACCS(x1_B0, 0,0), 39) -
      1.48033487097098e+119*pow(OPS_ACCS(x1_B0, 0,0), 34) - 7.69015404030736e+109*pow(OPS_ACCS(x1_B0, 0,0), 31) -
      2.70281018743248e+64*pow(OPS_ACCS(x1_B0, 0,0), 17) - 5.07228683685271e+105*pow(OPS_ACCS(x1_B0, 0,0), 30) - 20172.9878919216*OPS_ACCS(x1_B0, 0,0)
      - 4.78269252620416e+147*pow(OPS_ACCS(x1_B0, 0,0), 43) - 3.77561261452667e+142*pow(OPS_ACCS(x1_B0, 0,0), 41) -
      1.69313809404105e+87*pow(OPS_ACCS(x1_B0, 0,0), 24) -
      1.30232664632772e+23*(OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)) -
      5.65501800427317e+60*pow(OPS_ACCS(x1_B0, 0,0), 16) - 2.79041943511342e+116*pow(OPS_ACCS(x1_B0, 0,0), 33) -
      1.35700866575301e+48*pow(OPS_ACCS(x1_B0, 0,0), 12) - 2.59907326906903e+67*pow(OPS_ACCS(x1_B0, 0,0), 18) -
      8400953442.73587*(OPS_ACCS(x1_B0, 0,0)*OPS_ACCS(x1_B0, 0,0)) - 4.98848537195279e+145*pow(OPS_ACCS(x1_B0, 0,0), 42)
)
: (

      297.000003052167
));
   T = 297.0;

   rho = 1202.74707431774;

   OPS_ACCS(rhou0_B0, 0,0) = rhou0;

   OPS_ACCS(rhou1_B0, 0,0) = rhou1;

   OPS_ACCS(rhoE_B0, 0,0) = (0.5*(rhou0*rhou0) + 0.5*(rhou1*rhou1))/rho + invgama*inv2Minf*inv_gamma_m1*T*rho;

}


__kernel void ops_opensbliblock00Kernel026(
__global const double* restrict arg0,
__global double* restrict arg1,
__global double* restrict arg2,
__global double* restrict arg3,
const double Twall,
const double inv2Minf,
const double inv_gamma_m1,
const double invgama,
const int base0,
const int base1,
const int base2,
const int base3,
const int size0,
const int size1 ){


  int idx_y = get_global_id(1);
  int idx_x = get_global_id(0);

  if (idx_x < size0 && idx_y < size1) {
    const ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_opensbliblock00Kernel026], xdim0_opensbliblock00Kernel026};
    ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_opensbliblock00Kernel026], xdim1_opensbliblock00Kernel026};
    ptr_double ptr2 = { &arg2[base2 + idx_x * 1*1 + idx_y * 1*1 * xdim2_opensbliblock00Kernel026], xdim2_opensbliblock00Kernel026};
    ptr_double ptr3 = { &arg3[base3 + idx_x * 1*1 + idx_y * 1*1 * xdim3_opensbliblock00Kernel026], xdim3_opensbliblock00Kernel026};
    opensbliblock00Kernel026(ptr0,
                                  ptr1,
                                  ptr2,
                                  ptr3,
                                  Twall,
                                  inv2Minf,
                                  inv_gamma_m1,
                                  invgama);
  }

}
