//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

 void opensbliblock00Kernel001(const ptr_double D10_B0,
  const ptr_double D11_B0,
  const ptr_double U1_B0,
  const
ptr_double a_B0,
  const ptr_double detJ_B0,
  const ptr_double p_B0,
  const ptr_double rhoE_B0,
  const ptr_double rho_B0,
  const ptr_double rhou0_B0,
  const ptr_double rhou1_B0,
  const ptr_double u0_B0,
  const ptr_double u1_B0,
  ptr_double wk4_B0,
  ptr_double wk5_B0,
  ptr_double wk6_B0,
  ptr_double wk7_B0, const double TENO_CT, const double eps, const double gama, const double gamma_m1, const double invgamma_m1, const double shock_filter_control)
{
   double AVG_1_1_LEV_00 = 0.0;
   double AVG_1_1_LEV_01 = 0.0;
   double AVG_1_1_LEV_02 = 0.0;
   double AVG_1_1_LEV_03 = 0.0;
   double AVG_1_1_LEV_10 = 0.0;
   double AVG_1_1_LEV_11 = 0.0;
   double AVG_1_1_LEV_12 = 0.0;
   double AVG_1_1_LEV_20 = 0.0;
   double AVG_1_1_LEV_21 = 0.0;
   double AVG_1_1_LEV_22 = 0.0;
   double AVG_1_1_LEV_23 = 0.0;
   double AVG_1_1_LEV_30 = 0.0;
   double AVG_1_1_LEV_31 = 0.0;
   double AVG_1_1_LEV_32 = 0.0;
   double AVG_1_1_LEV_33 = 0.0;
   double AVG_1_D10 = 0.0;
   double AVG_1_D11 = 0.0;
   double AVG_1_a = 0.0;
   double AVG_1_detJ = 0.0;
   double AVG_1_inv_rho = 0.0;
   double AVG_1_rho = 0.0;
   double AVG_1_u0 = 0.0;
   double AVG_1_u1 = 0.0;
   double CF_00 = 0.0;
   double CF_01 = 0.0;
   double CF_02 = 0.0;
   double CF_03 = 0.0;
   double CF_04 = 0.0;
   double CF_05 = 0.0;
   double CF_10 = 0.0;
   double CF_11 = 0.0;
   double CF_12 = 0.0;
   double CF_13 = 0.0;
   double CF_14 = 0.0;
   double CF_15 = 0.0;
   double CF_20 = 0.0;
   double CF_21 = 0.0;
   double CF_22 = 0.0;
   double CF_23 = 0.0;
   double CF_24 = 0.0;
   double CF_25 = 0.0;
   double CF_30 = 0.0;
   double CF_31 = 0.0;
   double CF_32 = 0.0;
   double CF_33 = 0.0;
   double CF_34 = 0.0;
   double CF_35 = 0.0;
   double CS_00 = 0.0;
   double CS_01 = 0.0;
   double CS_02 = 0.0;
   double CS_03 = 0.0;
   double CS_04 = 0.0;
   double CS_05 = 0.0;
   double CS_10 = 0.0;
   double CS_11 = 0.0;
   double CS_12 = 0.0;
   double CS_13 = 0.0;
   double CS_14 = 0.0;
   double CS_15 = 0.0;
   double CS_20 = 0.0;
   double CS_21 = 0.0;
   double CS_22 = 0.0;
   double CS_23 = 0.0;
   double CS_24 = 0.0;
   double CS_25 = 0.0;
   double CS_30 = 0.0;
   double CS_31 = 0.0;
   double CS_32 = 0.0;
   double CS_33 = 0.0;
   double CS_34 = 0.0;
   double CS_35 = 0.0;
   double Recon_0 = 0.0;
   double Recon_1 = 0.0;
   double Recon_2 = 0.0;
   double Recon_3 = 0.0;
   double alpha_0 = 0.0;
   double alpha_1 = 0.0;
   double alpha_2 = 0.0;
   double alpha_3 = 0.0;
   double beta_0 = 0.0;
   double beta_1 = 0.0;
   double beta_2 = 0.0;
   double beta_3 = 0.0;
   double delta_0 = 0.0;
   double delta_1 = 0.0;
   double delta_2 = 0.0;
   double delta_3 = 0.0;
   double inv_AVG_a = 0.0;
   double inv_AVG_met_fact = 0.0;
   double inv_AVG_rho = 0.0;
   double inv_alpha_sum = 0.0;
   double inv_beta_0 = 0.0;
   double inv_beta_1 = 0.0;
   double inv_beta_2 = 0.0;
   double inv_beta_3 = 0.0;
   double inv_omega_sum = 0.0;
   double max_lambda_00 = 0.0;
   double max_lambda_11 = 0.0;
   double max_lambda_22 = 0.0;
   double max_lambda_33 = 0.0;
   AVG_1_rho = sqrt(OPS_ACCS(rho_B0, 0,0)*OPS_ACCS(rho_B0, 0,1));

   AVG_1_inv_rho = 1.0/((sqrt(OPS_ACCS(rho_B0, 0,0)) + sqrt(OPS_ACCS(rho_B0, 0,1))));

   AVG_1_u0 = (sqrt(OPS_ACCS(rho_B0, 0,0))*OPS_ACCS(u0_B0, 0,0) + sqrt(OPS_ACCS(rho_B0, 0,1))*OPS_ACCS(u0_B0, 0,1))*AVG_1_inv_rho;

   AVG_1_u1 = (sqrt(OPS_ACCS(rho_B0, 0,0))*OPS_ACCS(u1_B0, 0,0) + sqrt(OPS_ACCS(rho_B0, 0,1))*OPS_ACCS(u1_B0, 0,1))*AVG_1_inv_rho;

    AVG_1_a = sqrt((-(1.0/2.0)*((AVG_1_u0*AVG_1_u0) + (AVG_1_u1*AVG_1_u1)) + ((OPS_ACCS(p_B0, 0,0) +
      OPS_ACCS(rhoE_B0, 0,0))/sqrt(OPS_ACCS(rho_B0, 0,0)) + (OPS_ACCS(p_B0, 0,1) + OPS_ACCS(rhoE_B0, 0,1))/sqrt(OPS_ACCS(rho_B0, 0,1)))*AVG_1_inv_rho)*gamma_m1);

   AVG_1_D11 = ((1.0/2.0))*(OPS_ACCS(D11_B0, 0,0) + OPS_ACCS(D11_B0, 0,1));

   AVG_1_D10 = ((1.0/2.0))*(OPS_ACCS(D10_B0, 0,0) + OPS_ACCS(D10_B0, 0,1));

   AVG_1_detJ = ((1.0/2.0))*(OPS_ACCS(detJ_B0, 0,0) + OPS_ACCS(detJ_B0, 0,1));

   inv_AVG_a = 1.0/(AVG_1_a);

   inv_AVG_rho = 1.0/(AVG_1_rho);

   inv_AVG_met_fact = pow((AVG_1_D10*AVG_1_D10) + (AVG_1_D11*AVG_1_D11), (-1.0/2.0));

    AVG_1_1_LEV_00 = -(1.0/2.0)*(-2 - (AVG_1_u0*AVG_1_u0)*(inv_AVG_a*inv_AVG_a) -
      (AVG_1_u1*AVG_1_u1)*(inv_AVG_a*inv_AVG_a) + (AVG_1_u0*AVG_1_u0)*(inv_AVG_a*inv_AVG_a)*gama +
      (AVG_1_u1*AVG_1_u1)*(inv_AVG_a*inv_AVG_a)*gama);

   AVG_1_1_LEV_01 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_1_u0;

   AVG_1_1_LEV_02 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_1_u1;

   AVG_1_1_LEV_03 = -(inv_AVG_a*inv_AVG_a)*gamma_m1;

   AVG_1_1_LEV_10 = (AVG_1_D10*AVG_1_u1 - AVG_1_D11*AVG_1_u0)*inv_AVG_met_fact*inv_AVG_rho;

   AVG_1_1_LEV_11 = AVG_1_D11*inv_AVG_met_fact*inv_AVG_rho;

   AVG_1_1_LEV_12 = -AVG_1_D10*inv_AVG_met_fact*inv_AVG_rho;

    AVG_1_1_LEV_20 = -0.353553390593274*((AVG_1_u0*AVG_1_u0) + (AVG_1_u1*AVG_1_u1) - (AVG_1_u0*AVG_1_u0)*gama -
      (AVG_1_u1*AVG_1_u1)*gama + 2*AVG_1_D10*AVG_1_a*AVG_1_u0*inv_AVG_met_fact +
      2*AVG_1_D11*AVG_1_a*AVG_1_u1*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

    AVG_1_1_LEV_21 = 0.707106781186547*(-gama*AVG_1_u0 + AVG_1_D10*AVG_1_a*inv_AVG_met_fact +
      AVG_1_u0)*inv_AVG_a*inv_AVG_rho;

    AVG_1_1_LEV_22 = 0.707106781186547*(-gama*AVG_1_u1 + AVG_1_D11*AVG_1_a*inv_AVG_met_fact +
      AVG_1_u1)*inv_AVG_a*inv_AVG_rho;

   AVG_1_1_LEV_23 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

    AVG_1_1_LEV_30 = 0.353553390593274*(-(AVG_1_u0*AVG_1_u0) - (AVG_1_u1*AVG_1_u1) + (AVG_1_u0*AVG_1_u0)*gama +
      (AVG_1_u1*AVG_1_u1)*gama + 2*AVG_1_D10*AVG_1_a*AVG_1_u0*inv_AVG_met_fact +
      2*AVG_1_D11*AVG_1_a*AVG_1_u1*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

    AVG_1_1_LEV_31 = -0.707106781186547*(-AVG_1_u0 + gama*AVG_1_u0 +
      AVG_1_D10*AVG_1_a*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

    AVG_1_1_LEV_32 = -0.707106781186547*(-AVG_1_u1 + gama*AVG_1_u1 +
      AVG_1_D11*AVG_1_a*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

   AVG_1_1_LEV_33 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

    CF_00 = (OPS_ACCS(p_B0, 0,-2)*OPS_ACCS(U1_B0, 0,-2)*AVG_1_1_LEV_03 + OPS_ACCS(p_B0, 0,-2)*OPS_ACCS(D10_B0, 0,-2)*AVG_1_1_LEV_01 +
      OPS_ACCS(p_B0, 0,-2)*OPS_ACCS(D11_B0, 0,-2)*AVG_1_1_LEV_02 + OPS_ACCS(U1_B0, 0,-2)*OPS_ACCS(rho_B0, 0,-2)*AVG_1_1_LEV_00 +
      OPS_ACCS(U1_B0, 0,-2)*OPS_ACCS(rhoE_B0, 0,-2)*AVG_1_1_LEV_03 + OPS_ACCS(U1_B0, 0,-2)*OPS_ACCS(rhou0_B0, 0,-2)*AVG_1_1_LEV_01 +
      OPS_ACCS(U1_B0, 0,-2)*OPS_ACCS(rhou1_B0, 0,-2)*AVG_1_1_LEV_02)*OPS_ACCS(detJ_B0, 0,-2);

    CF_10 = (OPS_ACCS(p_B0, 0,-2)*OPS_ACCS(D10_B0, 0,-2)*AVG_1_1_LEV_11 + OPS_ACCS(p_B0, 0,-2)*OPS_ACCS(D11_B0, 0,-2)*AVG_1_1_LEV_12 +
      OPS_ACCS(U1_B0, 0,-2)*OPS_ACCS(rho_B0, 0,-2)*AVG_1_1_LEV_10 + OPS_ACCS(U1_B0, 0,-2)*OPS_ACCS(rhou0_B0, 0,-2)*AVG_1_1_LEV_11 +
      OPS_ACCS(U1_B0, 0,-2)*OPS_ACCS(rhou1_B0, 0,-2)*AVG_1_1_LEV_12)*OPS_ACCS(detJ_B0, 0,-2);

    CF_20 = (OPS_ACCS(p_B0, 0,-2)*OPS_ACCS(U1_B0, 0,-2)*AVG_1_1_LEV_23 + OPS_ACCS(p_B0, 0,-2)*OPS_ACCS(D10_B0, 0,-2)*AVG_1_1_LEV_21 +
      OPS_ACCS(p_B0, 0,-2)*OPS_ACCS(D11_B0, 0,-2)*AVG_1_1_LEV_22 + OPS_ACCS(U1_B0, 0,-2)*OPS_ACCS(rho_B0, 0,-2)*AVG_1_1_LEV_20 +
      OPS_ACCS(U1_B0, 0,-2)*OPS_ACCS(rhoE_B0, 0,-2)*AVG_1_1_LEV_23 + OPS_ACCS(U1_B0, 0,-2)*OPS_ACCS(rhou0_B0, 0,-2)*AVG_1_1_LEV_21 +
      OPS_ACCS(U1_B0, 0,-2)*OPS_ACCS(rhou1_B0, 0,-2)*AVG_1_1_LEV_22)*OPS_ACCS(detJ_B0, 0,-2);

    CF_30 = (OPS_ACCS(p_B0, 0,-2)*OPS_ACCS(U1_B0, 0,-2)*AVG_1_1_LEV_33 + OPS_ACCS(p_B0, 0,-2)*OPS_ACCS(D10_B0, 0,-2)*AVG_1_1_LEV_31 +
      OPS_ACCS(p_B0, 0,-2)*OPS_ACCS(D11_B0, 0,-2)*AVG_1_1_LEV_32 + OPS_ACCS(U1_B0, 0,-2)*OPS_ACCS(rho_B0, 0,-2)*AVG_1_1_LEV_30 +
      OPS_ACCS(U1_B0, 0,-2)*OPS_ACCS(rhoE_B0, 0,-2)*AVG_1_1_LEV_33 + OPS_ACCS(U1_B0, 0,-2)*OPS_ACCS(rhou0_B0, 0,-2)*AVG_1_1_LEV_31 +
      OPS_ACCS(U1_B0, 0,-2)*OPS_ACCS(rhou1_B0, 0,-2)*AVG_1_1_LEV_32)*OPS_ACCS(detJ_B0, 0,-2);

    CS_00 = OPS_ACCS(rho_B0, 0,-2)*AVG_1_1_LEV_00 + OPS_ACCS(rhoE_B0, 0,-2)*AVG_1_1_LEV_03 + OPS_ACCS(rhou0_B0, 0,-2)*AVG_1_1_LEV_01 +
      OPS_ACCS(rhou1_B0, 0,-2)*AVG_1_1_LEV_02;

   CS_10 = OPS_ACCS(rho_B0, 0,-2)*AVG_1_1_LEV_10 + OPS_ACCS(rhou0_B0, 0,-2)*AVG_1_1_LEV_11 + OPS_ACCS(rhou1_B0, 0,-2)*AVG_1_1_LEV_12;

    CS_20 = OPS_ACCS(rho_B0, 0,-2)*AVG_1_1_LEV_20 + OPS_ACCS(rhoE_B0, 0,-2)*AVG_1_1_LEV_23 + OPS_ACCS(rhou0_B0, 0,-2)*AVG_1_1_LEV_21 +
      OPS_ACCS(rhou1_B0, 0,-2)*AVG_1_1_LEV_22;

    CS_30 = OPS_ACCS(rho_B0, 0,-2)*AVG_1_1_LEV_30 + OPS_ACCS(rhoE_B0, 0,-2)*AVG_1_1_LEV_33 + OPS_ACCS(rhou0_B0, 0,-2)*AVG_1_1_LEV_31 +
      OPS_ACCS(rhou1_B0, 0,-2)*AVG_1_1_LEV_32;

    CF_01 = (OPS_ACCS(p_B0, 0,-1)*OPS_ACCS(U1_B0, 0,-1)*AVG_1_1_LEV_03 + OPS_ACCS(p_B0, 0,-1)*OPS_ACCS(D10_B0, 0,-1)*AVG_1_1_LEV_01 +
      OPS_ACCS(p_B0, 0,-1)*OPS_ACCS(D11_B0, 0,-1)*AVG_1_1_LEV_02 + OPS_ACCS(U1_B0, 0,-1)*OPS_ACCS(rho_B0, 0,-1)*AVG_1_1_LEV_00 +
      OPS_ACCS(U1_B0, 0,-1)*OPS_ACCS(rhoE_B0, 0,-1)*AVG_1_1_LEV_03 + OPS_ACCS(U1_B0, 0,-1)*OPS_ACCS(rhou0_B0, 0,-1)*AVG_1_1_LEV_01 +
      OPS_ACCS(U1_B0, 0,-1)*OPS_ACCS(rhou1_B0, 0,-1)*AVG_1_1_LEV_02)*OPS_ACCS(detJ_B0, 0,-1);

    CF_11 = (OPS_ACCS(p_B0, 0,-1)*OPS_ACCS(D10_B0, 0,-1)*AVG_1_1_LEV_11 + OPS_ACCS(p_B0, 0,-1)*OPS_ACCS(D11_B0, 0,-1)*AVG_1_1_LEV_12 +
      OPS_ACCS(U1_B0, 0,-1)*OPS_ACCS(rho_B0, 0,-1)*AVG_1_1_LEV_10 + OPS_ACCS(U1_B0, 0,-1)*OPS_ACCS(rhou0_B0, 0,-1)*AVG_1_1_LEV_11 +
      OPS_ACCS(U1_B0, 0,-1)*OPS_ACCS(rhou1_B0, 0,-1)*AVG_1_1_LEV_12)*OPS_ACCS(detJ_B0, 0,-1);

    CF_21 = (OPS_ACCS(p_B0, 0,-1)*OPS_ACCS(U1_B0, 0,-1)*AVG_1_1_LEV_23 + OPS_ACCS(p_B0, 0,-1)*OPS_ACCS(D10_B0, 0,-1)*AVG_1_1_LEV_21 +
      OPS_ACCS(p_B0, 0,-1)*OPS_ACCS(D11_B0, 0,-1)*AVG_1_1_LEV_22 + OPS_ACCS(U1_B0, 0,-1)*OPS_ACCS(rho_B0, 0,-1)*AVG_1_1_LEV_20 +
      OPS_ACCS(U1_B0, 0,-1)*OPS_ACCS(rhoE_B0, 0,-1)*AVG_1_1_LEV_23 + OPS_ACCS(U1_B0, 0,-1)*OPS_ACCS(rhou0_B0, 0,-1)*AVG_1_1_LEV_21 +
      OPS_ACCS(U1_B0, 0,-1)*OPS_ACCS(rhou1_B0, 0,-1)*AVG_1_1_LEV_22)*OPS_ACCS(detJ_B0, 0,-1);

    CF_31 = (OPS_ACCS(p_B0, 0,-1)*OPS_ACCS(U1_B0, 0,-1)*AVG_1_1_LEV_33 + OPS_ACCS(p_B0, 0,-1)*OPS_ACCS(D10_B0, 0,-1)*AVG_1_1_LEV_31 +
      OPS_ACCS(p_B0, 0,-1)*OPS_ACCS(D11_B0, 0,-1)*AVG_1_1_LEV_32 + OPS_ACCS(U1_B0, 0,-1)*OPS_ACCS(rho_B0, 0,-1)*AVG_1_1_LEV_30 +
      OPS_ACCS(U1_B0, 0,-1)*OPS_ACCS(rhoE_B0, 0,-1)*AVG_1_1_LEV_33 + OPS_ACCS(U1_B0, 0,-1)*OPS_ACCS(rhou0_B0, 0,-1)*AVG_1_1_LEV_31 +
      OPS_ACCS(U1_B0, 0,-1)*OPS_ACCS(rhou1_B0, 0,-1)*AVG_1_1_LEV_32)*OPS_ACCS(detJ_B0, 0,-1);

    CS_01 = OPS_ACCS(rho_B0, 0,-1)*AVG_1_1_LEV_00 + OPS_ACCS(rhoE_B0, 0,-1)*AVG_1_1_LEV_03 + OPS_ACCS(rhou0_B0, 0,-1)*AVG_1_1_LEV_01 +
      OPS_ACCS(rhou1_B0, 0,-1)*AVG_1_1_LEV_02;

   CS_11 = OPS_ACCS(rho_B0, 0,-1)*AVG_1_1_LEV_10 + OPS_ACCS(rhou0_B0, 0,-1)*AVG_1_1_LEV_11 + OPS_ACCS(rhou1_B0, 0,-1)*AVG_1_1_LEV_12;

    CS_21 = OPS_ACCS(rho_B0, 0,-1)*AVG_1_1_LEV_20 + OPS_ACCS(rhoE_B0, 0,-1)*AVG_1_1_LEV_23 + OPS_ACCS(rhou0_B0, 0,-1)*AVG_1_1_LEV_21 +
      OPS_ACCS(rhou1_B0, 0,-1)*AVG_1_1_LEV_22;

    CS_31 = OPS_ACCS(rho_B0, 0,-1)*AVG_1_1_LEV_30 + OPS_ACCS(rhoE_B0, 0,-1)*AVG_1_1_LEV_33 + OPS_ACCS(rhou0_B0, 0,-1)*AVG_1_1_LEV_31 +
      OPS_ACCS(rhou1_B0, 0,-1)*AVG_1_1_LEV_32;

    CF_02 = (OPS_ACCS(p_B0, 0,0)*OPS_ACCS(U1_B0, 0,0)*AVG_1_1_LEV_03 + OPS_ACCS(p_B0, 0,0)*OPS_ACCS(D10_B0, 0,0)*AVG_1_1_LEV_01 +
      OPS_ACCS(p_B0, 0,0)*OPS_ACCS(D11_B0, 0,0)*AVG_1_1_LEV_02 + OPS_ACCS(U1_B0, 0,0)*OPS_ACCS(rho_B0, 0,0)*AVG_1_1_LEV_00 +
      OPS_ACCS(U1_B0, 0,0)*OPS_ACCS(rhoE_B0, 0,0)*AVG_1_1_LEV_03 + OPS_ACCS(U1_B0, 0,0)*OPS_ACCS(rhou0_B0, 0,0)*AVG_1_1_LEV_01 +
      OPS_ACCS(U1_B0, 0,0)*OPS_ACCS(rhou1_B0, 0,0)*AVG_1_1_LEV_02)*OPS_ACCS(detJ_B0, 0,0);

    CF_12 = (OPS_ACCS(p_B0, 0,0)*OPS_ACCS(D10_B0, 0,0)*AVG_1_1_LEV_11 + OPS_ACCS(p_B0, 0,0)*OPS_ACCS(D11_B0, 0,0)*AVG_1_1_LEV_12 +
      OPS_ACCS(U1_B0, 0,0)*OPS_ACCS(rho_B0, 0,0)*AVG_1_1_LEV_10 + OPS_ACCS(U1_B0, 0,0)*OPS_ACCS(rhou0_B0, 0,0)*AVG_1_1_LEV_11 +
      OPS_ACCS(U1_B0, 0,0)*OPS_ACCS(rhou1_B0, 0,0)*AVG_1_1_LEV_12)*OPS_ACCS(detJ_B0, 0,0);

    CF_22 = (OPS_ACCS(p_B0, 0,0)*OPS_ACCS(U1_B0, 0,0)*AVG_1_1_LEV_23 + OPS_ACCS(p_B0, 0,0)*OPS_ACCS(D10_B0, 0,0)*AVG_1_1_LEV_21 +
      OPS_ACCS(p_B0, 0,0)*OPS_ACCS(D11_B0, 0,0)*AVG_1_1_LEV_22 + OPS_ACCS(U1_B0, 0,0)*OPS_ACCS(rho_B0, 0,0)*AVG_1_1_LEV_20 +
      OPS_ACCS(U1_B0, 0,0)*OPS_ACCS(rhoE_B0, 0,0)*AVG_1_1_LEV_23 + OPS_ACCS(U1_B0, 0,0)*OPS_ACCS(rhou0_B0, 0,0)*AVG_1_1_LEV_21 +
      OPS_ACCS(U1_B0, 0,0)*OPS_ACCS(rhou1_B0, 0,0)*AVG_1_1_LEV_22)*OPS_ACCS(detJ_B0, 0,0);

    CF_32 = (OPS_ACCS(p_B0, 0,0)*OPS_ACCS(U1_B0, 0,0)*AVG_1_1_LEV_33 + OPS_ACCS(p_B0, 0,0)*OPS_ACCS(D10_B0, 0,0)*AVG_1_1_LEV_31 +
      OPS_ACCS(p_B0, 0,0)*OPS_ACCS(D11_B0, 0,0)*AVG_1_1_LEV_32 + OPS_ACCS(U1_B0, 0,0)*OPS_ACCS(rho_B0, 0,0)*AVG_1_1_LEV_30 +
      OPS_ACCS(U1_B0, 0,0)*OPS_ACCS(rhoE_B0, 0,0)*AVG_1_1_LEV_33 + OPS_ACCS(U1_B0, 0,0)*OPS_ACCS(rhou0_B0, 0,0)*AVG_1_1_LEV_31 +
      OPS_ACCS(U1_B0, 0,0)*OPS_ACCS(rhou1_B0, 0,0)*AVG_1_1_LEV_32)*OPS_ACCS(detJ_B0, 0,0);

    CS_02 = OPS_ACCS(rho_B0, 0,0)*AVG_1_1_LEV_00 + OPS_ACCS(rhoE_B0, 0,0)*AVG_1_1_LEV_03 + OPS_ACCS(rhou0_B0, 0,0)*AVG_1_1_LEV_01 +
      OPS_ACCS(rhou1_B0, 0,0)*AVG_1_1_LEV_02;

   CS_12 = OPS_ACCS(rho_B0, 0,0)*AVG_1_1_LEV_10 + OPS_ACCS(rhou0_B0, 0,0)*AVG_1_1_LEV_11 + OPS_ACCS(rhou1_B0, 0,0)*AVG_1_1_LEV_12;

    CS_22 = OPS_ACCS(rho_B0, 0,0)*AVG_1_1_LEV_20 + OPS_ACCS(rhoE_B0, 0,0)*AVG_1_1_LEV_23 + OPS_ACCS(rhou0_B0, 0,0)*AVG_1_1_LEV_21 +
      OPS_ACCS(rhou1_B0, 0,0)*AVG_1_1_LEV_22;

    CS_32 = OPS_ACCS(rho_B0, 0,0)*AVG_1_1_LEV_30 + OPS_ACCS(rhoE_B0, 0,0)*AVG_1_1_LEV_33 + OPS_ACCS(rhou0_B0, 0,0)*AVG_1_1_LEV_31 +
      OPS_ACCS(rhou1_B0, 0,0)*AVG_1_1_LEV_32;

    CF_03 = (OPS_ACCS(p_B0, 0,1)*OPS_ACCS(U1_B0, 0,1)*AVG_1_1_LEV_03 + OPS_ACCS(p_B0, 0,1)*OPS_ACCS(D10_B0, 0,1)*AVG_1_1_LEV_01 +
      OPS_ACCS(p_B0, 0,1)*OPS_ACCS(D11_B0, 0,1)*AVG_1_1_LEV_02 + OPS_ACCS(U1_B0, 0,1)*OPS_ACCS(rho_B0, 0,1)*AVG_1_1_LEV_00 +
      OPS_ACCS(U1_B0, 0,1)*OPS_ACCS(rhoE_B0, 0,1)*AVG_1_1_LEV_03 + OPS_ACCS(U1_B0, 0,1)*OPS_ACCS(rhou0_B0, 0,1)*AVG_1_1_LEV_01 +
      OPS_ACCS(U1_B0, 0,1)*OPS_ACCS(rhou1_B0, 0,1)*AVG_1_1_LEV_02)*OPS_ACCS(detJ_B0, 0,1);

    CF_13 = (OPS_ACCS(p_B0, 0,1)*OPS_ACCS(D10_B0, 0,1)*AVG_1_1_LEV_11 + OPS_ACCS(p_B0, 0,1)*OPS_ACCS(D11_B0, 0,1)*AVG_1_1_LEV_12 +
      OPS_ACCS(U1_B0, 0,1)*OPS_ACCS(rho_B0, 0,1)*AVG_1_1_LEV_10 + OPS_ACCS(U1_B0, 0,1)*OPS_ACCS(rhou0_B0, 0,1)*AVG_1_1_LEV_11 +
      OPS_ACCS(U1_B0, 0,1)*OPS_ACCS(rhou1_B0, 0,1)*AVG_1_1_LEV_12)*OPS_ACCS(detJ_B0, 0,1);

    CF_23 = (OPS_ACCS(p_B0, 0,1)*OPS_ACCS(U1_B0, 0,1)*AVG_1_1_LEV_23 + OPS_ACCS(p_B0, 0,1)*OPS_ACCS(D10_B0, 0,1)*AVG_1_1_LEV_21 +
      OPS_ACCS(p_B0, 0,1)*OPS_ACCS(D11_B0, 0,1)*AVG_1_1_LEV_22 + OPS_ACCS(U1_B0, 0,1)*OPS_ACCS(rho_B0, 0,1)*AVG_1_1_LEV_20 +
      OPS_ACCS(U1_B0, 0,1)*OPS_ACCS(rhoE_B0, 0,1)*AVG_1_1_LEV_23 + OPS_ACCS(U1_B0, 0,1)*OPS_ACCS(rhou0_B0, 0,1)*AVG_1_1_LEV_21 +
      OPS_ACCS(U1_B0, 0,1)*OPS_ACCS(rhou1_B0, 0,1)*AVG_1_1_LEV_22)*OPS_ACCS(detJ_B0, 0,1);

    CF_33 = (OPS_ACCS(p_B0, 0,1)*OPS_ACCS(U1_B0, 0,1)*AVG_1_1_LEV_33 + OPS_ACCS(p_B0, 0,1)*OPS_ACCS(D10_B0, 0,1)*AVG_1_1_LEV_31 +
      OPS_ACCS(p_B0, 0,1)*OPS_ACCS(D11_B0, 0,1)*AVG_1_1_LEV_32 + OPS_ACCS(U1_B0, 0,1)*OPS_ACCS(rho_B0, 0,1)*AVG_1_1_LEV_30 +
      OPS_ACCS(U1_B0, 0,1)*OPS_ACCS(rhoE_B0, 0,1)*AVG_1_1_LEV_33 + OPS_ACCS(U1_B0, 0,1)*OPS_ACCS(rhou0_B0, 0,1)*AVG_1_1_LEV_31 +
      OPS_ACCS(U1_B0, 0,1)*OPS_ACCS(rhou1_B0, 0,1)*AVG_1_1_LEV_32)*OPS_ACCS(detJ_B0, 0,1);

    CS_03 = OPS_ACCS(rho_B0, 0,1)*AVG_1_1_LEV_00 + OPS_ACCS(rhoE_B0, 0,1)*AVG_1_1_LEV_03 + OPS_ACCS(rhou0_B0, 0,1)*AVG_1_1_LEV_01 +
      OPS_ACCS(rhou1_B0, 0,1)*AVG_1_1_LEV_02;

   CS_13 = OPS_ACCS(rho_B0, 0,1)*AVG_1_1_LEV_10 + OPS_ACCS(rhou0_B0, 0,1)*AVG_1_1_LEV_11 + OPS_ACCS(rhou1_B0, 0,1)*AVG_1_1_LEV_12;

    CS_23 = OPS_ACCS(rho_B0, 0,1)*AVG_1_1_LEV_20 + OPS_ACCS(rhoE_B0, 0,1)*AVG_1_1_LEV_23 + OPS_ACCS(rhou0_B0, 0,1)*AVG_1_1_LEV_21 +
      OPS_ACCS(rhou1_B0, 0,1)*AVG_1_1_LEV_22;

    CS_33 = OPS_ACCS(rho_B0, 0,1)*AVG_1_1_LEV_30 + OPS_ACCS(rhoE_B0, 0,1)*AVG_1_1_LEV_33 + OPS_ACCS(rhou0_B0, 0,1)*AVG_1_1_LEV_31 +
      OPS_ACCS(rhou1_B0, 0,1)*AVG_1_1_LEV_32;

    CF_04 = (OPS_ACCS(p_B0, 0,2)*OPS_ACCS(U1_B0, 0,2)*AVG_1_1_LEV_03 + OPS_ACCS(p_B0, 0,2)*OPS_ACCS(D10_B0, 0,2)*AVG_1_1_LEV_01 +
      OPS_ACCS(p_B0, 0,2)*OPS_ACCS(D11_B0, 0,2)*AVG_1_1_LEV_02 + OPS_ACCS(U1_B0, 0,2)*OPS_ACCS(rho_B0, 0,2)*AVG_1_1_LEV_00 +
      OPS_ACCS(U1_B0, 0,2)*OPS_ACCS(rhoE_B0, 0,2)*AVG_1_1_LEV_03 + OPS_ACCS(U1_B0, 0,2)*OPS_ACCS(rhou0_B0, 0,2)*AVG_1_1_LEV_01 +
      OPS_ACCS(U1_B0, 0,2)*OPS_ACCS(rhou1_B0, 0,2)*AVG_1_1_LEV_02)*OPS_ACCS(detJ_B0, 0,2);

    CF_14 = (OPS_ACCS(p_B0, 0,2)*OPS_ACCS(D10_B0, 0,2)*AVG_1_1_LEV_11 + OPS_ACCS(p_B0, 0,2)*OPS_ACCS(D11_B0, 0,2)*AVG_1_1_LEV_12 +
      OPS_ACCS(U1_B0, 0,2)*OPS_ACCS(rho_B0, 0,2)*AVG_1_1_LEV_10 + OPS_ACCS(U1_B0, 0,2)*OPS_ACCS(rhou0_B0, 0,2)*AVG_1_1_LEV_11 +
      OPS_ACCS(U1_B0, 0,2)*OPS_ACCS(rhou1_B0, 0,2)*AVG_1_1_LEV_12)*OPS_ACCS(detJ_B0, 0,2);

    CF_24 = (OPS_ACCS(p_B0, 0,2)*OPS_ACCS(U1_B0, 0,2)*AVG_1_1_LEV_23 + OPS_ACCS(p_B0, 0,2)*OPS_ACCS(D10_B0, 0,2)*AVG_1_1_LEV_21 +
      OPS_ACCS(p_B0, 0,2)*OPS_ACCS(D11_B0, 0,2)*AVG_1_1_LEV_22 + OPS_ACCS(U1_B0, 0,2)*OPS_ACCS(rho_B0, 0,2)*AVG_1_1_LEV_20 +
      OPS_ACCS(U1_B0, 0,2)*OPS_ACCS(rhoE_B0, 0,2)*AVG_1_1_LEV_23 + OPS_ACCS(U1_B0, 0,2)*OPS_ACCS(rhou0_B0, 0,2)*AVG_1_1_LEV_21 +
      OPS_ACCS(U1_B0, 0,2)*OPS_ACCS(rhou1_B0, 0,2)*AVG_1_1_LEV_22)*OPS_ACCS(detJ_B0, 0,2);

    CF_34 = (OPS_ACCS(p_B0, 0,2)*OPS_ACCS(U1_B0, 0,2)*AVG_1_1_LEV_33 + OPS_ACCS(p_B0, 0,2)*OPS_ACCS(D10_B0, 0,2)*AVG_1_1_LEV_31 +
      OPS_ACCS(p_B0, 0,2)*OPS_ACCS(D11_B0, 0,2)*AVG_1_1_LEV_32 + OPS_ACCS(U1_B0, 0,2)*OPS_ACCS(rho_B0, 0,2)*AVG_1_1_LEV_30 +
      OPS_ACCS(U1_B0, 0,2)*OPS_ACCS(rhoE_B0, 0,2)*AVG_1_1_LEV_33 + OPS_ACCS(U1_B0, 0,2)*OPS_ACCS(rhou0_B0, 0,2)*AVG_1_1_LEV_31 +
      OPS_ACCS(U1_B0, 0,2)*OPS_ACCS(rhou1_B0, 0,2)*AVG_1_1_LEV_32)*OPS_ACCS(detJ_B0, 0,2);

    CS_04 = OPS_ACCS(rho_B0, 0,2)*AVG_1_1_LEV_00 + OPS_ACCS(rhoE_B0, 0,2)*AVG_1_1_LEV_03 + OPS_ACCS(rhou0_B0, 0,2)*AVG_1_1_LEV_01 +
      OPS_ACCS(rhou1_B0, 0,2)*AVG_1_1_LEV_02;

   CS_14 = OPS_ACCS(rho_B0, 0,2)*AVG_1_1_LEV_10 + OPS_ACCS(rhou0_B0, 0,2)*AVG_1_1_LEV_11 + OPS_ACCS(rhou1_B0, 0,2)*AVG_1_1_LEV_12;

    CS_24 = OPS_ACCS(rho_B0, 0,2)*AVG_1_1_LEV_20 + OPS_ACCS(rhoE_B0, 0,2)*AVG_1_1_LEV_23 + OPS_ACCS(rhou0_B0, 0,2)*AVG_1_1_LEV_21 +
      OPS_ACCS(rhou1_B0, 0,2)*AVG_1_1_LEV_22;

    CS_34 = OPS_ACCS(rho_B0, 0,2)*AVG_1_1_LEV_30 + OPS_ACCS(rhoE_B0, 0,2)*AVG_1_1_LEV_33 + OPS_ACCS(rhou0_B0, 0,2)*AVG_1_1_LEV_31 +
      OPS_ACCS(rhou1_B0, 0,2)*AVG_1_1_LEV_32;

    CF_05 = (OPS_ACCS(p_B0, 0,3)*OPS_ACCS(U1_B0, 0,3)*AVG_1_1_LEV_03 + OPS_ACCS(p_B0, 0,3)*OPS_ACCS(D10_B0, 0,3)*AVG_1_1_LEV_01 +
      OPS_ACCS(p_B0, 0,3)*OPS_ACCS(D11_B0, 0,3)*AVG_1_1_LEV_02 + OPS_ACCS(U1_B0, 0,3)*OPS_ACCS(rho_B0, 0,3)*AVG_1_1_LEV_00 +
      OPS_ACCS(U1_B0, 0,3)*OPS_ACCS(rhoE_B0, 0,3)*AVG_1_1_LEV_03 + OPS_ACCS(U1_B0, 0,3)*OPS_ACCS(rhou0_B0, 0,3)*AVG_1_1_LEV_01 +
      OPS_ACCS(U1_B0, 0,3)*OPS_ACCS(rhou1_B0, 0,3)*AVG_1_1_LEV_02)*OPS_ACCS(detJ_B0, 0,3);

    CF_15 = (OPS_ACCS(p_B0, 0,3)*OPS_ACCS(D10_B0, 0,3)*AVG_1_1_LEV_11 + OPS_ACCS(p_B0, 0,3)*OPS_ACCS(D11_B0, 0,3)*AVG_1_1_LEV_12 +
      OPS_ACCS(U1_B0, 0,3)*OPS_ACCS(rho_B0, 0,3)*AVG_1_1_LEV_10 + OPS_ACCS(U1_B0, 0,3)*OPS_ACCS(rhou0_B0, 0,3)*AVG_1_1_LEV_11 +
      OPS_ACCS(U1_B0, 0,3)*OPS_ACCS(rhou1_B0, 0,3)*AVG_1_1_LEV_12)*OPS_ACCS(detJ_B0, 0,3);

    CF_25 = (OPS_ACCS(p_B0, 0,3)*OPS_ACCS(U1_B0, 0,3)*AVG_1_1_LEV_23 + OPS_ACCS(p_B0, 0,3)*OPS_ACCS(D10_B0, 0,3)*AVG_1_1_LEV_21 +
      OPS_ACCS(p_B0, 0,3)*OPS_ACCS(D11_B0, 0,3)*AVG_1_1_LEV_22 + OPS_ACCS(U1_B0, 0,3)*OPS_ACCS(rho_B0, 0,3)*AVG_1_1_LEV_20 +
      OPS_ACCS(U1_B0, 0,3)*OPS_ACCS(rhoE_B0, 0,3)*AVG_1_1_LEV_23 + OPS_ACCS(U1_B0, 0,3)*OPS_ACCS(rhou0_B0, 0,3)*AVG_1_1_LEV_21 +
      OPS_ACCS(U1_B0, 0,3)*OPS_ACCS(rhou1_B0, 0,3)*AVG_1_1_LEV_22)*OPS_ACCS(detJ_B0, 0,3);

    CF_35 = (OPS_ACCS(p_B0, 0,3)*OPS_ACCS(U1_B0, 0,3)*AVG_1_1_LEV_33 + OPS_ACCS(p_B0, 0,3)*OPS_ACCS(D10_B0, 0,3)*AVG_1_1_LEV_31 +
      OPS_ACCS(p_B0, 0,3)*OPS_ACCS(D11_B0, 0,3)*AVG_1_1_LEV_32 + OPS_ACCS(U1_B0, 0,3)*OPS_ACCS(rho_B0, 0,3)*AVG_1_1_LEV_30 +
      OPS_ACCS(U1_B0, 0,3)*OPS_ACCS(rhoE_B0, 0,3)*AVG_1_1_LEV_33 + OPS_ACCS(U1_B0, 0,3)*OPS_ACCS(rhou0_B0, 0,3)*AVG_1_1_LEV_31 +
      OPS_ACCS(U1_B0, 0,3)*OPS_ACCS(rhou1_B0, 0,3)*AVG_1_1_LEV_32)*OPS_ACCS(detJ_B0, 0,3);

    CS_05 = OPS_ACCS(rho_B0, 0,3)*AVG_1_1_LEV_00 + OPS_ACCS(rhoE_B0, 0,3)*AVG_1_1_LEV_03 + OPS_ACCS(rhou0_B0, 0,3)*AVG_1_1_LEV_01 +
      OPS_ACCS(rhou1_B0, 0,3)*AVG_1_1_LEV_02;

   CS_15 = OPS_ACCS(rho_B0, 0,3)*AVG_1_1_LEV_10 + OPS_ACCS(rhou0_B0, 0,3)*AVG_1_1_LEV_11 + OPS_ACCS(rhou1_B0, 0,3)*AVG_1_1_LEV_12;

    CS_25 = OPS_ACCS(rho_B0, 0,3)*AVG_1_1_LEV_20 + OPS_ACCS(rhoE_B0, 0,3)*AVG_1_1_LEV_23 + OPS_ACCS(rhou0_B0, 0,3)*AVG_1_1_LEV_21 +
      OPS_ACCS(rhou1_B0, 0,3)*AVG_1_1_LEV_22;

    CS_35 = OPS_ACCS(rho_B0, 0,3)*AVG_1_1_LEV_30 + OPS_ACCS(rhoE_B0, 0,3)*AVG_1_1_LEV_33 + OPS_ACCS(rhou0_B0, 0,3)*AVG_1_1_LEV_31 +
      OPS_ACCS(rhou1_B0, 0,3)*AVG_1_1_LEV_32;

    max_lambda_00 = shock_filter_control*fmax(fabs(OPS_ACCS(u0_B0, 0,0)*OPS_ACCS(D10_B0, 0,0)*OPS_ACCS(detJ_B0, 0,0) +
      OPS_ACCS(u1_B0, 0,0)*OPS_ACCS(D11_B0, 0,0)*OPS_ACCS(detJ_B0, 0,0)), fabs(OPS_ACCS(u0_B0, 0,1)*OPS_ACCS(D10_B0, 0,1)*OPS_ACCS(detJ_B0, 0,1) +
      OPS_ACCS(u1_B0, 0,1)*OPS_ACCS(D11_B0, 0,1)*OPS_ACCS(detJ_B0, 0,1)));

   max_lambda_11 = max_lambda_00;

    max_lambda_22 = shock_filter_control*fmax(fabs(sqrt((OPS_ACCS(D10_B0, 0,1)*OPS_ACCS(D10_B0, 0,1))*(OPS_ACCS(detJ_B0, 0,1)*OPS_ACCS(detJ_B0, 0,1)) +
      (OPS_ACCS(D11_B0, 0,1)*OPS_ACCS(D11_B0, 0,1))*(OPS_ACCS(detJ_B0, 0,1)*OPS_ACCS(detJ_B0, 0,1)))*OPS_ACCS(a_B0, 0,1) + OPS_ACCS(u0_B0, 0,1)*OPS_ACCS(D10_B0, 0,1)*OPS_ACCS(detJ_B0, 0,1) +
      OPS_ACCS(u1_B0, 0,1)*OPS_ACCS(D11_B0, 0,1)*OPS_ACCS(detJ_B0, 0,1)), fabs(sqrt((OPS_ACCS(D10_B0, 0,0)*OPS_ACCS(D10_B0, 0,0))*(OPS_ACCS(detJ_B0, 0,0)*OPS_ACCS(detJ_B0, 0,0)) +
      (OPS_ACCS(D11_B0, 0,0)*OPS_ACCS(D11_B0, 0,0))*(OPS_ACCS(detJ_B0, 0,0)*OPS_ACCS(detJ_B0, 0,0)))*OPS_ACCS(a_B0, 0,0) + OPS_ACCS(u0_B0, 0,0)*OPS_ACCS(D10_B0, 0,0)*OPS_ACCS(detJ_B0, 0,0) +
      OPS_ACCS(u1_B0, 0,0)*OPS_ACCS(D11_B0, 0,0)*OPS_ACCS(detJ_B0, 0,0)));

    max_lambda_33 = shock_filter_control*fmax(fabs(-sqrt((OPS_ACCS(D10_B0, 0,0)*OPS_ACCS(D10_B0, 0,0))*(OPS_ACCS(detJ_B0, 0,0)*OPS_ACCS(detJ_B0, 0,0)) +
      (OPS_ACCS(D11_B0, 0,0)*OPS_ACCS(D11_B0, 0,0))*(OPS_ACCS(detJ_B0, 0,0)*OPS_ACCS(detJ_B0, 0,0)))*OPS_ACCS(a_B0, 0,0) + OPS_ACCS(u0_B0, 0,0)*OPS_ACCS(D10_B0, 0,0)*OPS_ACCS(detJ_B0, 0,0) +
      OPS_ACCS(u1_B0, 0,0)*OPS_ACCS(D11_B0, 0,0)*OPS_ACCS(detJ_B0, 0,0)), fabs(-sqrt((OPS_ACCS(D10_B0, 0,1)*OPS_ACCS(D10_B0, 0,1))*(OPS_ACCS(detJ_B0, 0,1)*OPS_ACCS(detJ_B0, 0,1)) +
      (OPS_ACCS(D11_B0, 0,1)*OPS_ACCS(D11_B0, 0,1))*(OPS_ACCS(detJ_B0, 0,1)*OPS_ACCS(detJ_B0, 0,1)))*OPS_ACCS(a_B0, 0,1) + OPS_ACCS(u0_B0, 0,1)*OPS_ACCS(D10_B0, 0,1)*OPS_ACCS(detJ_B0, 0,1) +
      OPS_ACCS(u1_B0, 0,1)*OPS_ACCS(D11_B0, 0,1)*OPS_ACCS(detJ_B0, 0,1)));

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(CS_01*max_lambda_00 + CF_01) - (1.0/2.0)*(CS_03*max_lambda_00 +
      CF_03))*(((1.0/2.0))*(CS_01*max_lambda_00 + CF_01) - (1.0/2.0)*(CS_03*max_lambda_00 + CF_03))) +
      ((13.0/12.0))*((((1.0/2.0))*(CS_01*max_lambda_00 + CF_01) + ((1.0/2.0))*(CS_03*max_lambda_00 + CF_03) -
      (CS_02*max_lambda_00 + CF_02))*(((1.0/2.0))*(CS_01*max_lambda_00 + CF_01) + ((1.0/2.0))*(CS_03*max_lambda_00 +
      CF_03) - (CS_02*max_lambda_00 + CF_02)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(CS_04*max_lambda_00 + CF_04) - 2*(CS_03*max_lambda_00 + CF_03) +
      ((3.0/2.0))*(CS_02*max_lambda_00 + CF_02))*(((1.0/2.0))*(CS_04*max_lambda_00 + CF_04) - 2*(CS_03*max_lambda_00 +
      CF_03) + ((3.0/2.0))*(CS_02*max_lambda_00 + CF_02))) + ((13.0/12.0))*((((1.0/2.0))*(CS_02*max_lambda_00 + CF_02) +
      ((1.0/2.0))*(CS_04*max_lambda_00 + CF_04) - (CS_03*max_lambda_00 + CF_03))*(((1.0/2.0))*(CS_02*max_lambda_00 +
      CF_02) + ((1.0/2.0))*(CS_04*max_lambda_00 + CF_04) - (CS_03*max_lambda_00 + CF_03)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(CS_00*max_lambda_00 + CF_00) - 2*(CS_01*max_lambda_00 + CF_01) +
      ((3.0/2.0))*(CS_02*max_lambda_00 + CF_02))*(((1.0/2.0))*(CS_00*max_lambda_00 + CF_00) - 2*(CS_01*max_lambda_00 +
      CF_01) + ((3.0/2.0))*(CS_02*max_lambda_00 + CF_02))) + ((13.0/12.0))*((((1.0/2.0))*(CS_00*max_lambda_00 + CF_00) +
      ((1.0/2.0))*(CS_02*max_lambda_00 + CF_02) - (CS_01*max_lambda_00 + CF_01))*(((1.0/2.0))*(CS_00*max_lambda_00 +
      CF_00) + ((1.0/2.0))*(CS_02*max_lambda_00 + CF_02) - (CS_01*max_lambda_00 + CF_01)));

    beta_3 = -(781.0/480.0)*(CS_04*max_lambda_00 + CF_04) - (781.0/1440.0)*(CS_02*max_lambda_00 + CF_02) +
      ((1.0/36.0))*((9*(CS_03*max_lambda_00 + CF_03) - (11.0/2.0)*(CS_02*max_lambda_00 + CF_02) -
      (9.0/2.0)*(CS_04*max_lambda_00 + CF_04) + CS_05*max_lambda_00 + CF_05)*(9*(CS_03*max_lambda_00 + CF_03) -
      (11.0/2.0)*(CS_02*max_lambda_00 + CF_02) - (9.0/2.0)*(CS_04*max_lambda_00 + CF_04) + CS_05*max_lambda_00 + CF_05))
      + ((13.0/12.0))*((2*(CS_04*max_lambda_00 + CF_04) - (5.0/2.0)*(CS_03*max_lambda_00 + CF_03) -
      (1.0/2.0)*(CS_05*max_lambda_00 + CF_05) + CS_02*max_lambda_00 + CF_02)*(2*(CS_04*max_lambda_00 + CF_04) -
      (5.0/2.0)*(CS_03*max_lambda_00 + CF_03) - (1.0/2.0)*(CS_05*max_lambda_00 + CF_05) + CS_02*max_lambda_00 + CF_02))
      + ((781.0/480.0))*(CS_03*max_lambda_00 + CF_03) + ((781.0/1440.0))*(CS_05*max_lambda_00 + CF_05);

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_0 = ((3.0/10.0))*(-(1.0/12.0)*(CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(CS_02*max_lambda_00 + CF_02) +
      ((5.0/12.0))*(CS_03*max_lambda_00 + CF_03))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(CS_04*max_lambda_00 + CF_04) + ((1.0/8.0))*(CS_02*max_lambda_00 + CF_02) +
      ((1.0/24.0))*(CS_05*max_lambda_00 + CF_05) + ((13.0/24.0))*(CS_03*max_lambda_00 + CF_03))*delta_3*inv_omega_sum +
      ((27.0/500.0))*(-(7.0/12.0)*(CS_01*max_lambda_00 + CF_01) + ((1.0/6.0))*(CS_00*max_lambda_00 + CF_00) +
      ((11.0/12.0))*(CS_02*max_lambda_00 + CF_02))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(CS_01*max_lambda_00 + CF_01) + ((1.0/6.0))*(CS_03*max_lambda_00 + CF_03) +
      ((5.0/12.0))*(CS_02*max_lambda_00 + CF_02))*delta_0*inv_omega_sum + Recon_0;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(-CS_02*max_lambda_00 + CF_02) - (1.0/2.0)*(-CS_04*max_lambda_00 +
      CF_04))*(((1.0/2.0))*(-CS_02*max_lambda_00 + CF_02) - (1.0/2.0)*(-CS_04*max_lambda_00 + CF_04))) +
      ((13.0/12.0))*((((1.0/2.0))*(-CS_02*max_lambda_00 + CF_02) + ((1.0/2.0))*(-CS_04*max_lambda_00 + CF_04) -
      (-CS_03*max_lambda_00 + CF_03))*(((1.0/2.0))*(-CS_02*max_lambda_00 + CF_02) + ((1.0/2.0))*(-CS_04*max_lambda_00 +
      CF_04) - (-CS_03*max_lambda_00 + CF_03)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(-CS_01*max_lambda_00 + CF_01) - 2*(-CS_02*max_lambda_00 + CF_02) +
      ((3.0/2.0))*(-CS_03*max_lambda_00 + CF_03))*(((1.0/2.0))*(-CS_01*max_lambda_00 + CF_01) - 2*(-CS_02*max_lambda_00
      + CF_02) + ((3.0/2.0))*(-CS_03*max_lambda_00 + CF_03))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_01*max_lambda_00 +
      CF_01) + ((1.0/2.0))*(-CS_03*max_lambda_00 + CF_03) - (-CS_02*max_lambda_00 +
      CF_02))*(((1.0/2.0))*(-CS_01*max_lambda_00 + CF_01) + ((1.0/2.0))*(-CS_03*max_lambda_00 + CF_03) -
      (-CS_02*max_lambda_00 + CF_02)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(-CS_05*max_lambda_00 + CF_05) - 2*(-CS_04*max_lambda_00 + CF_04) +
      ((3.0/2.0))*(-CS_03*max_lambda_00 + CF_03))*(((1.0/2.0))*(-CS_05*max_lambda_00 + CF_05) - 2*(-CS_04*max_lambda_00
      + CF_04) + ((3.0/2.0))*(-CS_03*max_lambda_00 + CF_03))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_03*max_lambda_00 +
      CF_03) + ((1.0/2.0))*(-CS_05*max_lambda_00 + CF_05) - (-CS_04*max_lambda_00 +
      CF_04))*(((1.0/2.0))*(-CS_03*max_lambda_00 + CF_03) + ((1.0/2.0))*(-CS_05*max_lambda_00 + CF_05) -
      (-CS_04*max_lambda_00 + CF_04)));

    beta_3 = ((1.0/36.0))*((-(-CS_00*max_lambda_00 + CF_00) - 9*(-CS_02*max_lambda_00 + CF_02) +
      ((9.0/2.0))*(-CS_01*max_lambda_00 + CF_01) + ((11.0/2.0))*(-CS_03*max_lambda_00 + CF_03))*(-(-CS_00*max_lambda_00
      + CF_00) - 9*(-CS_02*max_lambda_00 + CF_02) + ((9.0/2.0))*(-CS_01*max_lambda_00 + CF_01) +
      ((11.0/2.0))*(-CS_03*max_lambda_00 + CF_03))) + ((13.0/12.0))*((2*(-CS_01*max_lambda_00 + CF_01) -
      (5.0/2.0)*(-CS_02*max_lambda_00 + CF_02) - (1.0/2.0)*(-CS_00*max_lambda_00 + CF_00) - CS_03*max_lambda_00 +
      CF_03)*(2*(-CS_01*max_lambda_00 + CF_01) - (5.0/2.0)*(-CS_02*max_lambda_00 + CF_02) -
      (1.0/2.0)*(-CS_00*max_lambda_00 + CF_00) - CS_03*max_lambda_00 + CF_03)) +
      ((781.0/720.0))*((((1.0/2.0))*(-CS_03*max_lambda_00 + CF_03) - (3.0/2.0)*(-CS_02*max_lambda_00 + CF_02) -
      (1.0/2.0)*(-CS_00*max_lambda_00 + CF_00) + ((3.0/2.0))*(-CS_01*max_lambda_00 +
      CF_01))*(((1.0/2.0))*(-CS_03*max_lambda_00 + CF_03) - (3.0/2.0)*(-CS_02*max_lambda_00 + CF_02) -
      (1.0/2.0)*(-CS_00*max_lambda_00 + CF_00) + ((3.0/2.0))*(-CS_01*max_lambda_00 + CF_01)));

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_0 = ((3.0/10.0))*(-(1.0/12.0)*(-CS_01*max_lambda_00 + CF_01) + ((1.0/6.0))*(-CS_03*max_lambda_00 + CF_03) +
      ((5.0/12.0))*(-CS_02*max_lambda_00 + CF_02))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(-CS_01*max_lambda_00 + CF_01) + ((1.0/8.0))*(-CS_03*max_lambda_00 + CF_03) +
      ((1.0/24.0))*(-CS_00*max_lambda_00 + CF_00) + ((13.0/24.0))*(-CS_02*max_lambda_00 + CF_02))*delta_3*inv_omega_sum
      + ((27.0/500.0))*(-(7.0/12.0)*(-CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(-CS_05*max_lambda_00 + CF_05) +
      ((11.0/12.0))*(-CS_03*max_lambda_00 + CF_03))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(-CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(-CS_02*max_lambda_00 + CF_02) +
      ((5.0/12.0))*(-CS_03*max_lambda_00 + CF_03))*delta_0*inv_omega_sum + Recon_0;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(CS_11*max_lambda_11 + CF_11) - (1.0/2.0)*(CS_13*max_lambda_11 +
      CF_13))*(((1.0/2.0))*(CS_11*max_lambda_11 + CF_11) - (1.0/2.0)*(CS_13*max_lambda_11 + CF_13))) +
      ((13.0/12.0))*((((1.0/2.0))*(CS_11*max_lambda_11 + CF_11) + ((1.0/2.0))*(CS_13*max_lambda_11 + CF_13) -
      (CS_12*max_lambda_11 + CF_12))*(((1.0/2.0))*(CS_11*max_lambda_11 + CF_11) + ((1.0/2.0))*(CS_13*max_lambda_11 +
      CF_13) - (CS_12*max_lambda_11 + CF_12)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(CS_14*max_lambda_11 + CF_14) - 2*(CS_13*max_lambda_11 + CF_13) +
      ((3.0/2.0))*(CS_12*max_lambda_11 + CF_12))*(((1.0/2.0))*(CS_14*max_lambda_11 + CF_14) - 2*(CS_13*max_lambda_11 +
      CF_13) + ((3.0/2.0))*(CS_12*max_lambda_11 + CF_12))) + ((13.0/12.0))*((((1.0/2.0))*(CS_12*max_lambda_11 + CF_12) +
      ((1.0/2.0))*(CS_14*max_lambda_11 + CF_14) - (CS_13*max_lambda_11 + CF_13))*(((1.0/2.0))*(CS_12*max_lambda_11 +
      CF_12) + ((1.0/2.0))*(CS_14*max_lambda_11 + CF_14) - (CS_13*max_lambda_11 + CF_13)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(CS_10*max_lambda_11 + CF_10) - 2*(CS_11*max_lambda_11 + CF_11) +
      ((3.0/2.0))*(CS_12*max_lambda_11 + CF_12))*(((1.0/2.0))*(CS_10*max_lambda_11 + CF_10) - 2*(CS_11*max_lambda_11 +
      CF_11) + ((3.0/2.0))*(CS_12*max_lambda_11 + CF_12))) + ((13.0/12.0))*((((1.0/2.0))*(CS_10*max_lambda_11 + CF_10) +
      ((1.0/2.0))*(CS_12*max_lambda_11 + CF_12) - (CS_11*max_lambda_11 + CF_11))*(((1.0/2.0))*(CS_10*max_lambda_11 +
      CF_10) + ((1.0/2.0))*(CS_12*max_lambda_11 + CF_12) - (CS_11*max_lambda_11 + CF_11)));

    beta_3 = -(781.0/480.0)*(CS_14*max_lambda_11 + CF_14) - (781.0/1440.0)*(CS_12*max_lambda_11 + CF_12) +
      ((1.0/36.0))*((9*(CS_13*max_lambda_11 + CF_13) - (11.0/2.0)*(CS_12*max_lambda_11 + CF_12) -
      (9.0/2.0)*(CS_14*max_lambda_11 + CF_14) + CS_15*max_lambda_11 + CF_15)*(9*(CS_13*max_lambda_11 + CF_13) -
      (11.0/2.0)*(CS_12*max_lambda_11 + CF_12) - (9.0/2.0)*(CS_14*max_lambda_11 + CF_14) + CS_15*max_lambda_11 + CF_15))
      + ((13.0/12.0))*((2*(CS_14*max_lambda_11 + CF_14) - (5.0/2.0)*(CS_13*max_lambda_11 + CF_13) -
      (1.0/2.0)*(CS_15*max_lambda_11 + CF_15) + CS_12*max_lambda_11 + CF_12)*(2*(CS_14*max_lambda_11 + CF_14) -
      (5.0/2.0)*(CS_13*max_lambda_11 + CF_13) - (1.0/2.0)*(CS_15*max_lambda_11 + CF_15) + CS_12*max_lambda_11 + CF_12))
      + ((781.0/480.0))*(CS_13*max_lambda_11 + CF_13) + ((781.0/1440.0))*(CS_15*max_lambda_11 + CF_15);

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_1 = ((3.0/10.0))*(-(1.0/12.0)*(CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(CS_12*max_lambda_11 + CF_12) +
      ((5.0/12.0))*(CS_13*max_lambda_11 + CF_13))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(CS_14*max_lambda_11 + CF_14) + ((1.0/8.0))*(CS_12*max_lambda_11 + CF_12) +
      ((1.0/24.0))*(CS_15*max_lambda_11 + CF_15) + ((13.0/24.0))*(CS_13*max_lambda_11 + CF_13))*delta_3*inv_omega_sum +
      ((27.0/500.0))*(-(7.0/12.0)*(CS_11*max_lambda_11 + CF_11) + ((1.0/6.0))*(CS_10*max_lambda_11 + CF_10) +
      ((11.0/12.0))*(CS_12*max_lambda_11 + CF_12))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(CS_11*max_lambda_11 + CF_11) + ((1.0/6.0))*(CS_13*max_lambda_11 + CF_13) +
      ((5.0/12.0))*(CS_12*max_lambda_11 + CF_12))*delta_0*inv_omega_sum + Recon_1;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(-CS_12*max_lambda_11 + CF_12) - (1.0/2.0)*(-CS_14*max_lambda_11 +
      CF_14))*(((1.0/2.0))*(-CS_12*max_lambda_11 + CF_12) - (1.0/2.0)*(-CS_14*max_lambda_11 + CF_14))) +
      ((13.0/12.0))*((((1.0/2.0))*(-CS_12*max_lambda_11 + CF_12) + ((1.0/2.0))*(-CS_14*max_lambda_11 + CF_14) -
      (-CS_13*max_lambda_11 + CF_13))*(((1.0/2.0))*(-CS_12*max_lambda_11 + CF_12) + ((1.0/2.0))*(-CS_14*max_lambda_11 +
      CF_14) - (-CS_13*max_lambda_11 + CF_13)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(-CS_11*max_lambda_11 + CF_11) - 2*(-CS_12*max_lambda_11 + CF_12) +
      ((3.0/2.0))*(-CS_13*max_lambda_11 + CF_13))*(((1.0/2.0))*(-CS_11*max_lambda_11 + CF_11) - 2*(-CS_12*max_lambda_11
      + CF_12) + ((3.0/2.0))*(-CS_13*max_lambda_11 + CF_13))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_11*max_lambda_11 +
      CF_11) + ((1.0/2.0))*(-CS_13*max_lambda_11 + CF_13) - (-CS_12*max_lambda_11 +
      CF_12))*(((1.0/2.0))*(-CS_11*max_lambda_11 + CF_11) + ((1.0/2.0))*(-CS_13*max_lambda_11 + CF_13) -
      (-CS_12*max_lambda_11 + CF_12)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(-CS_15*max_lambda_11 + CF_15) - 2*(-CS_14*max_lambda_11 + CF_14) +
      ((3.0/2.0))*(-CS_13*max_lambda_11 + CF_13))*(((1.0/2.0))*(-CS_15*max_lambda_11 + CF_15) - 2*(-CS_14*max_lambda_11
      + CF_14) + ((3.0/2.0))*(-CS_13*max_lambda_11 + CF_13))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_13*max_lambda_11 +
      CF_13) + ((1.0/2.0))*(-CS_15*max_lambda_11 + CF_15) - (-CS_14*max_lambda_11 +
      CF_14))*(((1.0/2.0))*(-CS_13*max_lambda_11 + CF_13) + ((1.0/2.0))*(-CS_15*max_lambda_11 + CF_15) -
      (-CS_14*max_lambda_11 + CF_14)));

    beta_3 = ((1.0/36.0))*((-(-CS_10*max_lambda_11 + CF_10) - 9*(-CS_12*max_lambda_11 + CF_12) +
      ((9.0/2.0))*(-CS_11*max_lambda_11 + CF_11) + ((11.0/2.0))*(-CS_13*max_lambda_11 + CF_13))*(-(-CS_10*max_lambda_11
      + CF_10) - 9*(-CS_12*max_lambda_11 + CF_12) + ((9.0/2.0))*(-CS_11*max_lambda_11 + CF_11) +
      ((11.0/2.0))*(-CS_13*max_lambda_11 + CF_13))) + ((13.0/12.0))*((2*(-CS_11*max_lambda_11 + CF_11) -
      (5.0/2.0)*(-CS_12*max_lambda_11 + CF_12) - (1.0/2.0)*(-CS_10*max_lambda_11 + CF_10) - CS_13*max_lambda_11 +
      CF_13)*(2*(-CS_11*max_lambda_11 + CF_11) - (5.0/2.0)*(-CS_12*max_lambda_11 + CF_12) -
      (1.0/2.0)*(-CS_10*max_lambda_11 + CF_10) - CS_13*max_lambda_11 + CF_13)) +
      ((781.0/720.0))*((((1.0/2.0))*(-CS_13*max_lambda_11 + CF_13) - (3.0/2.0)*(-CS_12*max_lambda_11 + CF_12) -
      (1.0/2.0)*(-CS_10*max_lambda_11 + CF_10) + ((3.0/2.0))*(-CS_11*max_lambda_11 +
      CF_11))*(((1.0/2.0))*(-CS_13*max_lambda_11 + CF_13) - (3.0/2.0)*(-CS_12*max_lambda_11 + CF_12) -
      (1.0/2.0)*(-CS_10*max_lambda_11 + CF_10) + ((3.0/2.0))*(-CS_11*max_lambda_11 + CF_11)));

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_1 = ((3.0/10.0))*(-(1.0/12.0)*(-CS_11*max_lambda_11 + CF_11) + ((1.0/6.0))*(-CS_13*max_lambda_11 + CF_13) +
      ((5.0/12.0))*(-CS_12*max_lambda_11 + CF_12))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(-CS_11*max_lambda_11 + CF_11) + ((1.0/8.0))*(-CS_13*max_lambda_11 + CF_13) +
      ((1.0/24.0))*(-CS_10*max_lambda_11 + CF_10) + ((13.0/24.0))*(-CS_12*max_lambda_11 + CF_12))*delta_3*inv_omega_sum
      + ((27.0/500.0))*(-(7.0/12.0)*(-CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(-CS_15*max_lambda_11 + CF_15) +
      ((11.0/12.0))*(-CS_13*max_lambda_11 + CF_13))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(-CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(-CS_12*max_lambda_11 + CF_12) +
      ((5.0/12.0))*(-CS_13*max_lambda_11 + CF_13))*delta_0*inv_omega_sum + Recon_1;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(CS_21*max_lambda_22 + CF_21) - (1.0/2.0)*(CS_23*max_lambda_22 +
      CF_23))*(((1.0/2.0))*(CS_21*max_lambda_22 + CF_21) - (1.0/2.0)*(CS_23*max_lambda_22 + CF_23))) +
      ((13.0/12.0))*((((1.0/2.0))*(CS_21*max_lambda_22 + CF_21) + ((1.0/2.0))*(CS_23*max_lambda_22 + CF_23) -
      (CS_22*max_lambda_22 + CF_22))*(((1.0/2.0))*(CS_21*max_lambda_22 + CF_21) + ((1.0/2.0))*(CS_23*max_lambda_22 +
      CF_23) - (CS_22*max_lambda_22 + CF_22)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(CS_24*max_lambda_22 + CF_24) - 2*(CS_23*max_lambda_22 + CF_23) +
      ((3.0/2.0))*(CS_22*max_lambda_22 + CF_22))*(((1.0/2.0))*(CS_24*max_lambda_22 + CF_24) - 2*(CS_23*max_lambda_22 +
      CF_23) + ((3.0/2.0))*(CS_22*max_lambda_22 + CF_22))) + ((13.0/12.0))*((((1.0/2.0))*(CS_22*max_lambda_22 + CF_22) +
      ((1.0/2.0))*(CS_24*max_lambda_22 + CF_24) - (CS_23*max_lambda_22 + CF_23))*(((1.0/2.0))*(CS_22*max_lambda_22 +
      CF_22) + ((1.0/2.0))*(CS_24*max_lambda_22 + CF_24) - (CS_23*max_lambda_22 + CF_23)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(CS_20*max_lambda_22 + CF_20) - 2*(CS_21*max_lambda_22 + CF_21) +
      ((3.0/2.0))*(CS_22*max_lambda_22 + CF_22))*(((1.0/2.0))*(CS_20*max_lambda_22 + CF_20) - 2*(CS_21*max_lambda_22 +
      CF_21) + ((3.0/2.0))*(CS_22*max_lambda_22 + CF_22))) + ((13.0/12.0))*((((1.0/2.0))*(CS_20*max_lambda_22 + CF_20) +
      ((1.0/2.0))*(CS_22*max_lambda_22 + CF_22) - (CS_21*max_lambda_22 + CF_21))*(((1.0/2.0))*(CS_20*max_lambda_22 +
      CF_20) + ((1.0/2.0))*(CS_22*max_lambda_22 + CF_22) - (CS_21*max_lambda_22 + CF_21)));

    beta_3 = -(781.0/480.0)*(CS_24*max_lambda_22 + CF_24) - (781.0/1440.0)*(CS_22*max_lambda_22 + CF_22) +
      ((1.0/36.0))*((9*(CS_23*max_lambda_22 + CF_23) - (11.0/2.0)*(CS_22*max_lambda_22 + CF_22) -
      (9.0/2.0)*(CS_24*max_lambda_22 + CF_24) + CS_25*max_lambda_22 + CF_25)*(9*(CS_23*max_lambda_22 + CF_23) -
      (11.0/2.0)*(CS_22*max_lambda_22 + CF_22) - (9.0/2.0)*(CS_24*max_lambda_22 + CF_24) + CS_25*max_lambda_22 + CF_25))
      + ((13.0/12.0))*((2*(CS_24*max_lambda_22 + CF_24) - (5.0/2.0)*(CS_23*max_lambda_22 + CF_23) -
      (1.0/2.0)*(CS_25*max_lambda_22 + CF_25) + CS_22*max_lambda_22 + CF_22)*(2*(CS_24*max_lambda_22 + CF_24) -
      (5.0/2.0)*(CS_23*max_lambda_22 + CF_23) - (1.0/2.0)*(CS_25*max_lambda_22 + CF_25) + CS_22*max_lambda_22 + CF_22))
      + ((781.0/480.0))*(CS_23*max_lambda_22 + CF_23) + ((781.0/1440.0))*(CS_25*max_lambda_22 + CF_25);

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_2 = ((3.0/10.0))*(-(1.0/12.0)*(CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(CS_22*max_lambda_22 + CF_22) +
      ((5.0/12.0))*(CS_23*max_lambda_22 + CF_23))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(CS_24*max_lambda_22 + CF_24) + ((1.0/8.0))*(CS_22*max_lambda_22 + CF_22) +
      ((1.0/24.0))*(CS_25*max_lambda_22 + CF_25) + ((13.0/24.0))*(CS_23*max_lambda_22 + CF_23))*delta_3*inv_omega_sum +
      ((27.0/500.0))*(-(7.0/12.0)*(CS_21*max_lambda_22 + CF_21) + ((1.0/6.0))*(CS_20*max_lambda_22 + CF_20) +
      ((11.0/12.0))*(CS_22*max_lambda_22 + CF_22))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(CS_21*max_lambda_22 + CF_21) + ((1.0/6.0))*(CS_23*max_lambda_22 + CF_23) +
      ((5.0/12.0))*(CS_22*max_lambda_22 + CF_22))*delta_0*inv_omega_sum + Recon_2;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(-CS_22*max_lambda_22 + CF_22) - (1.0/2.0)*(-CS_24*max_lambda_22 +
      CF_24))*(((1.0/2.0))*(-CS_22*max_lambda_22 + CF_22) - (1.0/2.0)*(-CS_24*max_lambda_22 + CF_24))) +
      ((13.0/12.0))*((((1.0/2.0))*(-CS_22*max_lambda_22 + CF_22) + ((1.0/2.0))*(-CS_24*max_lambda_22 + CF_24) -
      (-CS_23*max_lambda_22 + CF_23))*(((1.0/2.0))*(-CS_22*max_lambda_22 + CF_22) + ((1.0/2.0))*(-CS_24*max_lambda_22 +
      CF_24) - (-CS_23*max_lambda_22 + CF_23)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(-CS_21*max_lambda_22 + CF_21) - 2*(-CS_22*max_lambda_22 + CF_22) +
      ((3.0/2.0))*(-CS_23*max_lambda_22 + CF_23))*(((1.0/2.0))*(-CS_21*max_lambda_22 + CF_21) - 2*(-CS_22*max_lambda_22
      + CF_22) + ((3.0/2.0))*(-CS_23*max_lambda_22 + CF_23))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_21*max_lambda_22 +
      CF_21) + ((1.0/2.0))*(-CS_23*max_lambda_22 + CF_23) - (-CS_22*max_lambda_22 +
      CF_22))*(((1.0/2.0))*(-CS_21*max_lambda_22 + CF_21) + ((1.0/2.0))*(-CS_23*max_lambda_22 + CF_23) -
      (-CS_22*max_lambda_22 + CF_22)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(-CS_25*max_lambda_22 + CF_25) - 2*(-CS_24*max_lambda_22 + CF_24) +
      ((3.0/2.0))*(-CS_23*max_lambda_22 + CF_23))*(((1.0/2.0))*(-CS_25*max_lambda_22 + CF_25) - 2*(-CS_24*max_lambda_22
      + CF_24) + ((3.0/2.0))*(-CS_23*max_lambda_22 + CF_23))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_23*max_lambda_22 +
      CF_23) + ((1.0/2.0))*(-CS_25*max_lambda_22 + CF_25) - (-CS_24*max_lambda_22 +
      CF_24))*(((1.0/2.0))*(-CS_23*max_lambda_22 + CF_23) + ((1.0/2.0))*(-CS_25*max_lambda_22 + CF_25) -
      (-CS_24*max_lambda_22 + CF_24)));

    beta_3 = ((1.0/36.0))*((-(-CS_20*max_lambda_22 + CF_20) - 9*(-CS_22*max_lambda_22 + CF_22) +
      ((9.0/2.0))*(-CS_21*max_lambda_22 + CF_21) + ((11.0/2.0))*(-CS_23*max_lambda_22 + CF_23))*(-(-CS_20*max_lambda_22
      + CF_20) - 9*(-CS_22*max_lambda_22 + CF_22) + ((9.0/2.0))*(-CS_21*max_lambda_22 + CF_21) +
      ((11.0/2.0))*(-CS_23*max_lambda_22 + CF_23))) + ((13.0/12.0))*((2*(-CS_21*max_lambda_22 + CF_21) -
      (5.0/2.0)*(-CS_22*max_lambda_22 + CF_22) - (1.0/2.0)*(-CS_20*max_lambda_22 + CF_20) - CS_23*max_lambda_22 +
      CF_23)*(2*(-CS_21*max_lambda_22 + CF_21) - (5.0/2.0)*(-CS_22*max_lambda_22 + CF_22) -
      (1.0/2.0)*(-CS_20*max_lambda_22 + CF_20) - CS_23*max_lambda_22 + CF_23)) +
      ((781.0/720.0))*((((1.0/2.0))*(-CS_23*max_lambda_22 + CF_23) - (3.0/2.0)*(-CS_22*max_lambda_22 + CF_22) -
      (1.0/2.0)*(-CS_20*max_lambda_22 + CF_20) + ((3.0/2.0))*(-CS_21*max_lambda_22 +
      CF_21))*(((1.0/2.0))*(-CS_23*max_lambda_22 + CF_23) - (3.0/2.0)*(-CS_22*max_lambda_22 + CF_22) -
      (1.0/2.0)*(-CS_20*max_lambda_22 + CF_20) + ((3.0/2.0))*(-CS_21*max_lambda_22 + CF_21)));

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_2 = ((3.0/10.0))*(-(1.0/12.0)*(-CS_21*max_lambda_22 + CF_21) + ((1.0/6.0))*(-CS_23*max_lambda_22 + CF_23) +
      ((5.0/12.0))*(-CS_22*max_lambda_22 + CF_22))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(-CS_21*max_lambda_22 + CF_21) + ((1.0/8.0))*(-CS_23*max_lambda_22 + CF_23) +
      ((1.0/24.0))*(-CS_20*max_lambda_22 + CF_20) + ((13.0/24.0))*(-CS_22*max_lambda_22 + CF_22))*delta_3*inv_omega_sum
      + ((27.0/500.0))*(-(7.0/12.0)*(-CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(-CS_25*max_lambda_22 + CF_25) +
      ((11.0/12.0))*(-CS_23*max_lambda_22 + CF_23))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(-CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(-CS_22*max_lambda_22 + CF_22) +
      ((5.0/12.0))*(-CS_23*max_lambda_22 + CF_23))*delta_0*inv_omega_sum + Recon_2;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(CS_31*max_lambda_33 + CF_31) - (1.0/2.0)*(CS_33*max_lambda_33 +
      CF_33))*(((1.0/2.0))*(CS_31*max_lambda_33 + CF_31) - (1.0/2.0)*(CS_33*max_lambda_33 + CF_33))) +
      ((13.0/12.0))*((((1.0/2.0))*(CS_31*max_lambda_33 + CF_31) + ((1.0/2.0))*(CS_33*max_lambda_33 + CF_33) -
      (CS_32*max_lambda_33 + CF_32))*(((1.0/2.0))*(CS_31*max_lambda_33 + CF_31) + ((1.0/2.0))*(CS_33*max_lambda_33 +
      CF_33) - (CS_32*max_lambda_33 + CF_32)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(CS_34*max_lambda_33 + CF_34) - 2*(CS_33*max_lambda_33 + CF_33) +
      ((3.0/2.0))*(CS_32*max_lambda_33 + CF_32))*(((1.0/2.0))*(CS_34*max_lambda_33 + CF_34) - 2*(CS_33*max_lambda_33 +
      CF_33) + ((3.0/2.0))*(CS_32*max_lambda_33 + CF_32))) + ((13.0/12.0))*((((1.0/2.0))*(CS_32*max_lambda_33 + CF_32) +
      ((1.0/2.0))*(CS_34*max_lambda_33 + CF_34) - (CS_33*max_lambda_33 + CF_33))*(((1.0/2.0))*(CS_32*max_lambda_33 +
      CF_32) + ((1.0/2.0))*(CS_34*max_lambda_33 + CF_34) - (CS_33*max_lambda_33 + CF_33)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(CS_30*max_lambda_33 + CF_30) - 2*(CS_31*max_lambda_33 + CF_31) +
      ((3.0/2.0))*(CS_32*max_lambda_33 + CF_32))*(((1.0/2.0))*(CS_30*max_lambda_33 + CF_30) - 2*(CS_31*max_lambda_33 +
      CF_31) + ((3.0/2.0))*(CS_32*max_lambda_33 + CF_32))) + ((13.0/12.0))*((((1.0/2.0))*(CS_30*max_lambda_33 + CF_30) +
      ((1.0/2.0))*(CS_32*max_lambda_33 + CF_32) - (CS_31*max_lambda_33 + CF_31))*(((1.0/2.0))*(CS_30*max_lambda_33 +
      CF_30) + ((1.0/2.0))*(CS_32*max_lambda_33 + CF_32) - (CS_31*max_lambda_33 + CF_31)));

    beta_3 = -(781.0/480.0)*(CS_34*max_lambda_33 + CF_34) - (781.0/1440.0)*(CS_32*max_lambda_33 + CF_32) +
      ((1.0/36.0))*((9*(CS_33*max_lambda_33 + CF_33) - (11.0/2.0)*(CS_32*max_lambda_33 + CF_32) -
      (9.0/2.0)*(CS_34*max_lambda_33 + CF_34) + CS_35*max_lambda_33 + CF_35)*(9*(CS_33*max_lambda_33 + CF_33) -
      (11.0/2.0)*(CS_32*max_lambda_33 + CF_32) - (9.0/2.0)*(CS_34*max_lambda_33 + CF_34) + CS_35*max_lambda_33 + CF_35))
      + ((13.0/12.0))*((2*(CS_34*max_lambda_33 + CF_34) - (5.0/2.0)*(CS_33*max_lambda_33 + CF_33) -
      (1.0/2.0)*(CS_35*max_lambda_33 + CF_35) + CS_32*max_lambda_33 + CF_32)*(2*(CS_34*max_lambda_33 + CF_34) -
      (5.0/2.0)*(CS_33*max_lambda_33 + CF_33) - (1.0/2.0)*(CS_35*max_lambda_33 + CF_35) + CS_32*max_lambda_33 + CF_32))
      + ((781.0/480.0))*(CS_33*max_lambda_33 + CF_33) + ((781.0/1440.0))*(CS_35*max_lambda_33 + CF_35);

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_3 = ((3.0/10.0))*(-(1.0/12.0)*(CS_34*max_lambda_33 + CF_34) + ((1.0/6.0))*(CS_32*max_lambda_33 + CF_32) +
      ((5.0/12.0))*(CS_33*max_lambda_33 + CF_33))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(CS_34*max_lambda_33 + CF_34) + ((1.0/8.0))*(CS_32*max_lambda_33 + CF_32) +
      ((1.0/24.0))*(CS_35*max_lambda_33 + CF_35) + ((13.0/24.0))*(CS_33*max_lambda_33 + CF_33))*delta_3*inv_omega_sum +
      ((27.0/500.0))*(-(7.0/12.0)*(CS_31*max_lambda_33 + CF_31) + ((1.0/6.0))*(CS_30*max_lambda_33 + CF_30) +
      ((11.0/12.0))*(CS_32*max_lambda_33 + CF_32))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(CS_31*max_lambda_33 + CF_31) + ((1.0/6.0))*(CS_33*max_lambda_33 + CF_33) +
      ((5.0/12.0))*(CS_32*max_lambda_33 + CF_32))*delta_0*inv_omega_sum + Recon_3;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(-CS_32*max_lambda_33 + CF_32) - (1.0/2.0)*(-CS_34*max_lambda_33 +
      CF_34))*(((1.0/2.0))*(-CS_32*max_lambda_33 + CF_32) - (1.0/2.0)*(-CS_34*max_lambda_33 + CF_34))) +
      ((13.0/12.0))*((((1.0/2.0))*(-CS_32*max_lambda_33 + CF_32) + ((1.0/2.0))*(-CS_34*max_lambda_33 + CF_34) -
      (-CS_33*max_lambda_33 + CF_33))*(((1.0/2.0))*(-CS_32*max_lambda_33 + CF_32) + ((1.0/2.0))*(-CS_34*max_lambda_33 +
      CF_34) - (-CS_33*max_lambda_33 + CF_33)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(-CS_31*max_lambda_33 + CF_31) - 2*(-CS_32*max_lambda_33 + CF_32) +
      ((3.0/2.0))*(-CS_33*max_lambda_33 + CF_33))*(((1.0/2.0))*(-CS_31*max_lambda_33 + CF_31) - 2*(-CS_32*max_lambda_33
      + CF_32) + ((3.0/2.0))*(-CS_33*max_lambda_33 + CF_33))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_31*max_lambda_33 +
      CF_31) + ((1.0/2.0))*(-CS_33*max_lambda_33 + CF_33) - (-CS_32*max_lambda_33 +
      CF_32))*(((1.0/2.0))*(-CS_31*max_lambda_33 + CF_31) + ((1.0/2.0))*(-CS_33*max_lambda_33 + CF_33) -
      (-CS_32*max_lambda_33 + CF_32)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(-CS_35*max_lambda_33 + CF_35) - 2*(-CS_34*max_lambda_33 + CF_34) +
      ((3.0/2.0))*(-CS_33*max_lambda_33 + CF_33))*(((1.0/2.0))*(-CS_35*max_lambda_33 + CF_35) - 2*(-CS_34*max_lambda_33
      + CF_34) + ((3.0/2.0))*(-CS_33*max_lambda_33 + CF_33))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_33*max_lambda_33 +
      CF_33) + ((1.0/2.0))*(-CS_35*max_lambda_33 + CF_35) - (-CS_34*max_lambda_33 +
      CF_34))*(((1.0/2.0))*(-CS_33*max_lambda_33 + CF_33) + ((1.0/2.0))*(-CS_35*max_lambda_33 + CF_35) -
      (-CS_34*max_lambda_33 + CF_34)));

    beta_3 = ((1.0/36.0))*((-(-CS_30*max_lambda_33 + CF_30) - 9*(-CS_32*max_lambda_33 + CF_32) +
      ((9.0/2.0))*(-CS_31*max_lambda_33 + CF_31) + ((11.0/2.0))*(-CS_33*max_lambda_33 + CF_33))*(-(-CS_30*max_lambda_33
      + CF_30) - 9*(-CS_32*max_lambda_33 + CF_32) + ((9.0/2.0))*(-CS_31*max_lambda_33 + CF_31) +
      ((11.0/2.0))*(-CS_33*max_lambda_33 + CF_33))) + ((13.0/12.0))*((2*(-CS_31*max_lambda_33 + CF_31) -
      (5.0/2.0)*(-CS_32*max_lambda_33 + CF_32) - (1.0/2.0)*(-CS_30*max_lambda_33 + CF_30) - CS_33*max_lambda_33 +
      CF_33)*(2*(-CS_31*max_lambda_33 + CF_31) - (5.0/2.0)*(-CS_32*max_lambda_33 + CF_32) -
      (1.0/2.0)*(-CS_30*max_lambda_33 + CF_30) - CS_33*max_lambda_33 + CF_33)) +
      ((781.0/720.0))*((((1.0/2.0))*(-CS_33*max_lambda_33 + CF_33) - (3.0/2.0)*(-CS_32*max_lambda_33 + CF_32) -
      (1.0/2.0)*(-CS_30*max_lambda_33 + CF_30) + ((3.0/2.0))*(-CS_31*max_lambda_33 +
      CF_31))*(((1.0/2.0))*(-CS_33*max_lambda_33 + CF_33) - (3.0/2.0)*(-CS_32*max_lambda_33 + CF_32) -
      (1.0/2.0)*(-CS_30*max_lambda_33 + CF_30) + ((3.0/2.0))*(-CS_31*max_lambda_33 + CF_31)));

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_3 = ((3.0/10.0))*(-(1.0/12.0)*(-CS_31*max_lambda_33 + CF_31) + ((1.0/6.0))*(-CS_33*max_lambda_33 + CF_33) +
      ((5.0/12.0))*(-CS_32*max_lambda_33 + CF_32))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(-CS_31*max_lambda_33 + CF_31) + ((1.0/8.0))*(-CS_33*max_lambda_33 + CF_33) +
      ((1.0/24.0))*(-CS_30*max_lambda_33 + CF_30) + ((13.0/24.0))*(-CS_32*max_lambda_33 + CF_32))*delta_3*inv_omega_sum
      + ((27.0/500.0))*(-(7.0/12.0)*(-CS_34*max_lambda_33 + CF_34) + ((1.0/6.0))*(-CS_35*max_lambda_33 + CF_35) +
      ((11.0/12.0))*(-CS_33*max_lambda_33 + CF_33))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(-CS_34*max_lambda_33 + CF_34) + ((1.0/6.0))*(-CS_32*max_lambda_33 + CF_32) +
      ((5.0/12.0))*(-CS_33*max_lambda_33 + CF_33))*delta_0*inv_omega_sum + Recon_3;

    OPS_ACCS(wk4_B0, 0,0) = 0.707106781186547*AVG_1_rho*Recon_2*inv_AVG_a + 0.707106781186547*AVG_1_rho*Recon_3*inv_AVG_a +
      Recon_0;

    OPS_ACCS(wk5_B0, 0,0) = AVG_1_u0*Recon_0 + AVG_1_D11*AVG_1_rho*Recon_1*inv_AVG_met_fact +
      0.707106781186547*(AVG_1_D10*AVG_1_a*inv_AVG_met_fact + AVG_1_u0)*AVG_1_rho*Recon_2*inv_AVG_a +
      0.707106781186547*(-AVG_1_D10*AVG_1_a*inv_AVG_met_fact + AVG_1_u0)*AVG_1_rho*Recon_3*inv_AVG_a;

    OPS_ACCS(wk6_B0, 0,0) = AVG_1_u1*Recon_0 - AVG_1_D10*AVG_1_rho*Recon_1*inv_AVG_met_fact +
      0.707106781186547*(AVG_1_D11*AVG_1_a*inv_AVG_met_fact + AVG_1_u1)*AVG_1_rho*Recon_2*inv_AVG_a +
      0.707106781186547*(-AVG_1_D11*AVG_1_a*inv_AVG_met_fact + AVG_1_u1)*AVG_1_rho*Recon_3*inv_AVG_a;

    OPS_ACCS(wk7_B0, 0,0) = (((1.0/2.0))*(AVG_1_u0*AVG_1_u0) + ((1.0/2.0))*(AVG_1_u1*AVG_1_u1))*Recon_0 +
      (AVG_1_D11*AVG_1_u0*inv_AVG_met_fact - AVG_1_D10*AVG_1_u1*inv_AVG_met_fact)*AVG_1_rho*Recon_1 +
      0.707106781186547*(((AVG_1_a*AVG_1_a) + ((1.0/2.0))*((AVG_1_u0*AVG_1_u0) +
      (AVG_1_u1*AVG_1_u1))*gamma_m1)*invgamma_m1 + (AVG_1_D10*AVG_1_u0*inv_AVG_met_fact +
      AVG_1_D11*AVG_1_u1*inv_AVG_met_fact)*AVG_1_a)*AVG_1_rho*Recon_2*inv_AVG_a + 0.707106781186547*(((AVG_1_a*AVG_1_a)
      + ((1.0/2.0))*((AVG_1_u0*AVG_1_u0) + (AVG_1_u1*AVG_1_u1))*gamma_m1)*invgamma_m1 -
      (AVG_1_D10*AVG_1_u0*inv_AVG_met_fact + AVG_1_D11*AVG_1_u1*inv_AVG_met_fact)*AVG_1_a)*AVG_1_rho*Recon_3*inv_AVG_a;

}


__kernel void ops_opensbliblock00Kernel001(
__global const double* restrict arg0,
__global const double* restrict arg1,
__global const double* restrict arg2,
__global const double* restrict arg3,
__global const double* restrict arg4,
__global const double* restrict arg5,
__global const double* restrict arg6,
__global const double* restrict arg7,
__global const double* restrict arg8,
__global const double* restrict arg9,
__global const double* restrict arg10,
__global const double* restrict arg11,
__global double* restrict arg12,
__global double* restrict arg13,
__global double* restrict arg14,
__global double* restrict arg15,
const double TENO_CT,
const double eps,
const double gama,
const double gamma_m1,
const double invgamma_m1,
const double shock_filter_control,
const int base0,
const int base1,
const int base2,
const int base3,
const int base4,
const int base5,
const int base6,
const int base7,
const int base8,
const int base9,
const int base10,
const int base11,
const int base12,
const int base13,
const int base14,
const int base15,
const int size0,
const int size1 ){


  int idx_y = get_global_id(1);
  int idx_x = get_global_id(0);

  if (idx_x < size0 && idx_y < size1) {
    const ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_opensbliblock00Kernel001], xdim0_opensbliblock00Kernel001};
    const ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_opensbliblock00Kernel001], xdim1_opensbliblock00Kernel001};
    const ptr_double ptr2 = { &arg2[base2 + idx_x * 1*1 + idx_y * 1*1 * xdim2_opensbliblock00Kernel001], xdim2_opensbliblock00Kernel001};
    const ptr_double ptr3 = { &arg3[base3 + idx_x * 1*1 + idx_y * 1*1 * xdim3_opensbliblock00Kernel001], xdim3_opensbliblock00Kernel001};
    const ptr_double ptr4 = { &arg4[base4 + idx_x * 1*1 + idx_y * 1*1 * xdim4_opensbliblock00Kernel001], xdim4_opensbliblock00Kernel001};
    const ptr_double ptr5 = { &arg5[base5 + idx_x * 1*1 + idx_y * 1*1 * xdim5_opensbliblock00Kernel001], xdim5_opensbliblock00Kernel001};
    const ptr_double ptr6 = { &arg6[base6 + idx_x * 1*1 + idx_y * 1*1 * xdim6_opensbliblock00Kernel001], xdim6_opensbliblock00Kernel001};
    const ptr_double ptr7 = { &arg7[base7 + idx_x * 1*1 + idx_y * 1*1 * xdim7_opensbliblock00Kernel001], xdim7_opensbliblock00Kernel001};
    const ptr_double ptr8 = { &arg8[base8 + idx_x * 1*1 + idx_y * 1*1 * xdim8_opensbliblock00Kernel001], xdim8_opensbliblock00Kernel001};
    const ptr_double ptr9 = { &arg9[base9 + idx_x * 1*1 + idx_y * 1*1 * xdim9_opensbliblock00Kernel001], xdim9_opensbliblock00Kernel001};
    const ptr_double ptr10 = { &arg10[base10 + idx_x * 1*1 + idx_y * 1*1 * xdim10_opensbliblock00Kernel001], xdim10_opensbliblock00Kernel001};
    const ptr_double ptr11 = { &arg11[base11 + idx_x * 1*1 + idx_y * 1*1 * xdim11_opensbliblock00Kernel001], xdim11_opensbliblock00Kernel001};
    ptr_double ptr12 = { &arg12[base12 + idx_x * 1*1 + idx_y * 1*1 * xdim12_opensbliblock00Kernel001], xdim12_opensbliblock00Kernel001};
    ptr_double ptr13 = { &arg13[base13 + idx_x * 1*1 + idx_y * 1*1 * xdim13_opensbliblock00Kernel001], xdim13_opensbliblock00Kernel001};
    ptr_double ptr14 = { &arg14[base14 + idx_x * 1*1 + idx_y * 1*1 * xdim14_opensbliblock00Kernel001], xdim14_opensbliblock00Kernel001};
    ptr_double ptr15 = { &arg15[base15 + idx_x * 1*1 + idx_y * 1*1 * xdim15_opensbliblock00Kernel001], xdim15_opensbliblock00Kernel001};
    opensbliblock00Kernel001(ptr0,
                                  ptr1,
                                  ptr2,
                                  ptr3,
                                  ptr4,
                                  ptr5,
                                  ptr6,
                                  ptr7,
                                  ptr8,
                                  ptr9,
                                  ptr10,
                                  ptr11,
                                  ptr12,
                                  ptr13,
                                  ptr14,
                                  ptr15,
                                  TENO_CT,
                                  eps,
                                  gama,
                                  gamma_m1,
                                  invgamma_m1,
                                  shock_filter_control);
  }

}
