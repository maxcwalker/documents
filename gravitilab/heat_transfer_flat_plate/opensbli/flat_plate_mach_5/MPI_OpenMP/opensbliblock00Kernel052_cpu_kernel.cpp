//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel052(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
#else
void ops_par_loop_opensbliblock00Kernel052_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[7] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,7,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel052");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel052");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 7,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel052 = args[0].dat->size[0];
  int xdim1_opensbliblock00Kernel052 = args[1].dat->size[0];
  int xdim2_opensbliblock00Kernel052 = args[2].dat->size[0];
  int xdim3_opensbliblock00Kernel052 = args[3].dat->size[0];
  int xdim4_opensbliblock00Kernel052 = args[4].dat->size[0];
  int xdim5_opensbliblock00Kernel052 = args[5].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ rhoE_B0_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ rho_B0_p = (double *)(args[1].data + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ rhou0_B0_p = (double *)(args[2].data + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ rhou1_B0_p = (double *)(args[3].data + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ x0_B0_p = (double *)(args[4].data + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ x1_B0_p = (double *)(args[5].data + base5);




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 7);
  ops_halo_exchanges(args,7,range);
  ops_H_D_exchanges_host(args, 7);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for
  for ( int n_y=start[1]; n_y<end[1]; n_y++ ){
    #ifdef __INTEL_COMPILER
    #pragma loop_count(10000)
    #pragma omp simd
    #elif defined(__clang__)
    #pragma clang loop vectorize(assume_safety)
    #elif defined(__GNUC__)
    #pragma GCC ivdep
    #else
    #pragma simd
    #endif
    for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
      int idx[] = {arg_idx[0]+n_x, arg_idx[1]+n_y};
      ACC<double> rhoE_B0(xdim0_opensbliblock00Kernel052, rhoE_B0_p + n_x*1 + n_y * xdim0_opensbliblock00Kernel052*1);
      ACC<double> rho_B0(xdim1_opensbliblock00Kernel052, rho_B0_p + n_x*1 + n_y * xdim1_opensbliblock00Kernel052*1);
      ACC<double> rhou0_B0(xdim2_opensbliblock00Kernel052, rhou0_B0_p + n_x*1 + n_y * xdim2_opensbliblock00Kernel052*1);
      ACC<double> rhou1_B0(xdim3_opensbliblock00Kernel052, rhou1_B0_p + n_x*1 + n_y * xdim3_opensbliblock00Kernel052*1);
      ACC<double> x0_B0(xdim4_opensbliblock00Kernel052, x0_B0_p + n_x*1 + n_y * xdim4_opensbliblock00Kernel052*1);
      ACC<double> x1_B0(xdim5_opensbliblock00Kernel052, x1_B0_p + n_x*1 + n_y * xdim5_opensbliblock00Kernel052*1);
      
   double T = 0.0;
   double rho = 0.0;
   double rhou0 = 0.0;
   double rhou1 = 0.0;
   x0_B0(0,0) = Delta0block0*idx[0];

   x1_B0(0,0) = Lx1*sinh(by*invLx1*Delta1block0*idx[1])/sinh(by);

    rhou0 = ((x1_B0(0,0) < 2.62826282628263) ? (
   2.16851610225004e-5 +
      9.11809435534408*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) + 56.4895104173958*pow(x1_B0(0,0), 10) +
      110.227231876294*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      1.21325194924508e-7*pow(x1_B0(0,0), 29) + 5.04291653719116e-6*pow(x1_B0(0,0), 26) +
      5.40591937574342*pow(x1_B0(0,0), 11) + 3.76547000561437e-13*pow(x1_B0(0,0), 43) +
      1.96096198633716e-13*pow(x1_B0(0,0), 44) + 3.41499904212637e-6*pow(x1_B0(0,0), 27) +
      1.16135540652397e-10*pow(x1_B0(0,0), 37) + 4.84981704284786e-10*pow(x1_B0(0,0), 36) +
      9.70477324699835e-10*pow(x1_B0(0,0), 34) + 0.275128951416199*pow(x1_B0(0,0), 15) +
      1.96025079312001e-15*pow(x1_B0(0,0), 49) + 1.12874964872538*pow(x1_B0(0,0), 14) +
      1.10537249838372e-6*pow(x1_B0(0,0), 28) + 1.10798398729058e-9*pow(x1_B0(0,0), 35) + 0.311045423757617*x1_B0(0,0) +
      3.91221144255296e-14*pow(x1_B0(0,0), 45) + 0.000676342199911205*pow(x1_B0(0,0), 21) +
      0.00561698142862182*pow(x1_B0(0,0), 19) + 0.0930751458342059*(x1_B0(0,0)*x1_B0(0,0)) +
      0.00341201348414325*pow(x1_B0(0,0), 20) + 234.022386227587*pow(x1_B0(0,0), 8) - 166.860080743356*pow(x1_B0(0,0),
      9) - 0.0640135108515311*pow(x1_B0(0,0), 17) - 8.56528800115912*pow(x1_B0(0,0), 12) -
      6.3934280650699e-8*pow(x1_B0(0,0), 31) - 0.0086103526825815*pow(x1_B0(0,0), 18) -
      0.620836597886358*pow(x1_B0(0,0), 13) - 1.83992136298618e-11*pow(x1_B0(0,0), 39) -
      9.67028922121491e-12*pow(x1_B0(0,0), 40) - 0.000165207978212736*pow(x1_B0(0,0), 22) -
      8.6445997961425e-8*pow(x1_B0(0,0), 30) - 0.0913409712288493*pow(x1_B0(0,0), 16) -
      2.13157234310705e-14*pow(x1_B0(0,0), 42) - 5.86909142799827e-5*pow(x1_B0(0,0), 24) -
      4.05780551991042e-9*pow(x1_B0(0,0), 33) - 2.4911940188728e-16*pow(x1_B0(0,0), 50) -
      1.13862526127623*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      39.730546813162*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) - 0.000169141609469551*pow(x1_B0(0,0),
      23) - 2.64315263808064e-12*pow(x1_B0(0,0), 41) - 5.89620132491455e-6*pow(x1_B0(0,0), 25) -
      199.551887291163*pow(x1_B0(0,0), 7) - 2.32797185893808e-8*pow(x1_B0(0,0), 32) -
      1.15042132884946e-14*pow(x1_B0(0,0), 47) - 1.25733855709748e-14*pow(x1_B0(0,0), 46) -
      1.61862541735334e-15*pow(x1_B0(0,0), 48) - 3.47656577897368e-12*pow(x1_B0(0,0), 38)
)
: (

      0.999999056811493
));

    rhou1 = ((x1_B0(0,0) < 2.62826282628263) ? (
   4.14458499737613e-7 + 4.74514735940344e-9*pow(x1_B0(0,0), 29) +
      2.62212413805797e-10*pow(x1_B0(0,0), 30) + 2.31457750496383e-18*pow(x1_B0(0,0), 50) +
      6.57270389120339e-16*pow(x1_B0(0,0), 45) +
      1.87440964744378*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      4.79671486691577e-7*pow(x1_B0(0,0), 22) + 0.130451573219726*pow(x1_B0(0,0), 11) +
      5.76771240056189e-13*pow(x1_B0(0,0), 38) + 4.80790001589277e-12*pow(x1_B0(0,0), 36) +
      0.00380834406118181*(x1_B0(0,0)*x1_B0(0,0)) + 9.03686533373643e-16*pow(x1_B0(0,0), 44) +
      2.97533677376856e-14*pow(x1_B0(0,0), 39) + 4.04255546219829e-12*pow(x1_B0(0,0), 35) +
      3.42818254035653e-8*pow(x1_B0(0,0), 27) + 1.7315212659473e-8*pow(x1_B0(0,0), 28) +
      2.17415382595059e-12*pow(x1_B0(0,0), 37) + 3.84887341978016e-5*pow(x1_B0(0,0), 19) +
      0.164222901533573*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) + 0.0051687220838158*pow(x1_B0(0,0), 15) +
      0.742992699959086*pow(x1_B0(0,0), 10) + 4.56527776901448e-5*pow(x1_B0(0,0), 20) +
      1.90986644800067e-16*pow(x1_B0(0,0), 46) + 0.0141573960642376*pow(x1_B0(0,0), 14) +
      3.70911497837876*pow(x1_B0(0,0), 8) + 1.46015250900625e-5*pow(x1_B0(0,0), 21) +
      7.20363275769593e-9*pow(x1_B0(0,0), 26) - 6.15805830455607e-14*pow(x1_B0(0,0), 40) -
      4.95217905248279e-10*pow(x1_B0(0,0), 31) - 1.74346130722567e-6*pow(x1_B0(0,0), 23) -
      0.0229196318974859*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) - 2.49636290476786*pow(x1_B0(0,0), 9) -
      0.117566254884284*pow(x1_B0(0,0), 12) - 4.5668240116256e-18*pow(x1_B0(0,0), 47) -
      3.11352617575646e-10*pow(x1_B0(0,0), 32) - 1.24506653893779e-14*pow(x1_B0(0,0), 42) -
      1.07718052936883e-10*pow(x1_B0(0,0), 33) - 0.0186282190252146*pow(x1_B0(0,0), 13) -
      1.5008501240405e-15*pow(x1_B0(0,0), 43) - 9.17629024059444e-7*pow(x1_B0(0,0), 24) -
      1.86197314688281e-11*pow(x1_B0(0,0), 34) - 0.000649370862697509*pow(x1_B0(0,0), 16) -
      3.81120009227046e-14*pow(x1_B0(0,0), 41) -
      0.693964315959918*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) - 3.28970104391975*pow(x1_B0(0,0), 7) -
      5.51275494142595e-5*x1_B0(0,0) - 0.000220834298711507*pow(x1_B0(0,0), 18) - 0.000900090956267887*pow(x1_B0(0,0),
      17) - 2.26356001302331e-7*pow(x1_B0(0,0), 25) - 6.70296817056222e-18*pow(x1_B0(0,0), 49) -
      2.68938565722112e-17*pow(x1_B0(0,0), 48)
)
: (
   0.01328794915596
));

    T = ((x1_B0(0,0) < 2.62826282628263) ? (
   2.5171110546698 + 0.000148177365353652*pow(x1_B0(0,0), 22) +
      0.24444945045536*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) + 3.46646491055137e-8*pow(x1_B0(0,0), 31) +
      2.09262039453241e-11*pow(x1_B0(0,0), 38) + 8.83457505637443e-15*pow(x1_B0(0,0), 47) +
      7.77974795964695e-5*pow(x1_B0(0,0), 23) + 0.0484114864710651*pow(x1_B0(0,0), 11) +
      5.68535309423959e-8*pow(x1_B0(0,0), 29) + 0.000510647124315641*x1_B0(0,0) + 1.53663305845466e-11*pow(x1_B0(0,0),
      39) + 8.4270140365319e-9*pow(x1_B0(0,0), 32) + 2.66069891353197e-16*pow(x1_B0(0,0), 50) +
      2.9156590808689*pow(x1_B0(0,0), 12) + 49.8482162881576*pow(x1_B0(0,0), 9) + 8.73160791680084e-13*pow(x1_B0(0,0),
      41) + 8.76734882943093*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      1.67382933020544e-5*pow(x1_B0(0,0), 24) + 1.57751333627912e-14*pow(x1_B0(0,0), 46) +
      7.68481245581827e-8*pow(x1_B0(0,0), 30) + 0.0212487614535012*pow(x1_B0(0,0), 17) +
      49.5974570648968*pow(x1_B0(0,0), 7) + 5.64156025701448e-12*pow(x1_B0(0,0), 40) + 0.051664123643452*pow(x1_B0(0,0),
      16) + 4.25006003128791e-16*pow(x1_B0(0,0), 48) - 0.047050078484452*pow(x1_B0(0,0), 15) -
      2.25049438209542e-11*pow(x1_B0(0,0), 37) - 0.129067577045887*pow(x1_B0(0,0), 13) -
      3.17102465123733e-7*pow(x1_B0(0,0), 28) - 1.35681312903226e-9*pow(x1_B0(0,0), 34) -
      2.29038860557637e-10*pow(x1_B0(0,0), 36) - 2.34518183958562e-10*pow(x1_B0(0,0), 33) -
      0.0012179105293022*pow(x1_B0(0,0), 20) - 2.70103245897189e-6*pow(x1_B0(0,0), 25) -
      3.7368456323251e-13*pow(x1_B0(0,0), 42) - 0.00322826178027688*pow(x1_B0(0,0), 19) -
      63.0138700172912*pow(x1_B0(0,0), 8) - 1.98453142278475*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      1.25004132582704e-13*pow(x1_B0(0,0), 44) - 20.2943175691333*pow(x1_B0(0,0), 10) -
      1.00295205883165e-14*pow(x1_B0(0,0), 45) - 3.41470795904489e-13*pow(x1_B0(0,0), 43) -
      7.43671430130271e-10*pow(x1_B0(0,0), 35) -
      25.5637237215974*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      0.826574400596194*(x1_B0(0,0)*x1_B0(0,0)) - 1.60130126219199e-6*pow(x1_B0(0,0), 27) -
      0.430224039630141*pow(x1_B0(0,0), 14) - 5.74232375191169e-5*pow(x1_B0(0,0), 21) -
      1.73671018041709e-15*pow(x1_B0(0,0), 49) - 3.77915409254365e-6*pow(x1_B0(0,0), 26) -
      0.000484561959067278*pow(x1_B0(0,0), 18)
)
: (
   1.00000094089959
));

   rho = 1.0/T;

   rho_B0(0,0) = rho;

   rhou0_B0(0,0) = rhou0;

   rhou1_B0(0,0) = rhou1;

   rhoE_B0(0,0) = (0.5*(rhou0*rhou0) + 0.5*(rhou1*rhou1))/rho + invgama*inv2Minf*inv_gamma_m1*T*rho;


    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[0].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 7);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel052(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 0;
  desc->index = 0;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 0;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 7;
  desc->args = (ops_arg*)ops_malloc(7*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->function = ops_par_loop_opensbliblock00Kernel052_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel052");
  }
  ops_enqueue_kernel(desc);
}
#endif
