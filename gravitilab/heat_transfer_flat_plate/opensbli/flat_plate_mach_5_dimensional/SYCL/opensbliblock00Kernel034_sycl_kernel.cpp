//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel034(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
#else
void ops_par_loop_opensbliblock00Kernel034_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[7] = { arg0, arg1, arg2, arg3, arg4,
 arg5, arg6};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,7,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel034");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel034");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 7,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel034 = args[0].dat->size[0];
  int xdim1_opensbliblock00Kernel034 = args[1].dat->size[0];
  int xdim2_opensbliblock00Kernel034 = args[2].dat->size[0];
  int xdim3_opensbliblock00Kernel034 = args[3].dat->size[0];
  int xdim4_opensbliblock00Kernel034 = args[4].dat->size[0];
  int xdim5_opensbliblock00Kernel034 = args[5].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  double* rhoE_B0_p = (double*)args[0].data_d;

  int base1 = args[1].dat->base_offset/sizeof(double);
  double* rho_B0_p = (double*)args[1].data_d;

  int base2 = args[2].dat->base_offset/sizeof(double);
  double* rhou0_B0_p = (double*)args[2].data_d;

  int base3 = args[3].dat->base_offset/sizeof(double);
  double* rhou1_B0_p = (double*)args[3].data_d;

  int base4 = args[4].dat->base_offset/sizeof(double);
  double* x0_B0_p = (double*)args[4].data_d;

  int base5 = args[5].dat->base_offset/sizeof(double);
  double* x1_B0_p = (double*)args[5].data_d;




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 7);
  ops_halo_exchanges(args,7,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  int arg_idx_0 = arg_idx[0];
  int start_1 = start[1];
  int end_1 = end[1];
  int arg_idx_1 = arg_idx[1];
  if ((end[0]-start[0])>0 && (end[1]-start[1])>0) {
    block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {

      auto Delta0block0_sycl = (*Delta0block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto Delta1block0_sycl = (*Delta1block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto Lx1_sycl = (*Lx1_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto Twall_sycl = (*Twall_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto by_sycl = (*by_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv2Minf_sycl = (*inv2Minf_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invLx1_sycl = (*invLx1_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invRhat_sycl = (*invRhat_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv_gamma_m1_sycl = (*inv_gamma_m1_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invgama_sycl = (*invgama_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto pref_sycl = (*pref_p).template get_access<cl::sycl::access::mode::read>(cgh);

      cgh.parallel_for<class opensbliblock00Kernel034_kernel>(cl::sycl::nd_range<2>(cl::sycl::range<2>(
           ((end[1]-start[1]-1)/block->instance->OPS_block_size_y+1)*block->instance->OPS_block_size_y,
            ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
             ),cl::sycl::range<2>(
             block->instance->OPS_block_size_y,
      block->instance->OPS_block_size_x
             ))
      , [=](cl::sycl::nd_item<2> item
      ) [[intel::kernel_args_restrict]] {
        int n_y = item.get_global_id(0)+start_1;
        int n_x = item.get_global_id(1)+start_0;
        int idx[] = {arg_idx_0+n_x, arg_idx_1+n_y};
        ACC<double> rhoE_B0(xdim0_opensbliblock00Kernel034, &rhoE_B0_p[0] + base0 + n_x*1 + n_y * xdim0_opensbliblock00Kernel034*1);
        ACC<double> rho_B0(xdim1_opensbliblock00Kernel034, &rho_B0_p[0] + base1 + n_x*1 + n_y * xdim1_opensbliblock00Kernel034*1);
        ACC<double> rhou0_B0(xdim2_opensbliblock00Kernel034, &rhou0_B0_p[0] + base2 + n_x*1 + n_y * xdim2_opensbliblock00Kernel034*1);
        ACC<double> rhou1_B0(xdim3_opensbliblock00Kernel034, &rhou1_B0_p[0] + base3 + n_x*1 + n_y * xdim3_opensbliblock00Kernel034*1);
        ACC<double> x0_B0(xdim4_opensbliblock00Kernel034, &x0_B0_p[0] + base4 + n_x*1 + n_y * xdim4_opensbliblock00Kernel034*1);
        ACC<double> x1_B0(xdim5_opensbliblock00Kernel034, &x1_B0_p[0] + base5 + n_x*1 + n_y * xdim5_opensbliblock00Kernel034*1);
        //USER CODE
        if (n_x < end_0 && n_y < end_1) {
          
   double T = 0.0;
   double Twalld = 0.0;
   double rho = 0.0;
   double rhou0 = 0.0;
   double rhou1 = 0.0;
   x0_B0(0,0) = Delta0block0_sycl[0]*idx[0];

   x1_B0(0,0) = Lx1_sycl[0]*sinh(by_sycl[0]*invLx1_sycl[0]*Delta1block0_sycl[0]*idx[1])/sinh(by_sycl[0]);

   Twalld = Twall_sycl[0];

   T = pref_sycl[0]*invRhat_sycl[0]/rho;

    rhou0 = ((x1_B0(0,0) < 0.000554055405540554) ? (
   0.0151291766846909 + 7.02589781233594e+113*pow(x1_B0(0,0), 32) +
      2708641767.3071*(x1_B0(0,0)*x1_B0(0,0)) + 6.07590715992659e+87*pow(x1_B0(0,0), 24) +
      7.26086853694613e+139*pow(x1_B0(0,0), 40) + 2.50136219838398e+71*pow(x1_B0(0,0), 19) +
      1.01218895170578e+117*pow(x1_B0(0,0), 33) + 3.28307136047444e+119*pow(x1_B0(0,0), 34) +
      1.29931624724409e+55*pow(x1_B0(0,0), 14) + 2.03277374676903e+35*pow(x1_B0(0,0), 8) +
      1.75352365879372e+64*pow(x1_B0(0,0), 17) + 2.36329800530196e+159*pow(x1_B0(0,0), 46) +
      9.82495140513716e+51*pow(x1_B0(0,0), 13) + 3.21179012013871e-152*pow(x1_B0(0,0), 50) +
      3.24406708850941e+162*pow(x1_B0(0,0), 47) + 2.06395843977666e+68*pow(x1_B0(0,0), 18) +
      2.56410792715746e+136*pow(x1_B0(0,0), 39) + 5.68886701881571e+83*pow(x1_B0(0,0), 23) +
      2.92184978890145e+27*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      39540.9735154228*x1_B0(0,0) + 4.61340843173285e+168*pow(x1_B0(0,0), 49) + 1.15119137377047e+91*pow(x1_B0(0,0), 25)
      + 2.37839250560204e+110*pow(x1_B0(0,0), 31) + 6.95370046297886e+93*pow(x1_B0(0,0), 26) +
      2.38984666219479e+42*pow(x1_B0(0,0), 10) + 8.02031157760647e+18*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      9.11366725602467e+142*pow(x1_B0(0,0), 41) - 5.9189041706891e+61*pow(x1_B0(0,0), 16) -
      2.96239996419098e+132*pow(x1_B0(0,0), 38) - 8.56902326114779e+154*pow(x1_B0(0,0), 45) -
      2.31106495374009e+74*pow(x1_B0(0,0), 20) - 2.61202895553277e+145*pow(x1_B0(0,0), 42) -
      1.90902792812425e+23*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      2.38305687445399e+123*pow(x1_B0(0,0), 35) - 2.53403592909936e+58*pow(x1_B0(0,0), 15) -
      9.19919822419889e+165*pow(x1_B0(0,0), 48) - 201962437995019.0*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      3.49222989414674e+106*pow(x1_B0(0,0), 30) - 6.88694545160508e+100*pow(x1_B0(0,0), 28) -
      1.9942490193615e+97*pow(x1_B0(0,0), 27) - 1.19326416753753e+78*pow(x1_B0(0,0), 21) -
      7.07211889201531e+126*pow(x1_B0(0,0), 36) - 9.06476607548832e+38*pow(x1_B0(0,0), 9) -
      1.03014398462665e+104*pow(x1_B0(0,0), 29) - 2.97634744537888e+31*pow(x1_B0(0,0), 7) -
      4.33461534804674e+48*pow(x1_B0(0,0), 12) - 1.56187909102407e+81*pow(x1_B0(0,0), 22) -
      6.91688965498189e+152*pow(x1_B0(0,0), 44) - 2.37001574633349e+45*pow(x1_B0(0,0), 11) -
      3.64474835506301e+149*pow(x1_B0(0,0), 43) - 1.02271130913028e+130*pow(x1_B0(0,0), 37)
)
: (

      86.5834003425591
));

    rhou1 = ((x1_B0(0,0) < 0.000554055405540554) ? (
   0.704253148113786 + 6.12185699413979e+92*pow(x1_B0(0,0), 25) +
      6.40283924795345e+56*pow(x1_B0(0,0), 14) + 8.1976598808294e+156*pow(x1_B0(0,0), 45) +
      3.89980132634298e+20*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) + 5.22142704491663e+118*pow(x1_B0(0,0), 33) +
      1.22044799356304e+73*pow(x1_B0(0,0), 19) + 5.56571677526156e+85*pow(x1_B0(0,0), 23) +
      1.89201695388508e+138*pow(x1_B0(0,0), 39) + 1.73023969264004e+161*pow(x1_B0(0,0), 46) +
      1.1538062307603e+70*pow(x1_B0(0,0), 18) + 1.96855772779785e+164*pow(x1_B0(0,0), 47) +
      2.42663069391261e+95*pow(x1_B0(0,0), 26) + 1.03824141314418e+37*pow(x1_B0(0,0), 8) +
      4.62172866643428e+133*pow(x1_B0(0,0), 38) + 4.1485248207876e+115*pow(x1_B0(0,0), 32) +
      3.60401801883219e+89*pow(x1_B0(0,0), 24) + 1.27296915481137e+44*pow(x1_B0(0,0), 10) +
      5.51700698536366e+53*pow(x1_B0(0,0), 13) + 4.54218003952598e+141*pow(x1_B0(0,0), 40) +
      4.74394478734374e+144*pow(x1_B0(0,0), 41) + 3.85859093113434e+170*pow(x1_B0(0,0), 49) +
      1.63282627683697e+112*pow(x1_B0(0,0), 31) + 1.50290787007782e+66*pow(x1_B0(0,0), 17) +
      2.20249353495558e-150*pow(x1_B0(0,0), 50) +
      1.45268040376189e+29*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      133852667077.071*(x1_B0(0,0)*x1_B0(0,0)) - 4.11171381182013e+147*pow(x1_B0(0,0), 42) -
      1.62109941338031e+76*pow(x1_B0(0,0), 20) - 1.49859148290694e+33*pow(x1_B0(0,0), 7) -
      1.70752817616676e+125*pow(x1_B0(0,0), 35) - 4.71071873015159e+40*pow(x1_B0(0,0), 9) -
      4.00934170731755e+102*pow(x1_B0(0,0), 28) - 1.48337000292806e+60*pow(x1_B0(0,0), 15) -
      3.07901423932589e+63*pow(x1_B0(0,0), 16) - 9.74011798316263e+15*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      6.72219435860287e+79*pow(x1_B0(0,0), 21) - 5.30096904022158e+105*pow(x1_B0(0,0), 29) -
      2.17575205789274e+50*pow(x1_B0(0,0), 12) - 4.3101481064531e+128*pow(x1_B0(0,0), 36) -
      1.37211978817903e+99*pow(x1_B0(0,0), 27) - 7.72717709551663e+82*pow(x1_B0(0,0), 22) - 700131.859725696*x1_B0(0,0)
      - 6.95055083757665e+167*pow(x1_B0(0,0), 48) - 1.34829452593554e+47*pow(x1_B0(0,0), 11) -
      2.18130862666441e+107*pow(x1_B0(0,0), 30) - 5.39244861021929e+131*pow(x1_B0(0,0), 37) -
      9.85265173015976e+119*pow(x1_B0(0,0), 34) - 4.20916039017169e+154*pow(x1_B0(0,0), 44) -
      9.38217732873789e+24*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      2.58209677175942e+151*pow(x1_B0(0,0), 43)
)
: (
   4193.65501531314
));

    T = ((x1_B0(0,0) < 0.000554055405540554) ? (
   1494.92335640258 + 2.64872580090291e+120*pow(x1_B0(0,0), 34) +
      5.19956922773838e+146*pow(x1_B0(0,0), 42) + 2.2259392437699e+153*pow(x1_B0(0,0), 44) +
      5.87546352183728e+48*pow(x1_B0(0,0), 12) + 4.29718130228444e+31*pow(x1_B0(0,0), 7) +
      1.52000935963422e+39*pow(x1_B0(0,0), 9) + 6.94238174246588e+58*pow(x1_B0(0,0), 15) + 15532.0145882649*x1_B0(0,0) +
      5.83298115231724e+45*pow(x1_B0(0,0), 11) + 2.285989346544e+127*pow(x1_B0(0,0), 36) +
      1.57626046134794e+104*pow(x1_B0(0,0), 29) + 1.80044511806543e+150*pow(x1_B0(0,0), 43) +
      1.21982104288517e+124*pow(x1_B0(0,0), 35) + 9.99534509402956e+93*pow(x1_B0(0,0), 26) +
      1.10932299620473e+75*pow(x1_B0(0,0), 20) + 1.88141724099714e+101*pow(x1_B0(0,0), 28) +
      9.21049941824155e+97*pow(x1_B0(0,0), 27) + 2.83227019439129e+78*pow(x1_B0(0,0), 21) +
      2.45259482701576e+23*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      1.83283406351692e+130*pow(x1_B0(0,0), 37) + 234260194132087.0*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      5.25656731298845e+166*pow(x1_B0(0,0), 48) + 9.62817389019351e+61*pow(x1_B0(0,0), 16) +
      1.81156243602861e+81*pow(x1_B0(0,0), 22) - 1.53162826501083e+55*pow(x1_B0(0,0), 14) -
      2.27562275679452e+107*pow(x1_B0(0,0), 30) - 1.54281027870464e+143*pow(x1_B0(0,0), 41) -
      3.26429224862359e+169*pow(x1_B0(0,0), 49) - 4.73121930355565e+68*pow(x1_B0(0,0), 18) -
      2.09836098361976e+91*pow(x1_B0(0,0), 25) - 2.55162459639318e+140*pow(x1_B0(0,0), 40) -
      9.79791403528433e+18*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) - 2.62507707543133e+71*pow(x1_B0(0,0), 19) -
      3.00672072875382e+133*pow(x1_B0(0,0), 38) - 1.03426515851009e+163*pow(x1_B0(0,0), 47) -
      14004867423.141*(x1_B0(0,0)*x1_B0(0,0)) - 1.25937284341093e+160*pow(x1_B0(0,0), 46) -
      1.09316163294177e+111*pow(x1_B0(0,0), 31) - 1.45187259298045e-151*pow(x1_B0(0,0), 50) -
      1.7703294676445e+88*pow(x1_B0(0,0), 24) - 2.02190113277919e+156*pow(x1_B0(0,0), 45) -
      1.30404280697706e+65*pow(x1_B0(0,0), 17) - 1.59086631726228e+117*pow(x1_B0(0,0), 33) -
      5.55102639861885e+84*pow(x1_B0(0,0), 23) - 1.40331158468771e+137*pow(x1_B0(0,0), 39) -
      3.96935188053608e+27*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      4.48514451422516e+42*pow(x1_B0(0,0), 10) - 2.03098841093001e+114*pow(x1_B0(0,0), 32) -
      3.14207986082458e+35*pow(x1_B0(0,0), 8) - 2.29586028697282e+52*pow(x1_B0(0,0), 13)
)
: (
   288.000000952991
));

   rho = 1202.74707431774/T;

   rho_B0(0,0) = rho;

   rhou0_B0(0,0) = rhou0;

   rhou1_B0(0,0) = rhou1;

   rhoE_B0(0,0) = (0.5*(rhou0*rhou0) + 0.5*(rhou1*rhou1))/rho + invgama_sycl[0]*inv2Minf_sycl[0]*inv_gamma_m1_sycl[0]*T*rho;


        }
      });
    });
  }
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[0].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 7);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel034(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 0;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 0;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 7;
  desc->args = (ops_arg*)ops_malloc(7*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->function = ops_par_loop_opensbliblock00Kernel034_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel034");
  }
  ops_enqueue_kernel(desc);
}
#endif
