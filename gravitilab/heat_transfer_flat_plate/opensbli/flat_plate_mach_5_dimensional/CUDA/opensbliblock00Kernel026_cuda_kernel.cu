//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel026 [7][1];
static int dims_opensbliblock00Kernel026_h [7][1] = {{0}};

//user function
__device__

 void opensbliblock00Kernel026_gpu(ACC<double> &rhoE_B0,
  ACC<double> &rho_B0,
  ACC<double> &rhou0_B0,
  ACC<double> &rhou1_B0,
  ACC<double> &x0_B0,
  ACC<double> &x1_B0,
  const int *idx)
{
   double T = 0.0;
   double Twalld = 0.0;
   double rho = 0.0;
   double rhou0 = 0.0;
   double rhou1 = 0.0;
   x0_B0(0,0) = Delta0block0*idx[0];

   x1_B0(0,0) = Lx1*sinh(by*invLx1*Delta1block0*idx[1])/sinh(by);

   Twalld = Twall;

   T = pref*invRhat/rho;

    rhou0 = ((x1_B0(0,0) < 0.000552055205520552) ? (
   0.0380977432211867 + 7.48696390889459e+162*pow(x1_B0(0,0), 47) +
      1.58904046879046e+64*pow(x1_B0(0,0), 17) + 4.18606568998416e+110*pow(x1_B0(0,0), 31) +
      4.79281694974173e+168*pow(x1_B0(0,0), 49) + 3.9150317751928e+136*pow(x1_B0(0,0), 39) +
      4.81131287741489e+68*pow(x1_B0(0,0), 18) + 1.4363666596466e+83*pow(x1_B0(0,0), 23) +
      1.6016704743649e+114*pow(x1_B0(0,0), 32) + 1.56059777776278e+140*pow(x1_B0(0,0), 40) +
      5.66749031935877e+42*pow(x1_B0(0,0), 10) + 3.78669550447704e+159*pow(x1_B0(0,0), 46) +
      2.72036739279694e+117*pow(x1_B0(0,0), 33) + 1.99918740964482e+19*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      4.20897510242195e-152*pow(x1_B0(0,0), 50) + 2.49183804941958e+143*pow(x1_B0(0,0), 41) +
      3.37398963124756e+55*pow(x1_B0(0,0), 14) + 1.85159639529186e+120*pow(x1_B0(0,0), 34) +
      2.42412670906685e+94*pow(x1_B0(0,0), 26) +
      7.22683430820878e+27*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      4.96342863638418e+35*pow(x1_B0(0,0), 8) + 6.71637089813018e+71*pow(x1_B0(0,0), 19) +
      6786680734.7631*(x1_B0(0,0)*x1_B0(0,0)) + 8.01104775325165e+145*pow(x1_B0(0,0), 42) +
      1.34150343261266e+88*pow(x1_B0(0,0), 24) + 2.91287798860135e+91*pow(x1_B0(0,0), 25) + 118386.270778362*x1_B0(0,0)
      + 2.2348369458585e+52*pow(x1_B0(0,0), 13) - 1.76767486218452e+107*pow(x1_B0(0,0), 30) -
      5.53055189563547e+58*pow(x1_B0(0,0), 15) - 6.24670070551124e+149*pow(x1_B0(0,0), 43) -
      7.32109976077097e+31*pow(x1_B0(0,0), 7) - 2.78648367073684e+78*pow(x1_B0(0,0), 21) -
      2.73731373961826e+104*pow(x1_B0(0,0), 29) - 3.86183602278357e+123*pow(x1_B0(0,0), 35) -
      2.18989468760697e+39*pow(x1_B0(0,0), 9) - 1.89592621761076e+133*pow(x1_B0(0,0), 38) -
      3.45772544240127e+97*pow(x1_B0(0,0), 27) - 9.39513444743484e+155*pow(x1_B0(0,0), 45) -
      4.19857175347394e+81*pow(x1_B0(0,0), 22) - 1.57977077766633e+101*pow(x1_B0(0,0), 28) -
      2.72202698029949e+130*pow(x1_B0(0,0), 37) - 1.4765293080447e+62*pow(x1_B0(0,0), 16) -
      1.56117676084048e+127*pow(x1_B0(0,0), 36) -
      4.74214003940081e+23*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      3.80919707183702e+74*pow(x1_B0(0,0), 20) - 504672273200357.0*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      5.27068951658811e+45*pow(x1_B0(0,0), 11) - 1.36603344491412e+166*pow(x1_B0(0,0), 48) -
      1.09651180786601e+49*pow(x1_B0(0,0), 12) - 1.57325054395571e+153*pow(x1_B0(0,0), 44)
)
: (
   247.62990483248
));

    rhou1 = ((x1_B0(0,0) < 0.000552055205520552) ? (
   0.00224633430381945 + 2.03278553126947e+67*pow(x1_B0(0,0), 18) +
      1.86342079808123e+95*pow(x1_B0(0,0), 27) + 1.12348648251262e+18*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      2.04350448688751e+119*pow(x1_B0(0,0), 34) + 6.59138102391461e+164*pow(x1_B0(0,0), 48) +
      8.5673979065667e+121*pow(x1_B0(0,0), 35) + 1.27022456121548e+142*pow(x1_B0(0,0), 41) +
      3.27316746759404e+138*pow(x1_B0(0,0), 40) + 9.27710028158275e+50*pow(x1_B0(0,0), 13) +
      2.59146161981389e+34*pow(x1_B0(0,0), 8) + 2.10721927295345e+145*pow(x1_B0(0,0), 42) +
      2.05099179846856e+161*pow(x1_B0(0,0), 47) + 3.85063386611707e+72*pow(x1_B0(0,0), 20) +
      1.90961980669898e+54*pow(x1_B0(0,0), 14) +
      3.93901058650924e+26*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      5.2709306195543e+112*pow(x1_B0(0,0), 32) + 1.42551120332745e+90*pow(x1_B0(0,0), 25) +
      3.90498247494775e+70*pow(x1_B0(0,0), 19) + 405021792.115561*(x1_B0(0,0)*x1_B0(0,0)) +
      2.71757319573267e+41*pow(x1_B0(0,0), 10) + 1.05904739918694e+148*pow(x1_B0(0,0), 43) +
      4.35875384569716e+86*pow(x1_B0(0,0), 24) + 1.42465901333334e+116*pow(x1_B0(0,0), 33) +
      1.94773121343962e+93*pow(x1_B0(0,0), 26) - 1.26379422071265e+155*pow(x1_B0(0,0), 45) -
      1.35033348332074e+129*pow(x1_B0(0,0), 37) - 1.86413635581701e+106*pow(x1_B0(0,0), 30) -
      1.10716463486623e+38*pow(x1_B0(0,0), 9) - 1.44500940644379e+103*pow(x1_B0(0,0), 29) -
      2.39216164122059e+80*pow(x1_B0(0,0), 22) - 2.08800133161583e+44*pow(x1_B0(0,0), 11) -
      1.79781866987444e-154*pow(x1_B0(0,0), 50) - 5.62089609079785e+99*pow(x1_B0(0,0), 28) -
      1.41903661949585e+135*pow(x1_B0(0,0), 39) - 4.16359108610878e+125*pow(x1_B0(0,0), 36) -
      3.91452301261553e+30*pow(x1_B0(0,0), 7) - 4.22440537720536e+151*pow(x1_B0(0,0), 44) - 2169.49198779822*x1_B0(0,0)
      - 1.19107710673113e+158*pow(x1_B0(0,0), 46) - 1.42272554978279e+83*pow(x1_B0(0,0), 23) -
      7.56733841884469e+60*pow(x1_B0(0,0), 16) - 1.95113657249454e+57*pow(x1_B0(0,0), 15) -
      2.62705769654432e+22*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      6.69908594550918e+167*pow(x1_B0(0,0), 49) - 2.39600865259799e+63*pow(x1_B0(0,0), 17) -
      2.19522973831609e+132*pow(x1_B0(0,0), 38) - 5.97845519296587e+47*pow(x1_B0(0,0), 12) -
      28793089646559.2*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) - 2.14388172140393e+108*pow(x1_B0(0,0), 31) -
      1.14546635991961e+77*pow(x1_B0(0,0), 21)
)
: (
   12.5339191938527
));

    T = ((x1_B0(0,0) < 0.000552055205520552) ? (
   1541.51118910227 + 9.46337883292788e+97*pow(x1_B0(0,0), 27) +
      5.47630690086072e+146*pow(x1_B0(0,0), 42) + 1.00898309807234e+62*pow(x1_B0(0,0), 16) +
      2.01385702555577e+81*pow(x1_B0(0,0), 22) + 6.99036195882338e+58*pow(x1_B0(0,0), 15) +
      5.77779043897554e+166*pow(x1_B0(0,0), 48) + 1.98676744925631e+101*pow(x1_B0(0,0), 28) +
      2.52800618262199e+23*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) + 16181.2703746507*x1_B0(0,0) +
      1.54868527754014e+39*pow(x1_B0(0,0), 9) + 4.4069979715773e+31*pow(x1_B0(0,0), 7) +
      1.95322549616225e+150*pow(x1_B0(0,0), 43) + 1.74564075507591e+104*pow(x1_B0(0,0), 29) +
      1.11051723039461e+75*pow(x1_B0(0,0), 20) + 2.06130427515302e+130*pow(x1_B0(0,0), 37) +
      2.63314989676126e+120*pow(x1_B0(0,0), 34) + 5.82289486832345e+45*pow(x1_B0(0,0), 11) +
      8.75357799166783e+93*pow(x1_B0(0,0), 26) + 6.17583175301227e+48*pow(x1_B0(0,0), 12) +
      2.46245550430878e+127*pow(x1_B0(0,0), 36) + 1.28480087401404e+124*pow(x1_B0(0,0), 35) +
      2.46820652624365e+153*pow(x1_B0(0,0), 44) + 2.93943637778625e+78*pow(x1_B0(0,0), 21) +
      242657762285659.0*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) - 14478954001.817*(x1_B0(0,0)*x1_B0(0,0)) -
      3.04346943982657e+133*pow(x1_B0(0,0), 38) - 1.12347856002592e-151*pow(x1_B0(0,0), 50) -
      3.21300650558839e+35*pow(x1_B0(0,0), 8) - 1.83588887981113e+88*pow(x1_B0(0,0), 24) -
      4.86799595537227e+68*pow(x1_B0(0,0), 18) - 5.52379846721867e+84*pow(x1_B0(0,0), 23) -
      2.77680327288831e+140*pow(x1_B0(0,0), 40) - 1.49595900514795e+137*pow(x1_B0(0,0), 39) -
      4.08135199953282e+27*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      2.31636259562598e+52*pow(x1_B0(0,0), 13) - 1.37736605357776e+160*pow(x1_B0(0,0), 46) -
      1.01237071786404e+19*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) - 3.5799179565131e+169*pow(x1_B0(0,0), 49) -
      1.27651477385741e+65*pow(x1_B0(0,0), 17) - 2.11805492998961e+156*pow(x1_B0(0,0), 45) -
      2.91893664424003e+71*pow(x1_B0(0,0), 19) - 1.6467804182919e+55*pow(x1_B0(0,0), 14) -
      2.25331006191862e+91*pow(x1_B0(0,0), 25) - 1.78433024992126e+117*pow(x1_B0(0,0), 33) -
      2.22228646785981e+107*pow(x1_B0(0,0), 30) - 1.15968733505678e+163*pow(x1_B0(0,0), 47) -
      4.54452223543483e+42*pow(x1_B0(0,0), 10) - 2.16894782102236e+114*pow(x1_B0(0,0), 32) -
      1.77016443390079e+143*pow(x1_B0(0,0), 41) - 1.13926700159008e+111*pow(x1_B0(0,0), 31)
)
: (

      297.000001468597
));

   rho = 1202.74707431774/T;

   rho_B0(0,0) = rho;

   rhou0_B0(0,0) = rhou0;

   rhou1_B0(0,0) = rhou1;

   rhoE_B0(0,0) = (0.5*(rhou0*rhou0) + 0.5*(rhou1*rhou1))/rho + invgama*inv2Minf*inv_gamma_m1*T*rho;

}



__global__ void ops_opensbliblock00Kernel026(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
int arg_idx0, int arg_idx1,
int size0,
int size1 ){


  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  int arg_idx[2];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel026[0][0];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel026[1][0];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel026[2][0];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel026[3][0];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel026[4][0];
  arg5 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel026[5][0];

  if (idx_x < size0 && idx_y < size1) {
    ACC<double> argp0(dims_opensbliblock00Kernel026[0][0], arg0);
    ACC<double> argp1(dims_opensbliblock00Kernel026[1][0], arg1);
    ACC<double> argp2(dims_opensbliblock00Kernel026[2][0], arg2);
    ACC<double> argp3(dims_opensbliblock00Kernel026[3][0], arg3);
    ACC<double> argp4(dims_opensbliblock00Kernel026[4][0], arg4);
    ACC<double> argp5(dims_opensbliblock00Kernel026[5][0], arg5);
    opensbliblock00Kernel026_gpu(
     argp0, argp1, argp2, argp3, argp4,
     argp5, arg_idx);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel026(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
#else
void ops_par_loop_opensbliblock00Kernel026_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[7] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,7,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel026");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];

  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 7,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0]+start[0];
  arg_idx[1] = sb->decomp_disp[1]+start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = start[0];
  arg_idx[1] = start[1];
  #endif //OPS_MPI
  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel026_h[0][0] || xdim1 != dims_opensbliblock00Kernel026_h[1][0] || xdim2 != dims_opensbliblock00Kernel026_h[2][0] || xdim3 != dims_opensbliblock00Kernel026_h[3][0] || xdim4 != dims_opensbliblock00Kernel026_h[4][0] || xdim5 != dims_opensbliblock00Kernel026_h[5][0]) {
    dims_opensbliblock00Kernel026_h[0][0] = xdim0;
    dims_opensbliblock00Kernel026_h[1][0] = xdim1;
    dims_opensbliblock00Kernel026_h[2][0] = xdim2;
    dims_opensbliblock00Kernel026_h[3][0] = xdim3;
    dims_opensbliblock00Kernel026_h[4][0] = xdim4;
    dims_opensbliblock00Kernel026_h[5][0] = xdim5;
    cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_opensbliblock00Kernel026, dims_opensbliblock00Kernel026_h, sizeof(dims_opensbliblock00Kernel026)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);

  char *p_a[7];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  p_a[5] = (char *)args[5].data_d + base5;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 7);
  ops_halo_exchanges(args,7,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0)
    ops_opensbliblock00Kernel026<<<grid, tblock >>> ( 
     (double *)p_a[0], (double *)p_a[1],
     (double *)p_a[2], (double *)p_a[3],
     (double *)p_a[4], (double *)p_a[5],
     arg_idx[0], arg_idx[1],
    x_size, y_size);

  cutilSafeCall(block->instance->ostream(), cudaGetLastError());

  if (block->instance->OPS_diags>1) {
    cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[0].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 7);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel026(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
  ops_arg args[7] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 7, 0, dim, 1, range, block, ops_par_loop_opensbliblock00Kernel026_execute);
}
#endif
