//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

 void opensbliblock00Kernel040(ptr_double rhoE_B0,
  ptr_double rhou1_B0,
  ptr_double x0_B0,
  ptr_double rhou0_B0,
  ptr_double rho_B0,
  ptr_double x1_B0,
  const int *idx, const double Delta0block0, const double Delta1block0, const double Lx1, const double by, const double rcinv4, const double rcinv5, const double rcinv6, const double rcinv7)
{
   double rhou0 = 0.0;
   double rho = 0.0;
   double rhou1 = 0.0;
   double T = 0.0;
   OPS_ACCS(x0_B0, 0,0) = Delta0block0*idx[0];

   OPS_ACCS(x1_B0, 0,0) = Lx1*sinh(Delta1block0*by*rcinv4*idx[1])/sinh(by);

    rhou0 = ((OPS_ACCS(x1_B0, 0,0) < 3.47434743474347) ? (
   2.35554518722192e-22*pow(OPS_ACCS(x1_B0, 0,0), 50) -
      2.00935622540676e-21*pow(OPS_ACCS(x1_B0, 0,0), 49) + 5.5615361207827e-22*pow(OPS_ACCS(x1_B0, 0,0), 48) +
      1.76714695246477e-20*pow(OPS_ACCS(x1_B0, 0,0), 47) + 4.27790899476588e-20*pow(OPS_ACCS(x1_B0, 0,0), 46) -
      3.0408859120785e-20*pow(OPS_ACCS(x1_B0, 0,0), 45) - 5.69009417522241e-19*pow(OPS_ACCS(x1_B0, 0,0), 44) -
      2.10087120844669e-18*pow(OPS_ACCS(x1_B0, 0,0), 43) - 3.20009578826937e-18*pow(OPS_ACCS(x1_B0, 0,0), 42) +
      8.56005650676752e-18*pow(OPS_ACCS(x1_B0, 0,0), 41) + 7.78512277075068e-17*pow(OPS_ACCS(x1_B0, 0,0), 40) +
      2.86637362290176e-16*pow(OPS_ACCS(x1_B0, 0,0), 39) + 5.37596700702354e-16*pow(OPS_ACCS(x1_B0, 0,0), 38) -
      6.17404591299293e-16*pow(OPS_ACCS(x1_B0, 0,0), 37) - 9.50666354095459e-15*pow(OPS_ACCS(x1_B0, 0,0), 36) -
      4.18216241328414e-14*pow(OPS_ACCS(x1_B0, 0,0), 35) - 1.03686900040183e-13*pow(OPS_ACCS(x1_B0, 0,0), 34) -
      3.79907648041725e-14*pow(OPS_ACCS(x1_B0, 0,0), 33) + 1.04941721462694e-12*pow(OPS_ACCS(x1_B0, 0,0), 32) +
      5.89363619050573e-12*pow(OPS_ACCS(x1_B0, 0,0), 31) + 1.76772455155239e-11*pow(OPS_ACCS(x1_B0, 0,0), 30) +
      1.894664111461e-11*pow(OPS_ACCS(x1_B0, 0,0), 29) - 1.1912608960156e-10*pow(OPS_ACCS(x1_B0, 0,0), 28) -
      8.29561167424891e-10*pow(OPS_ACCS(x1_B0, 0,0), 27) - 2.65171228618462e-9*pow(OPS_ACCS(x1_B0, 0,0), 26) -
      2.75178543736377e-9*pow(OPS_ACCS(x1_B0, 0,0), 25) + 1.94021569054454e-8*pow(OPS_ACCS(x1_B0, 0,0), 24) +
      1.24222966145e-7*pow(OPS_ACCS(x1_B0, 0,0), 23) + 3.23932173598062e-7*pow(OPS_ACCS(x1_B0, 0,0), 22) -
      1.10433230520441e-7*pow(OPS_ACCS(x1_B0, 0,0), 21) - 4.43731691707406e-6*pow(OPS_ACCS(x1_B0, 0,0), 20) -
      1.62563201766465e-5*pow(OPS_ACCS(x1_B0, 0,0), 19) - 6.13597215217328e-6*pow(OPS_ACCS(x1_B0, 0,0), 18) +
      0.00017698718810181*pow(OPS_ACCS(x1_B0, 0,0), 17) + 0.000613829636434701*pow(OPS_ACCS(x1_B0, 0,0), 16) -
      0.000526657087147129*pow(OPS_ACCS(x1_B0, 0,0), 15) - 0.00843667410839182*pow(OPS_ACCS(x1_B0, 0,0), 14) -
      0.00594419266786583*pow(OPS_ACCS(x1_B0, 0,0), 13) + 0.0952133000516688*pow(OPS_ACCS(x1_B0, 0,0), 12) +
      0.0357527259135771*pow(OPS_ACCS(x1_B0, 0,0), 11) - 1.15748478292371*pow(OPS_ACCS(x1_B0, 0,0), 10) +
      3.37719847683204*pow(OPS_ACCS(x1_B0, 0,0), 9) - 5.16542804320381*pow(OPS_ACCS(x1_B0, 0,0), 8) +
      4.9112377235697*pow(OPS_ACCS(x1_B0, 0,0), 7) - 3.05399260251765*pow(OPS_ACCS(x1_B0, 0,0), 6) +
      1.24979596182769*pow(OPS_ACCS(x1_B0, 0,0), 5) - 0.340798552976241*pow(OPS_ACCS(x1_B0, 0,0), 4) +
      0.137512844236659*pow(OPS_ACCS(x1_B0, 0,0), 3) - 0.00379011732118699*pow(OPS_ACCS(x1_B0, 0,0), 2) +
      0.423487405503203*OPS_ACCS(x1_B0, 0,0) - 9.41149679597911e-7
)
: (
   0.999999408078923
));

    rhou1 = ((OPS_ACCS(x1_B0, 0,0) < 3.47434743474347) ? (
   2.15764795669156e-24*pow(OPS_ACCS(x1_B0, 0,0), 50) -
      1.89236583169422e-23*pow(OPS_ACCS(x1_B0, 0,0), 49) + 7.69202870838675e-24*pow(OPS_ACCS(x1_B0, 0,0), 48) +
      1.70507955045203e-22*pow(OPS_ACCS(x1_B0, 0,0), 47) + 3.81782695492734e-22*pow(OPS_ACCS(x1_B0, 0,0), 46) -
      4.26028242016517e-22*pow(OPS_ACCS(x1_B0, 0,0), 45) - 5.70193580147886e-21*pow(OPS_ACCS(x1_B0, 0,0), 44) -
      1.95829270385051e-20*pow(OPS_ACCS(x1_B0, 0,0), 43) - 2.46387244832335e-20*pow(OPS_ACCS(x1_B0, 0,0), 42) +
      1.0616664844971e-19*pow(OPS_ACCS(x1_B0, 0,0), 41) + 7.95407816708425e-19*pow(OPS_ACCS(x1_B0, 0,0), 40) +
      2.69801421299289e-18*pow(OPS_ACCS(x1_B0, 0,0), 39) + 4.24407454854892e-18*pow(OPS_ACCS(x1_B0, 0,0), 38) -
      1.02494549465857e-17*pow(OPS_ACCS(x1_B0, 0,0), 37) - 1.0311464216514e-16*pow(OPS_ACCS(x1_B0, 0,0), 36) -
      4.10562137490978e-16*pow(OPS_ACCS(x1_B0, 0,0), 35) - 8.90846425246352e-16*pow(OPS_ACCS(x1_B0, 0,0), 34) +
      3.31839382309436e-16*pow(OPS_ACCS(x1_B0, 0,0), 33) + 1.25486073963286e-14*pow(OPS_ACCS(x1_B0, 0,0), 32) +
      6.10498505342066e-14*pow(OPS_ACCS(x1_B0, 0,0), 31) + 1.6167911954809e-13*pow(OPS_ACCS(x1_B0, 0,0), 30) +
      7.95636452430526e-14*pow(OPS_ACCS(x1_B0, 0,0), 29) - 1.58890143033548e-12*pow(OPS_ACCS(x1_B0, 0,0), 28) -
      8.98717229545117e-12*pow(OPS_ACCS(x1_B0, 0,0), 27) - 2.49620942515269e-11*pow(OPS_ACCS(x1_B0, 0,0), 26) -
      1.0340623615852e-11*pow(OPS_ACCS(x1_B0, 0,0), 25) + 2.61421317577836e-10*pow(OPS_ACCS(x1_B0, 0,0), 24) +
      1.35337409877607e-9*pow(OPS_ACCS(x1_B0, 0,0), 23) + 2.89301414991171e-9*pow(OPS_ACCS(x1_B0, 0,0), 22) -
      4.20736535406375e-9*pow(OPS_ACCS(x1_B0, 0,0), 21) - 5.39309325859807e-8*pow(OPS_ACCS(x1_B0, 0,0), 20) -
      1.63185626867493e-7*pow(OPS_ACCS(x1_B0, 0,0), 19) + 6.20583025035606e-8*pow(OPS_ACCS(x1_B0, 0,0), 18) +
      2.24953481819515e-6*pow(OPS_ACCS(x1_B0, 0,0), 17) + 6.18680429670961e-6*pow(OPS_ACCS(x1_B0, 0,0), 16) -
      1.13933889779781e-5*pow(OPS_ACCS(x1_B0, 0,0), 15) - 0.000100760514960644*pow(OPS_ACCS(x1_B0, 0,0), 14) -
      1.22902099586774e-5*pow(OPS_ACCS(x1_B0, 0,0), 13) + 0.00122012359509703*pow(OPS_ACCS(x1_B0, 0,0), 12) -
      0.000174713582148392*pow(OPS_ACCS(x1_B0, 0,0), 11) - 0.0144727047728154*pow(OPS_ACCS(x1_B0, 0,0), 10) +
      0.0478143661600029*pow(OPS_ACCS(x1_B0, 0,0), 9) - 0.0798994096272105*pow(OPS_ACCS(x1_B0, 0,0), 8) +
      0.0824506842402908*pow(OPS_ACCS(x1_B0, 0,0), 7) - 0.0554878434156257*pow(OPS_ACCS(x1_B0, 0,0), 6) +
      0.024435875255148*pow(OPS_ACCS(x1_B0, 0,0), 5) - 0.00654584540468695*pow(OPS_ACCS(x1_B0, 0,0), 4) +
      0.0011741804058932*pow(OPS_ACCS(x1_B0, 0,0), 3) + 0.00108918546751579*pow(OPS_ACCS(x1_B0, 0,0), 2) +
      4.14937248562039e-6*OPS_ACCS(x1_B0, 0,0) - 3.82351596027384e-8
)
: (
   0.00564964364741575
));

    T = ((OPS_ACCS(x1_B0, 0,0) < 3.47434743474347) ? (
   -3.73062431090927e-23*pow(OPS_ACCS(x1_B0, 0,0), 50) +
      3.02359695459513e-22*pow(OPS_ACCS(x1_B0, 0,0), 49) - 7.07491196041644e-24*pow(OPS_ACCS(x1_B0, 0,0), 48) -
      2.53606828122103e-21*pow(OPS_ACCS(x1_B0, 0,0), 47) - 7.11707143461952e-21*pow(OPS_ACCS(x1_B0, 0,0), 46) +
      2.00310852950841e-22*pow(OPS_ACCS(x1_B0, 0,0), 45) + 7.52116250840464e-20*pow(OPS_ACCS(x1_B0, 0,0), 44) +
      3.24392644909234e-19*pow(OPS_ACCS(x1_B0, 0,0), 43) + 6.59241426720847e-19*pow(OPS_ACCS(x1_B0, 0,0), 42) -
      4.86367549750723e-19*pow(OPS_ACCS(x1_B0, 0,0), 41) - 9.84138716065443e-18*pow(OPS_ACCS(x1_B0, 0,0), 40) -
      4.36436437408906e-17*pow(OPS_ACCS(x1_B0, 0,0), 39) - 1.0816198463299e-16*pow(OPS_ACCS(x1_B0, 0,0), 38) -
      4.86879330244086e-17*pow(OPS_ACCS(x1_B0, 0,0), 37) + 1.01293239198981e-15*pow(OPS_ACCS(x1_B0, 0,0), 36) +
      5.8560337439448e-15*pow(OPS_ACCS(x1_B0, 0,0), 35) + 1.86798098486401e-14*pow(OPS_ACCS(x1_B0, 0,0), 34) +
      2.84085898057424e-14*pow(OPS_ACCS(x1_B0, 0,0), 33) - 7.36888478006771e-14*pow(OPS_ACCS(x1_B0, 0,0), 32) -
      7.24583126682524e-13*pow(OPS_ACCS(x1_B0, 0,0), 31) - 2.88766040431012e-12*pow(OPS_ACCS(x1_B0, 0,0), 30) -
      6.23239605204644e-12*pow(OPS_ACCS(x1_B0, 0,0), 29) + 2.76973114508602e-12*pow(OPS_ACCS(x1_B0, 0,0), 28) +
      8.91072111188987e-11*pow(OPS_ACCS(x1_B0, 0,0), 27) + 4.1295461211974e-10*pow(OPS_ACCS(x1_B0, 0,0), 26) +
      9.6213970081005e-10*pow(OPS_ACCS(x1_B0, 0,0), 25) - 3.19651870754426e-10*pow(OPS_ACCS(x1_B0, 0,0), 24) -
      1.3081654019114e-8*pow(OPS_ACCS(x1_B0, 0,0), 23) - 5.63175435016545e-8*pow(OPS_ACCS(x1_B0, 0,0), 22) -
      9.40865847984399e-8*pow(OPS_ACCS(x1_B0, 0,0), 21) + 2.6801438576199e-7*pow(OPS_ACCS(x1_B0, 0,0), 20) +
      2.20028198405674e-6*pow(OPS_ACCS(x1_B0, 0,0), 19) + 5.26409565182062e-6*pow(OPS_ACCS(x1_B0, 0,0), 18) -
      6.87036544347723e-6*pow(OPS_ACCS(x1_B0, 0,0), 17) - 8.18100285010394e-5*pow(OPS_ACCS(x1_B0, 0,0), 16) -
      0.000150183322274531*pow(OPS_ACCS(x1_B0, 0,0), 15) + 0.000546559389166845*pow(OPS_ACCS(x1_B0, 0,0), 14) +
      0.00248793676507131*pow(OPS_ACCS(x1_B0, 0,0), 13) - 0.00313492651549679*pow(OPS_ACCS(x1_B0, 0,0), 12) -
      0.0233426212015386*pow(OPS_ACCS(x1_B0, 0,0), 11) + 0.0513778712722904*pow(OPS_ACCS(x1_B0, 0,0), 10) +
      0.0387070396341026*pow(OPS_ACCS(x1_B0, 0,0), 9) - 0.284700530808648*pow(OPS_ACCS(x1_B0, 0,0), 8) +
      0.486110749941822*pow(OPS_ACCS(x1_B0, 0,0), 7) - 0.442517067346077*pow(OPS_ACCS(x1_B0, 0,0), 6) +
      0.27455584544276*pow(OPS_ACCS(x1_B0, 0,0), 5) - 0.105304396585597*pow(OPS_ACCS(x1_B0, 0,0), 4) +
      0.0162954064602151*pow(OPS_ACCS(x1_B0, 0,0), 3) - 0.291761640877121*pow(OPS_ACCS(x1_B0, 0,0), 2) +
      7.47721770024649e-5*OPS_ACCS(x1_B0, 0,0) + 1.67619323512792
)
: (
   1.00000058834432
));

   rho = 1.0/T;

   OPS_ACCS(rho_B0, 0,0) = rho;

   OPS_ACCS(rhou0_B0, 0,0) = rhou0;

   OPS_ACCS(rhou1_B0, 0,0) = rhou1;

   OPS_ACCS(rhoE_B0, 0,0) = rcinv5*rcinv6*rcinv7*T*rho + (0.5*pow(rhou0, 2) + 0.5*pow(rhou1, 2))/rho;

}


__kernel void ops_opensbliblock00Kernel040(
__global double* restrict arg0,
__global double* restrict arg1,
__global double* restrict arg2,
__global double* restrict arg3,
__global double* restrict arg4,
__global double* restrict arg5,
const double Delta0block0,
const double Delta1block0,
const double Lx1,
const double by,
const double rcinv4,
const double rcinv5,
const double rcinv6,
const double rcinv7,
const int base0,
const int base1,
const int base2,
const int base3,
const int base4,
const int base5,
int arg_idx0, int arg_idx1,
const int size0,
const int size1 ){


  int idx_y = get_global_id(1);
  int idx_x = get_global_id(0);

  int arg_idx[2];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  if (idx_x < size0 && idx_y < size1) {
    ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_opensbliblock00Kernel040], xdim0_opensbliblock00Kernel040};
    ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_opensbliblock00Kernel040], xdim1_opensbliblock00Kernel040};
    ptr_double ptr2 = { &arg2[base2 + idx_x * 1*1 + idx_y * 1*1 * xdim2_opensbliblock00Kernel040], xdim2_opensbliblock00Kernel040};
    ptr_double ptr3 = { &arg3[base3 + idx_x * 1*1 + idx_y * 1*1 * xdim3_opensbliblock00Kernel040], xdim3_opensbliblock00Kernel040};
    ptr_double ptr4 = { &arg4[base4 + idx_x * 1*1 + idx_y * 1*1 * xdim4_opensbliblock00Kernel040], xdim4_opensbliblock00Kernel040};
    ptr_double ptr5 = { &arg5[base5 + idx_x * 1*1 + idx_y * 1*1 * xdim5_opensbliblock00Kernel040], xdim5_opensbliblock00Kernel040};
    opensbliblock00Kernel040(ptr0,
                                  ptr1,
                                  ptr2,
                                  ptr3,
                                  ptr4,
                                  ptr5,
                                  arg_idx,
                                  Delta0block0,
                                  Delta1block0,
                                  Lx1,
                                  by,
                                  rcinv4,
                                  rcinv5,
                                  rcinv6,
                                  rcinv7);
  }

}
