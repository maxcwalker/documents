//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel040(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
#else
void ops_par_loop_opensbliblock00Kernel040_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[7] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,7,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel040");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel040");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 7,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel040 = args[0].dat->size[0];
  int xdim1_opensbliblock00Kernel040 = args[1].dat->size[0];
  int xdim2_opensbliblock00Kernel040 = args[2].dat->size[0];
  int xdim3_opensbliblock00Kernel040 = args[3].dat->size[0];
  int xdim4_opensbliblock00Kernel040 = args[4].dat->size[0];
  int xdim5_opensbliblock00Kernel040 = args[5].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ rhoE_B0_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ rhou1_B0_p = (double *)(args[1].data + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ x0_B0_p = (double *)(args[2].data + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ rhou0_B0_p = (double *)(args[3].data + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ rho_B0_p = (double *)(args[4].data + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ x1_B0_p = (double *)(args[5].data + base5);




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 7);
  ops_halo_exchanges(args,7,range);
  ops_H_D_exchanges_host(args, 7);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for
  for ( int n_y=start[1]; n_y<end[1]; n_y++ ){
    #ifdef __INTEL_COMPILER
    #pragma loop_count(10000)
    #pragma omp simd
    #elif defined(__clang__)
    #pragma clang loop vectorize(assume_safety)
    #elif defined(__GNUC__)
    #pragma GCC ivdep
    #else
    #pragma simd
    #endif
    for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
      int idx[] = {arg_idx[0]+n_x, arg_idx[1]+n_y};
      ACC<double> rhoE_B0(xdim0_opensbliblock00Kernel040, rhoE_B0_p + n_x*1 + n_y * xdim0_opensbliblock00Kernel040*1);
      ACC<double> rhou1_B0(xdim1_opensbliblock00Kernel040, rhou1_B0_p + n_x*1 + n_y * xdim1_opensbliblock00Kernel040*1);
      ACC<double> x0_B0(xdim2_opensbliblock00Kernel040, x0_B0_p + n_x*1 + n_y * xdim2_opensbliblock00Kernel040*1);
      ACC<double> rhou0_B0(xdim3_opensbliblock00Kernel040, rhou0_B0_p + n_x*1 + n_y * xdim3_opensbliblock00Kernel040*1);
      ACC<double> rho_B0(xdim4_opensbliblock00Kernel040, rho_B0_p + n_x*1 + n_y * xdim4_opensbliblock00Kernel040*1);
      ACC<double> x1_B0(xdim5_opensbliblock00Kernel040, x1_B0_p + n_x*1 + n_y * xdim5_opensbliblock00Kernel040*1);
      
   double rhou0 = 0.0;
   double rho = 0.0;
   double rhou1 = 0.0;
   double T = 0.0;
   x0_B0(0,0) = Delta0block0*idx[0];

   x1_B0(0,0) = Lx1*sinh(Delta1block0*by*rcinv4*idx[1])/sinh(by);

    rhou0 = ((x1_B0(0,0) < 3.47434743474347) ? (
   2.35554518722192e-22*pow(x1_B0(0,0), 50) -
      2.00935622540676e-21*pow(x1_B0(0,0), 49) + 5.5615361207827e-22*pow(x1_B0(0,0), 48) +
      1.76714695246477e-20*pow(x1_B0(0,0), 47) + 4.27790899476588e-20*pow(x1_B0(0,0), 46) -
      3.0408859120785e-20*pow(x1_B0(0,0), 45) - 5.69009417522241e-19*pow(x1_B0(0,0), 44) -
      2.10087120844669e-18*pow(x1_B0(0,0), 43) - 3.20009578826937e-18*pow(x1_B0(0,0), 42) +
      8.56005650676752e-18*pow(x1_B0(0,0), 41) + 7.78512277075068e-17*pow(x1_B0(0,0), 40) +
      2.86637362290176e-16*pow(x1_B0(0,0), 39) + 5.37596700702354e-16*pow(x1_B0(0,0), 38) -
      6.17404591299293e-16*pow(x1_B0(0,0), 37) - 9.50666354095459e-15*pow(x1_B0(0,0), 36) -
      4.18216241328414e-14*pow(x1_B0(0,0), 35) - 1.03686900040183e-13*pow(x1_B0(0,0), 34) -
      3.79907648041725e-14*pow(x1_B0(0,0), 33) + 1.04941721462694e-12*pow(x1_B0(0,0), 32) +
      5.89363619050573e-12*pow(x1_B0(0,0), 31) + 1.76772455155239e-11*pow(x1_B0(0,0), 30) +
      1.894664111461e-11*pow(x1_B0(0,0), 29) - 1.1912608960156e-10*pow(x1_B0(0,0), 28) -
      8.29561167424891e-10*pow(x1_B0(0,0), 27) - 2.65171228618462e-9*pow(x1_B0(0,0), 26) -
      2.75178543736377e-9*pow(x1_B0(0,0), 25) + 1.94021569054454e-8*pow(x1_B0(0,0), 24) +
      1.24222966145e-7*pow(x1_B0(0,0), 23) + 3.23932173598062e-7*pow(x1_B0(0,0), 22) -
      1.10433230520441e-7*pow(x1_B0(0,0), 21) - 4.43731691707406e-6*pow(x1_B0(0,0), 20) -
      1.62563201766465e-5*pow(x1_B0(0,0), 19) - 6.13597215217328e-6*pow(x1_B0(0,0), 18) +
      0.00017698718810181*pow(x1_B0(0,0), 17) + 0.000613829636434701*pow(x1_B0(0,0), 16) -
      0.000526657087147129*pow(x1_B0(0,0), 15) - 0.00843667410839182*pow(x1_B0(0,0), 14) -
      0.00594419266786583*pow(x1_B0(0,0), 13) + 0.0952133000516688*pow(x1_B0(0,0), 12) +
      0.0357527259135771*pow(x1_B0(0,0), 11) - 1.15748478292371*pow(x1_B0(0,0), 10) +
      3.37719847683204*pow(x1_B0(0,0), 9) - 5.16542804320381*pow(x1_B0(0,0), 8) +
      4.9112377235697*pow(x1_B0(0,0), 7) - 3.05399260251765*pow(x1_B0(0,0), 6) +
      1.24979596182769*pow(x1_B0(0,0), 5) - 0.340798552976241*pow(x1_B0(0,0), 4) +
      0.137512844236659*pow(x1_B0(0,0), 3) - 0.00379011732118699*pow(x1_B0(0,0), 2) +
      0.423487405503203*x1_B0(0,0) - 9.41149679597911e-7
)
: (
   0.999999408078923
));

    rhou1 = ((x1_B0(0,0) < 3.47434743474347) ? (
   2.15764795669156e-24*pow(x1_B0(0,0), 50) -
      1.89236583169422e-23*pow(x1_B0(0,0), 49) + 7.69202870838675e-24*pow(x1_B0(0,0), 48) +
      1.70507955045203e-22*pow(x1_B0(0,0), 47) + 3.81782695492734e-22*pow(x1_B0(0,0), 46) -
      4.26028242016517e-22*pow(x1_B0(0,0), 45) - 5.70193580147886e-21*pow(x1_B0(0,0), 44) -
      1.95829270385051e-20*pow(x1_B0(0,0), 43) - 2.46387244832335e-20*pow(x1_B0(0,0), 42) +
      1.0616664844971e-19*pow(x1_B0(0,0), 41) + 7.95407816708425e-19*pow(x1_B0(0,0), 40) +
      2.69801421299289e-18*pow(x1_B0(0,0), 39) + 4.24407454854892e-18*pow(x1_B0(0,0), 38) -
      1.02494549465857e-17*pow(x1_B0(0,0), 37) - 1.0311464216514e-16*pow(x1_B0(0,0), 36) -
      4.10562137490978e-16*pow(x1_B0(0,0), 35) - 8.90846425246352e-16*pow(x1_B0(0,0), 34) +
      3.31839382309436e-16*pow(x1_B0(0,0), 33) + 1.25486073963286e-14*pow(x1_B0(0,0), 32) +
      6.10498505342066e-14*pow(x1_B0(0,0), 31) + 1.6167911954809e-13*pow(x1_B0(0,0), 30) +
      7.95636452430526e-14*pow(x1_B0(0,0), 29) - 1.58890143033548e-12*pow(x1_B0(0,0), 28) -
      8.98717229545117e-12*pow(x1_B0(0,0), 27) - 2.49620942515269e-11*pow(x1_B0(0,0), 26) -
      1.0340623615852e-11*pow(x1_B0(0,0), 25) + 2.61421317577836e-10*pow(x1_B0(0,0), 24) +
      1.35337409877607e-9*pow(x1_B0(0,0), 23) + 2.89301414991171e-9*pow(x1_B0(0,0), 22) -
      4.20736535406375e-9*pow(x1_B0(0,0), 21) - 5.39309325859807e-8*pow(x1_B0(0,0), 20) -
      1.63185626867493e-7*pow(x1_B0(0,0), 19) + 6.20583025035606e-8*pow(x1_B0(0,0), 18) +
      2.24953481819515e-6*pow(x1_B0(0,0), 17) + 6.18680429670961e-6*pow(x1_B0(0,0), 16) -
      1.13933889779781e-5*pow(x1_B0(0,0), 15) - 0.000100760514960644*pow(x1_B0(0,0), 14) -
      1.22902099586774e-5*pow(x1_B0(0,0), 13) + 0.00122012359509703*pow(x1_B0(0,0), 12) -
      0.000174713582148392*pow(x1_B0(0,0), 11) - 0.0144727047728154*pow(x1_B0(0,0), 10) +
      0.0478143661600029*pow(x1_B0(0,0), 9) - 0.0798994096272105*pow(x1_B0(0,0), 8) +
      0.0824506842402908*pow(x1_B0(0,0), 7) - 0.0554878434156257*pow(x1_B0(0,0), 6) +
      0.024435875255148*pow(x1_B0(0,0), 5) - 0.00654584540468695*pow(x1_B0(0,0), 4) +
      0.0011741804058932*pow(x1_B0(0,0), 3) + 0.00108918546751579*pow(x1_B0(0,0), 2) +
      4.14937248562039e-6*x1_B0(0,0) - 3.82351596027384e-8
)
: (
   0.00564964364741575
));

    T = ((x1_B0(0,0) < 3.47434743474347) ? (
   -3.73062431090927e-23*pow(x1_B0(0,0), 50) +
      3.02359695459513e-22*pow(x1_B0(0,0), 49) - 7.07491196041644e-24*pow(x1_B0(0,0), 48) -
      2.53606828122103e-21*pow(x1_B0(0,0), 47) - 7.11707143461952e-21*pow(x1_B0(0,0), 46) +
      2.00310852950841e-22*pow(x1_B0(0,0), 45) + 7.52116250840464e-20*pow(x1_B0(0,0), 44) +
      3.24392644909234e-19*pow(x1_B0(0,0), 43) + 6.59241426720847e-19*pow(x1_B0(0,0), 42) -
      4.86367549750723e-19*pow(x1_B0(0,0), 41) - 9.84138716065443e-18*pow(x1_B0(0,0), 40) -
      4.36436437408906e-17*pow(x1_B0(0,0), 39) - 1.0816198463299e-16*pow(x1_B0(0,0), 38) -
      4.86879330244086e-17*pow(x1_B0(0,0), 37) + 1.01293239198981e-15*pow(x1_B0(0,0), 36) +
      5.8560337439448e-15*pow(x1_B0(0,0), 35) + 1.86798098486401e-14*pow(x1_B0(0,0), 34) +
      2.84085898057424e-14*pow(x1_B0(0,0), 33) - 7.36888478006771e-14*pow(x1_B0(0,0), 32) -
      7.24583126682524e-13*pow(x1_B0(0,0), 31) - 2.88766040431012e-12*pow(x1_B0(0,0), 30) -
      6.23239605204644e-12*pow(x1_B0(0,0), 29) + 2.76973114508602e-12*pow(x1_B0(0,0), 28) +
      8.91072111188987e-11*pow(x1_B0(0,0), 27) + 4.1295461211974e-10*pow(x1_B0(0,0), 26) +
      9.6213970081005e-10*pow(x1_B0(0,0), 25) - 3.19651870754426e-10*pow(x1_B0(0,0), 24) -
      1.3081654019114e-8*pow(x1_B0(0,0), 23) - 5.63175435016545e-8*pow(x1_B0(0,0), 22) -
      9.40865847984399e-8*pow(x1_B0(0,0), 21) + 2.6801438576199e-7*pow(x1_B0(0,0), 20) +
      2.20028198405674e-6*pow(x1_B0(0,0), 19) + 5.26409565182062e-6*pow(x1_B0(0,0), 18) -
      6.87036544347723e-6*pow(x1_B0(0,0), 17) - 8.18100285010394e-5*pow(x1_B0(0,0), 16) -
      0.000150183322274531*pow(x1_B0(0,0), 15) + 0.000546559389166845*pow(x1_B0(0,0), 14) +
      0.00248793676507131*pow(x1_B0(0,0), 13) - 0.00313492651549679*pow(x1_B0(0,0), 12) -
      0.0233426212015386*pow(x1_B0(0,0), 11) + 0.0513778712722904*pow(x1_B0(0,0), 10) +
      0.0387070396341026*pow(x1_B0(0,0), 9) - 0.284700530808648*pow(x1_B0(0,0), 8) +
      0.486110749941822*pow(x1_B0(0,0), 7) - 0.442517067346077*pow(x1_B0(0,0), 6) +
      0.27455584544276*pow(x1_B0(0,0), 5) - 0.105304396585597*pow(x1_B0(0,0), 4) +
      0.0162954064602151*pow(x1_B0(0,0), 3) - 0.291761640877121*pow(x1_B0(0,0), 2) +
      7.47721770024649e-5*x1_B0(0,0) + 1.67619323512792
)
: (
   1.00000058834432
));

   rho = 1.0/T;

   rho_B0(0,0) = rho;

   rhou0_B0(0,0) = rhou0;

   rhou1_B0(0,0) = rhou1;

   rhoE_B0(0,0) = rcinv5*rcinv6*rcinv7*T*rho + (0.5*pow(rhou0, 2) + 0.5*pow(rhou1, 2))/rho;


    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[0].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 7);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel040(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 0;
  desc->index = 0;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 0;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 7;
  desc->args = (ops_arg*)ops_malloc(7*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->function = ops_par_loop_opensbliblock00Kernel040_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel040");
  }
  ops_enqueue_kernel(desc);
}
#endif
